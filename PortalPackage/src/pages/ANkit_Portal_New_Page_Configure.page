<apex:page controller="NewEditPortalPageController" showHeader="false" standardStylesheets="false" sidebar="false" applyHtmlTag="false" applyBodyTag="false" docType="html-5.0">
	<head>
		<!--  Meta tags -->
		<meta charset="utf-8" />
    	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
  		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
  		
    	<!-- Lightning Design System -->
      	<apex:stylesheet value="{!URLFOR($Resource.SLDS0121, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />
    
    	<!-- Bootstrap SF1 -->
    	<apex:stylesheet value="{!URLFOR($Resource.bootstrap, 'bootstrap-3.3.6/css/bootstrap.css')}" />
    	<apex:stylesheet value="{!URLFOR($Resource.RichTextEditor, 'angular-wysiwyg-master/dist/style.css')}" />
    	<apex:stylesheet value="{!URLFOR($Resource.Portal_Font_Awsome, 'css/font-awesome.css')}" />
    	
    	<!-- Including JQuery & Bootstrap JS -->
    	<apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js" />
    	<apex:includeScript value="https://code.jquery.com/ui/1.11.4/jquery-ui.js" />
    	<apex:includeScript value="{!URLFOR($Resource.bootstrap, 'bootstrap-3.3.6/js/bootstrap.min.js')}"/>
    	
    	<link href='https://fonts.googleapis.com/css?family=Open+Sans:300,400,700' rel='stylesheet' type='text/css'/>
		
		<!-- Introducing Angular -->
		<apex:includeScript value="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js" />
		<apex:includeScript value="{!URLFOR($Resource.RichTextEditor, 'angular-wysiwyg-master/dist/bootstrap-colorpicker-module.js')}" />
		<apex:includeScript value="{!URLFOR($Resource.RichTextEditor, 'angular-wysiwyg-master/dist/angular-wysiwyg.js')}" />
		
	</head>
	
	<style>
		.remove-padding {
			padding:0px;
		}
		
		.admin-panel-main-container .admin-panel-header-div {
			background: #333;
			position:fixed;
			height:50px;
			padding-top: 7px;
			z-index:1;
		}
		
		.admin-panel-main-container .admin-panel-header-div .admin-panel-header-back-link-div a.slds-button--neutral {
			font-size:12px;
			padding: 0px 8px;
		}
		
		.admin-panel-main-container .main-body-part {
			position: relative;
    		top: 50px;
    		margin-top:5px;
		}
		
		.admin-panel-main-container .main-body-part .main-body-left-panel {
			/*position:fixed;
			left:0;
			top:55px;*/
			height:100%;
		}
		
		.admin-panel-main-container .main-body-part .main-body-left-panel .create-section-button-div, .admin-panel-main-container .main-body-part .create-model-button-div .create-model-button {
			margin-top:5px;
		}
		
		.admin-panel-main-container .main-body-part .main-body-left-panel .create-section-button-div .slds-button--brand {
			width:100%;
		}
		
		.admin-panel-main-container .main-body-part .main-body-left-panel .create-page-header-button-div .slds-button--brand {
			width:100%;
		}
		
		.admin-panel-main-container .main-body-part .main-body-left-panel .create-model-button-div .slds-button--brand {
			width:100%;
		}
		
		.admin-panel-main-container .main-body-part .main-body-right-panel {
			border:1px solid #DDD;
			border-top-left-radius:5px;
			border-top-right-radius:5px;
			margin-top:40px;
		}
		
		.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-div {
			background: #004f87;
			color: #FFF;
			border-top-left-radius:5px;
			border-top-right-radius:5px;
			height:25px;
		}
		
		.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-description-div {
			background: #F1F1F1;
		}
		
		.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-description-div .page-header-description-left-div {
		    padding: 2px 15px;
		}
		
		.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-div .page-header-left-div {
			padding: 1px 15px;
		}
		
		.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-div .page-header-left-div h1 {
			font-size: 20px;
		    font-family: verdana;
		    color: #FFF;
		}
		
		.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-div .page-header-right-div {
			margin-right: 8px;
    		margin-top: -2px;
		}
		
		.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-div .page-header-right-div a {
			font-size: 20px;
		    font-family: verdana;
		    color: #FFF;
		}
		
		.admin-panel-main-container .main-body-part .main-body-left-panel .model-list-field-div {
			margin-top:10px;
			background: #fff;
    		min-width: 100%;
    		border: 1px solid #EEEEEE;
    		padding-top:5px;
    		height:300px;
    		overflow:auto;
    		position: static;
		}
		
		.field-list-div ul.fieldSortable {
			padding: 0px 8px;
		}
		
		.field-list-div ul.apply-min-height {
			min-height:50px;
		}
		
		.field-list-div ul.fieldSortable li {
			background-color: #A7C4E2;
		    border-radius: 0px;
		    text-align: center;
		    margin-bottom:10px;
		    padding-left: 10px;
		    padding-right: 10px;
		    font-size: small;
		    width: inherit;
		    padding: 5px;
		    cursor: move;
		    color:#000;
		}
		
		.fieldSortable-placeholder {
		 	border: 1px dotted black;
		    min-height: 44px;
		    background-color: #FFF !important;
		 }
		
		.remove-margin {
			margin-left: 0px;
    		margin-right: 0px;
		}
		
		.field-list-div div.alert {
			margin-bottom:5px;
			margin:0px 8px 5px 8px;
		}
		
		.admin-panel-main-container .main-body-part .main-body-right-panel .section-div {
			padding: 10px;
		}
		
		.admin-panel-main-container .main-body-part .main-body-right-panel .section-div div.section-header-div {
			background: rgb(52, 73, 94);
    		color: #FFF;
		}
		
		.admin-panel-main-container .main-body-part .main-body-right-panel .section-div div.section-header-div div.pull-right {
	    	margin: 4px 7px;
		}
		
		.inner-wrapper-left {
			float:left;
		 }
		 
		 .inner-wrapper-right {
			float:right;
		 }
		 
		 .inner-wrapper-full-width {
		 	width:100%;
		 }
		 
		 .inner-wrapper-half-width {
		 	width:49%;
		 }
		 
		 .inner-wrapper-ul-div {
			text-align:center;
			overflow:hidden;
			margin-top:5px;
		 }
		 
		 .inner-wrapper-ul-div.apply-height {
		 	height:35px;
		 }
		 
		 .section-sortable li.section-list {
		 	margin-bottom:10px;
		 }
		 
		 .admin-panel-main-container .main-body-part .main-body-left-panel .model-list-field-div.apply-position-static {
		 	position: static;
		 }
		 
		 .slds .slds-form-element .slds-checkbox [type="checkbox"] ~ .slds-checkbox--faux.my-custom-checkbox {
		 	margin-right: 4px;
    		float: left;
    		margin-top: 2px;
		 }
		 
		 .slds .slds-checkbox .slds-form-element__label.my-custom-text {
		 	display: block;
		    vertical-align: middle;
		    font-size: 12px;
		    float: left;
		    text-align: left;
		    max-width: 68%;
		 }
		 
		 .slds .slds-checkbox.my-custom-label {
		 	display:block;
		 }
		 
		 .selected-field-span {
		 	border: 1px dashed #CCC;
		    margin-left: 5px;
		    width: calc(25% - 5px);
	        margin-bottom: 5px;
		 }
		 
		 .selected-field-span:nth-of-type(4n+1){
		 	clear:both;
	 	 }
	 	 
	 	 div.inner-wrapper-ul-div ul.fieldSortable {
			height:100%;
		 }
		 
		 div.inner-wrapper-ul-div ul.fieldSortable li {
			background-color: #A7C4E2;
		    border-radius: 0px;
		    text-align: center;
		    margin-bottom:10px;
		    padding-left: 10px;
		    padding-right: 10px;
		    font-size: small;
		    width: inherit;
		    padding: 5px;
		    cursor: move;
		    color:#000;
		 }
		 
		 div.submit-button-div {
		 	position:fixed;
		 	right:15px;
		 	top:55px;
		 }
		 
		 div.error-div {
		 	font-size:20px;
		 }
		 
		 div.error-div span.glyphicon.glyphicon-exclamation-sign {
		 	font-size: 24px;
		    position: relative;
		    top: 6px;
		 }
		 
		 div.loading-image-div {
		 	position:fixed;
		 	top:0;
		 	left:0;
		 	right:0;
		 	bottom:0;
		 	z-index:10000;
		 	background: #FFF;
		 	opacity: 0.7;
		 }
		 
		 div.loading-image-div div.slds-spinner--medium {
		 	margin: 5% auto;
		 }
		 
		 div.component-div {
		 	margin-top: 10px;
		    background: #fff;
		    min-width: 100%;
		    border: 1px solid #EEEEEE;
		    padding-top: 5px;
		 }
		 
		 div.component-div .upload-div ul.fieldSortable {
		 	padding: 0px 8px;
    		min-height: 30px;
		 }
		 
		 div.component-div .upload-div ul.fieldSortable li {
		 	background-color: #A7C4E2;
		    border-radius: 0px;
		    text-align: center;
		    margin-bottom: 10px;
		    padding-left: 10px;
		    padding-right: 10px;
		    font-size: small;
		    width: inherit;
		    padding: 5px;
		    cursor: move;
		    color: #000; 
		  
		 }
		 
		 .slds-col {
		 	margin: 0px 5px;
		 }
		 
		 div.condition-div :first-child {
		 	margin-left:0px;
		 }
		 
		 div.condition-div :last-child {
		 	margin-right:0px;
		 }
		 
		 div#selectedfieldInstruction {
		 	height: 100px !important;
		 }
		
		 @media (max-width: 768px) {
			.selected-field-span{
			 	clear:both;
		 	 }
		 	 
		 	 .selected-field-span {
			    width: calc(100% - 5px);
			 }
			 
			 .admin-panel-main-container .main-body-part .main-body-right-panel {
			 	width: calc(66.66666667% - 5px);
			 }
			/*.admin-panel-main-container .main-body-part .main-body-right-panel {
		    	left: 33.33333333%;
			}*/
		 }
		
		 @media (min-width: 769px) and (max-width: 991px) {
			.selected-field-span:nth-of-type(2n+1){
			 	clear:both;
		 	 }
		 	 
		 	 .selected-field-span {
			    width: calc(50% - 5px);
			 }
			 
			 .admin-panel-main-container .main-body-part .main-body-right-panel {
			 	width: calc(66.66666667% - 5px);
			 }
			/*.admin-panel-main-container .main-body-part .main-body-right-panel {
		    	left: 33.33333333%;
			}*/
		 }
		
		 @media (min-width: 992px) and (max-width: 1199px){
		 	.selected-field-span:nth-of-type(3n+1){
			 	clear:both;
		 	 }
		 	 
		 	 .selected-field-span {
			    width: calc(33.33333333% - 5px);
			 }
			 
			 .admin-panel-main-container .main-body-part .main-body-right-panel {
			 	width: calc(75% - 5px);
			 }
			/*.admin-panel-main-container .main-body-part .main-body-right-panel {
		    	left: 25%;
			}*/
		 }
		
		 @media (min-width: 1200px) {
		 	.selected-field-span:nth-of-type(4n+1){
			 	clear:both;
		 	 }
		 	 
		 	 .selected-field-span {
			    width: calc(25% - 5px);
			 }
			 
			 .admin-panel-main-container .main-body-part .main-body-right-panel {
			 	width: calc(83.33333333% - 5px);
			 } 
			/*.admin-panel-main-container .main-body-part .main-body-right-panel {
				left:16.66666667%
			}*/
		 }
	</style>
	
	
	<body>
		<!-- Admin Panel Start -->
		<div class="slds" ng-app="createPortalPageApp" ng-controller="CreatePortalPageController">
			<div class="loading-image-div" id="loadingImageDiv">
				<div class="slds-spinner--medium">
			  		<img src="/resource/1453374072000/slds_spinner_brand" alt="Loading..." />
				</div>
			</div>
			<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 remove-padding admin-panel-main-container">
				<!-- Admin Panel Header Starts -->
				<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 admin-panel-header-div">
					<div class="admin-panel-header-logo-div pull-left">
						<a href="#!" class=""><img src="{!URLFOR($Resource.MainTemplateAsset, 'img/ERx_Logo.jpg')}" alt="Logo"/></a>
					</div>
					<div class="admin-panel-header-back-link-div pull-right">
						<a href="Portal_Page_Configure" class="slds-button slds-button--neutral"><span class="glyphicon glyphicon-share-alt"></span> Form Builder Home</a>
					</div>
				</div>
				<!-- Admin Panel Header Ends -->
				
				<!-- Clear Div -->
				<div class="clearfix"></div>
				
				<apex:outputPanel layout="block" styleClass="col-lg-12 col-md-12 col-sm-12 col-xs-12 remove-padding main-body-part" rendered="{!errorMessage != null && errorMessage != ''}">
					<div class="alert alert-danger error-div" role="alert">
						<span class="glyphicon glyphicon-exclamation-sign"></span> {!errorMessage}
					</div>
				</apex:outputPanel>
				
				<apex:outputPanel layout="block" styleClass="col-lg-12 col-md-12 col-sm-12 col-xs-12 remove-padding main-body-part" rendered="{!errorMessage == null || errorMessage == ''}">
					<div class="col-lg-2 col-md-3 col-sm-4 col-xs-4 main-body-left-panel">
						<!-- Page Header Button Starts -->
						<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 create-page-header-button-div">
							<button class="slds-button slds-button--brand create-model-button" ng-click="showCreateNewPageHeader();" ng-if="pageHeaderObject.title != null">Update Page Header</button>
							<button class="slds-button slds-button--brand create-model-button" ng-click="showCreateNewPageHeader();" ng-if="pageHeaderObject.title == null">Create Page Header</button>
						</div>
						<!-- Page Header Button Ends -->
						
						<!-- Create Model Button Starts -->
						<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 create-model-button-div">
							<button class="slds-button slds-button--brand create-model-button" ng-click="showCreateNewModel();">Create Model</button>
						</div>
						<!-- Create Model Button Ends -->
						
						<!-- Create Section Button Starts -->
						<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 create-section-button-div">
							<button class="slds-button slds-button--brand create-model-button" ng-click="showCreateNewSection();" ng-if="selectedModelList.length != 0">Create Section</button>
						</div>
						<!-- Create Section Button Ends -->
						
						<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 remove-padding model-list-field-div">
							<div ng-repeat="selectedModel in selectedModelList" class="field-list-div">
								<div class="alert alert-info" role="alert">
									<apex:outputText escape="false" value="Model Name : {{selectedModel.modelName}}" />
								</div>
								<ul class="fieldSortable fieldSortableUl ui-sortable apply-min-height" data-model-type="{{selectedModel.modelName}}" id="fieldSortable{{$index}}">
									<li class="ui-state-default ui-sortable-handle" data-model-type="{{selectedModel.modelName}}" data-api-name="{{field.fieldAPIName}}" ng-repeat="field in selectedModel.field | orderBy:field.fieldName">
										<span>
											{{field.fieldName}}
										</span>
											
									</li>
								</ul>
							</div>
						</div>
						
						<!-- Ohter Components -->
						<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 remove-padding component-div">
							<!-- Upload Component -->
							<div class="upload-div">
								<ul class="fieldSortable" id="uploadComponent" ng-repeat="uploadData in uploadDataList">
									<li class="ui-state-default ui-sortable-handle">
										<span>{{uploadData.value}}</span>
									</li>
								</ul>
							</div>
						</div>						
					</div>
					<div class="col-lg-10 col-md-9 col-sm-8 col-xs-8 remove-padding main-body-right-panel">
						<div ng-if="pageHeaderObject.title != null" class="page-header-div">
							<div class="pull-left page-header-left-div">
								<h1 ng-dblclick="showCreateNewPageHeader();" style="cursor:pointer;">{{pageHeaderObject.title}}</h1>
							</div>
							<div class="pull-right page-header-right-div">
								<a href="#!" ng-click="removePageHeader();"><span class="glyphicon glyphicon-remove"></span></a>
							</div>
							<div class="clearfix"></div>
						</div>
						<div ng-if="pageHeaderObject.description != null" class="page-header-description-div">
							<div class="pull-left page-header-description-left-div">
								<h5>{{pageHeaderObject.description}}</h5>
							</div>
							<div class="clearfix"></div>
						</div>
						<div class="section-div">
							<ul class="section-sortable" id="sectionSortable">
								<li class='section-list' id="{{sectionOrder}}" ng-repeat="sectionOrder in sectionOrderList">
									<div class='row remove-margin section-header-div'>
										<div class='pull-left' style='padding-bottom: 5px;'>
											<p ng-class="sectionMap[sectionOrder].className" ng-click="hideShowSection(sectionOrder);" style='display:inline;cursor:pointer;' ng-if="sectionMap[sectionOrder].className"></p>
											<p class="glyphicon glyphicon-minus" ng-click="hideShowSection(sectionOrder);" style='display:inline;cursor:pointer;' ng-if="!sectionMap[sectionOrder].className"></p>
											<a style='cursor:pointer; color:#FFF;' title='Double click to update' ng-dblclick="updateSectionDetail(sectionOrder);">
												<span class='customSpan' title='Double click to update' > {{sectionMap[sectionOrder].title}} </span>
											</a>
										</div>
										<div class='pull-right'>
											<h1 class='remove-section' ng-click="removeSection(sectionOrder);" title='Remove Section' style='cursor:pointer;background:none;color:white;'>&#10005;
											</h1>
										</div>
										<div class='clearfix'></div>
									</div>
									<div ng-if="sectionMap[sectionOrder].description != ''">
										<div class='pull-left' style='padding-bottom: 5px;'>
											{{sectionMap[sectionOrder].description}}
										</div>
										<div class='clearfix'></div>
									</div>
									<div ng-class="sectionMap[sectionOrder].innerDivClass" id="main-wrapper-div-{{sectionOrder}}" ng-if="sectionMap[sectionOrder].sectionLayout.trim().toUpperCase() == 'ONECOLUMN'">
										<div class="inner-wrapper-left inner-wrapper-full-width">
											<div class='inner-wrapper-ul-div' ng-repeat="field in sectionMap[sectionOrder].field">
												<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable' ng-if="field.fieldDisplayType.toUpperCase() != 'UPLOAD'">
													<li class="ui-state-default ui-sortable-handle" data-model-type="{{field.modelName}}" data-api-name="{{field.fieldAPIName}}">
														<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
															{{field.label}}
														</span>
														<span class=" pull-right" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
														<span class="clearfix"></span>
													</li>
												</ul>
												<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable upload-ul' ng-if="field.fieldDisplayType.toUpperCase() == 'UPLOAD'">
													<li class="ui-state-default ui-sortable-handle" is-upload-type="true">
														<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
															{{field.label}}
														</span>
														<span class=" pull-right" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
														<span class="clearfix"></span>
													</li>
												</ul>
											</div>
											<div class='inner-wrapper-ul-div apply-height' ng-if="sectionMap[sectionOrder].field.length == 0">
												<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable'>
												</ul>
											</div>
										</div>
										<div class="clearfix"></div>
									</div>
									<div ng-class="sectionMap[sectionOrder].innerDivClass" id="main-wrapper-div-{{sectionOrder}}" ng-if="sectionMap[sectionOrder].sectionLayout.trim().toUpperCase() == 'TWOCOLUMN'">
										<div class="inner-wrapper-left inner-wrapper-half-width">
											<div class='inner-wrapper-ul-div' ng-repeat="field in sectionMap[sectionOrder].field" ng-if="$even">
												<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable' ng-if="field.fieldDisplayType.toUpperCase() != 'UPLOAD'">
													<li class="ui-state-default ui-sortable-handle" data-model-type="{{field.modelName}}" data-api-name="{{field.fieldAPIName}}">
														<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
															{{field.label}}
														</span>
														<span class=" pull-right" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
														<span class="clearfix"></span>
													</li>
												</ul>
												<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable upload-ul' ng-if="field.fieldDisplayType.toUpperCase() == 'UPLOAD'">
													<li class="ui-state-default ui-sortable-handle" is-upload-type="true">
														<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
															{{field.label}}
														</span>
														<span class=" pull-right" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
														<span class="clearfix"></span>
													</li>
												</ul>
											</div>
											<div class='inner-wrapper-ul-div apply-height' ng-if="sectionMap[sectionOrder].field.length == 0">
												<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-1'}}" class='fieldSortable'>
												</ul>
											</div>
										</div>
										<div class="inner-wrapper-right inner-wrapper-half-width">
											<div class='inner-wrapper-ul-div' ng-repeat="field in sectionMap[sectionOrder].field" ng-if="$odd">
												<ul id="{{'main-wrapper-div-' + sectionOrder + '-right-' + ($index+1)}}" class='fieldSortable' ng-if="field.fieldDisplayType.toUpperCase() != 'UPLOAD'">
													<li class="ui-state-default ui-sortable-handle" data-model-type="{{field.modelName}}" data-api-name="{{field.fieldAPIName}}">
														<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
															{{field.label}}
														</span>
														<span class=" pull-right" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
														<span class="clearfix"></span>
													</li>
												</ul>
												<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable upload-ul' ng-if="field.fieldDisplayType.toUpperCase() == 'UPLOAD'">
													<li class="ui-state-default ui-sortable-handle" is-upload-type="true">
														<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
															{{field.label}}
														</span>
														<span class=" pull-right" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
														<span class="clearfix"></span>
													</li>
												</ul>
											</div>
											<div class='inner-wrapper-ul-div apply-height' ng-if="sectionMap[sectionOrder].field.length == 0">
												<ul id="{{'main-wrapper-div-' + sectionOrder + '-right-1'}}" class='fieldSortable'>
												</ul>
											</div>
										</div>
										<div class="clearfix"></div>
									</div>
								</li>	
							</ul>
						</div>
					</div>
										
					<div class="clearfix"></div>
				</apex:outputPanel>
				<div class="clearfix"></div>
			</div>
			
			
			<!-- Save All Data Button -->
			<apex:outputPanel layout="block" rendered="{!errorMessage == null || errorMessage == ''}">
				<div class="submit-button-div">
					<button class="slds-button slds-button--brand create-model-button" type="button" ng-click="saveAllData();"><span class="glyphicon glyphicon-floppy-disk"></span> Save All Data</button>
				</div>
				
				<!--  Page Header Div -->
				<div id="createNewPageHeaderDiv" ng-show="isShowCreatePageHeader == true" class="hide">
					<div aria-hidden="false" role="dialog" class="slds-modal slds-modal--large slds-fade-in-open">
						<div class="slds-modal__container">
							<div class="slds-modal__header">
								<h2 class="slds-text-heading--medium" ng-if="pageHeaderObject.title != null">Update Page Header</h2>
								<h2 class="slds-text-heading--medium" ng-if="pageHeaderObject.title == null">Create Page Header</h2>
								<button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="hideCreateNewPageHeader();">
									<span class="glyphicon glyphicon-remove"></span>
									<span class="slds-assistive-text">Close</span>
								</button>
							</div>
							<div class="slds-modal__content">
								<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="sectionName">Title :</label>
										<div class="slds-form-element__control">
											<input type="text" ng-model="pageHeader.title" class="slds-input" id="pageTitle" name="pageTitle" />
										</div>
									</div>
								</div>
								<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="sectionName">Description :</label>
										<div class="slds-form-element__control">
											<input type="text" ng-model="pageHeader.description" class="slds-input" id="Description" name="Description" />
										</div>
									</div>
								</div>
							</div>
							<div class="slds-modal__footer">
								<div class="slds-x-small-buttons--horizontal">
									<button class="slds-button slds-button--neutral" ng-click="hideCreateNewPageHeader();">Cancel</button>
									<button class="slds-button slds-button--neutral slds-button--brand" ng-click="createPageHeader();" ng-if="pageHeaderObject.title != null">Update</button>
									<button class="slds-button slds-button--neutral slds-button--brand" ng-click="createPageHeader();" ng-if="pageHeaderObject.title == null">Create</button>
								</div>
							</div>
						</div>
					</div>
					<div class="slds-backdrop slds-backdrop--open"></div>
				</div>
				
				<!-- Create New Section -->
				<div id="createNewSectionDiv" ng-show="isShowCreateNewSection == true" class="hide">
					<div aria-hidden="false" role="dialog" class="slds-modal slds-modal--large slds-fade-in-open">
						<div class="slds-modal__container">
							<div class="slds-modal__header">
								<h2 class="slds-text-heading--medium" ng-if="!section.sectionOrder">Create Section</h2>
								<h2 class="slds-text-heading--medium" ng-if="section.sectionOrder">Update Section</h2>
								<button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="hideCreateNewSection();">
									<span class="glyphicon glyphicon-remove"></span>
									<span class="slds-assistive-text">Close</span>
								</button>
							</div>
							<div class="slds-modal__content">
								<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="sectionName">Section Name :</label>
										<div class="slds-form-element__control">
											<input type="text" ng-model="section.title" class="slds-input" id="sectionName" name="sectionName" />
										</div>
									</div>
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="sectionLayout">Layout :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" id="sectionLayout" name="sectionLayout" ng-model="section.sectionLayout">
												<option value="ONECOLUMN">One Column</option>
												<option value="TWOCOLUMN">Two Column</option>
											</select>
										</div>
									</div>
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="sectionCollapsible">Is Collapsible :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" id="sectionCollapsible" name="sectionCollapsible" ng-model="section.sectionCollapsible">
												<option value="true">True</option>
												<option value="false">False</option>
											</select>
										</div>
									</div>
									<div class="slds-form-element">
										<label class="slds-form-element__label">Render :</label>
										<div class="slds-form-element__control">
											<button class="slds-button slds-button--neutral slds-button--brand"><span class="glyphicon glyphicon-share-plus"></span> Condition </button>
										</div>
									</div>
									
								</div>
								<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="sectionDescription">Description :</label>
										<div class="slds-form-element__control">
											<input type="text" class="slds-input" id="sectionDescription" name="sectionDescription" ng-model="section.description" />
										</div>
									</div>
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="isAddAnother">Is Add Another :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" id="isAddAnother" name="isAddAnother" ng-model="section.isAddAnother" ng-options="o.value as o.label for o in [{ label: 'True', value: true }, { label: 'False', value: false }]" ng-change="section.removeButtonlabel = ''; section.addAnotherButtonLabel=''">
											</select>
										</div>
									</div>
									<div class="slds-form-element" ng-if="section.isAddAnother">
										<label class="slds-form-element__label" for="removeButtonLabel">Remove Button label :</label>
										<div class="slds-form-element__control">
											<input type="text" ng-model="section.removeButtonlabel" class="slds-input" id="removeButtonLabel" name="removeButtonLabel" />
										</div>
									</div>
									<div class="slds-form-element" ng-if="section.isAddAnother">
										<label class="slds-form-element__label" for="anotherButtonLabel">Add Another Button label :</label>
										<div class="slds-form-element__control">
											<input type="text" class="slds-input" id="anotherButtonLabel" name="anotherButtonLabel" ng-model="section.addAnotherButtonLabel" />
										</div>
									</div>
								</div>
							</div>
							<div class="slds-modal__footer">
								<div class="slds-x-small-buttons--horizontal">
									<button class="slds-button slds-button--neutral" ng-click="hideCreateNewSection();">Cancel</button>
									<button class="slds-button slds-button--neutral slds-button--brand" ng-click="createSection();" ng-if="section.sectionOrder">Update</button>
									<button class="slds-button slds-button--neutral slds-button--brand" ng-click="createSection();" ng-if="!section.sectionOrder">Create</button>
								</div>
							</div>
						</div>
					</div>
					<div class="slds-backdrop slds-backdrop--open"></div>
				</div>
				
				<!-- Create New Model Model -->
				<div id="createNewModelDiv" ng-show="isShowCreateNewModel == true" class="hide">
					<div aria-hidden="false" role="dialog" class="slds-modal slds-modal--large slds-fade-in-open">
						<div class="slds-modal__container">
							<div class="slds-modal__header">
								<h2 class="slds-text-heading--medium">Create Model</h2>
								<button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="hideCreateNewModel();">
									<span class="glyphicon glyphicon-remove"></span>
									<span class="slds-assistive-text">Close</span>
								</button>
							</div>
							<div class="slds-modal__content">
								<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="modelName">Model Name :</label>
										<div class="slds-form-element__control">
											<input type="text" ng-model="modelName" class="slds-input" id="modelName" name="modelName" />
										</div>
									</div>
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="objectList">Objects :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" id="objectList" name="objectList" ng-model="fields" ng-options="object.objectName for object in objectList" ng-change="fieldVal = []">
												<option value="" ng-if="false"></option>
											</select>
										</div>
									</div>
									<div class="slds-form-element">
										<label class="slds-form-element__label">Fields :</label>
									</div>
									<div class="slds-form-element" ng-if="fields.fieldList.length > 0">
										<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12" ng-repeat="fieldVal in fields.fieldList">
											<label class="slds-checkbox my-custom-label" for="field{{$index}}">
												<input name="checkbox" type="checkbox" id="field{{$index}}" ng-model="fieldVal.isChecked"/>
												<span class="slds-checkbox--faux my-custom-checkbox"></span>
												<span class="slds-form-element__label my-custom-text">{{fieldVal.fieldName}}</span>
											</label>
										</div>
									</div>
								</div>
								<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
									<div class="panel panel-success">
								  		<div class="panel-heading">Selected Fields</div>
									  	<div class="panel-body">
									    	<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 selected-field-span" ng-repeat="checkedItem in checkedItems()">
									    		<div class="selected-field-span-inner">{{checkedItem.fieldName}}</div>
											</div>
									  	</div>
									</div>
								</div>
							</div>
							<div class="slds-modal__footer">
								<div class="slds-x-small-buttons--horizontal">
									<button class="slds-button slds-button--neutral" ng-click="hideCreateNewModel();">Cancel</button>
									<button class="slds-button slds-button--neutral slds-button--brand" ng-click="addModel();">Save</button>
								</div>
							</div>
						</div>
					</div>
					<div class="slds-backdrop slds-backdrop--open"></div>
				</div>
				
				<div id="configureDependentPicklistModel" ng-show="configureDependentDropdown == true" class="hide">
					<div aria-hidden="false" role="dialog" class="slds-modal slds-fade-in-open">
						<div class="slds-modal__container">
							<div class="slds-modal__header">
								<h2 class="slds-text-heading--medium">Configure Dependent Picklist</h2>
								<button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="hideConfigureDependentDropdown();">
									<span class="glyphicon glyphicon-remove"></span>
									<span class="slds-assistive-text">Close</span>
								</button>
							</div>
							<div class="slds-modal__content">
								<div>
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="sectionName">Title :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedValue" ng-options="value as key for (key,value) in dropdownDependentMap">
											</select>
										</div>
									</div>
									<div class="slds-form-element">
										<label class="slds-form-element__label"> Dependent :</label>
									</div>
									<div class="slds-form-element">
										<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12" ng-repeat="dependent in selectedValue">
											<label class="slds-checkbox my-custom-label" for="dependent{{$index}}">
												<input name="dependent" type="checkbox" id="dependent{{$index}}" ng-model="dependent.isChecked"/>
												<span class="slds-checkbox--faux my-custom-checkbox"></span>
												<span class="slds-form-element__label my-custom-text">{{dependent.value}}</span>
											</label>
										</div>
									</div>
								</div>
							</div>
							<div class="slds-modal__footer">
								<div class="slds-x-small-buttons--horizontal">
									<button class="slds-button slds-button--neutral" ng-click="hideConfigureDependentDropdown();">Cancel</button>
									<button class="slds-button slds-button--neutral slds-button--brand" ng-click="updatePicklistDependencyMap(true);">Save</button>
								</div>
							</div>
						</div>
					</div>
					<div class="slds-backdrop slds-backdrop--open"></div>
				</div>
				
				<!-- Update Field Information on section -->	
				<div id="updateFieldInfo" ng-show="isShowUpdateField == true" class="hide">
					<div aria-hidden="false" role="dialog" class="slds-modal slds-modal--large slds-fade-in-open">
						<div class="slds-modal__container">
							<div class="slds-modal__header">
								<h2 class="slds-text-heading--medium">Field Configuration </h2>
								<button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="hideUpdateFieldInfo();">
									<span class="glyphicon glyphicon-remove"></span>
									<span class="slds-assistive-text">Close</span>
								</button>
							</div>
							<div class="slds-modal__content">
								<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
									<!-- Field Name (Readonly) -->
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() != 'UPLOAD'">
										<label class="slds-form-element__label" for="selectedFieldName">Field Name :</label>
										<div class="slds-form-element__control">
											<input type="text" ng-model="selectedField.fieldName" class="slds-input" id="selectedFieldName" name="selectedFieldName" ng-readonly="true" />
										</div>
									</div>
									<!-- Field API Name (Readonly) -->
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() != 'UPLOAD'">
										<label class="slds-form-element__label" for="selectedfieldAPIName">Field API Name :</label>
										<div class="slds-form-element__control">
											<input type="text" ng-model="selectedField.fieldAPIName" class="slds-input" id="selectedfieldAPIName" name="selectedfieldAPIName" ng-readonly="true" />
										</div>
									</div>
									<!-- Field Label Text -->
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="selectedfieldLabelName">Field Label :</label>
										<div class="slds-form-element__control">
											<input type="text" ng-model="selectedField.label" class="slds-input" id="selectedfieldLabelName" name="selectedfieldLabelName"/>
										</div>
									</div>
									<!-- Field Required / Not Required Drop Down -->
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="fieldRequired">Is Required :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.required" id="fieldRequired" name="fieldRequired" ng-options="o.value as o.label for o in [{ label: 'True', value: true }, { label: 'False', value: false }]">
										  	</select>
										</div>
									</div>
									<!-- Rendered field -->
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="renderDropdown">Rendered :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.rendered" id="renderDropdown" name="renderDropdown" ng-options="o.value as o.label for o in [{ label: 'True', value: true }, { label: 'Condition', value: false }]" ng-change="updateConditionCriteria()">
										  	</select>
										</div>
									</div>
									<!-- Rendered Condition Div -->
									<div class="slds-form-element" ng-if="!selectedField.rendered">
										<label class="slds-form-element__label" for="RenderedCondition">Rendered Condition :</label>
										<div class="slds-scrollable--x">
											<table class="slds-table slds-table--bordered">
												<thead>
													<tr class="slds-text-heading--label">
														<th scope="col">
															<span class="slds-truncate">Model</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Criteria Field</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Operator</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Value</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Action</span>
														</th>
													</tr>
												</thead>
												<tbody>
													<tr class="slds-hint-parent" ng-repeat="renderCriteria in renderCriteriaList">
														<td>
															<select class="slds-select" ng-model="renderCriteria.modelName" id="renderCriteriaModelName" name="renderCriteriaModelName" ng-options="selectedModel.modelName as selectedModel.modelName for selectedModel in selectedModelList" ng-change="addMoreRenderedCondition(); renderCriteria.fieldAPIName = '';">
																<option value="">--None--</option>
															</select>
														</td>
														<td>
															<select class="slds-select" ng-model="renderCriteria.fieldAPIName" id="renderCriteriaField" name="renderCriteriaField" ng-options="c.fieldAPIName as c.fieldName for c in (renderCriterialFields | getlookupCriteriaFieldByModel: renderCriteria.modelName)" ng-if="renderCriteria.modelName != ''">
															</select>
														</td>
														<td>
															<select class="slds-select" ng-model="renderCriteria.fieldOperator" id="renderCriteriaOperator" name="renderCriteriaOperator" ng-options="op for op in operatorListString" ng-if="renderCriteria.fieldAPIName != ''">
															</select>
														</td>
														<td>
															<input class="slds-input" ng-model="renderCriteria.value" id="renderCriteriaValue" name="renderCriteriaValue" ng-if="renderCriteria.fieldAPIName != ''"/>
														</td>
														<td>
															<button class="slds-button" ng-click="removeRenderedCondition($index);" ng-if="($index != renderCriteriaList.length-1)"><span class="glyphicon glyphicon-remove"></span></button>
														</td>
													</tr>
												</tbody>
											</table>
										</div>
									</div>
									<!-- Hover Text Configure -->
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="hoverText">Hover Text :</label>
										<div class="slds-form-element__control">
											<input type="text" class="slds-input" ng-model="selectedField.hoverText" id="hoverText" name="hoverText" />
										</div>
									</div>
									<!-- Field Upload Type is Multiple -->
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'">
										<label class="slds-form-element__label" for="isMultiple">Multiple :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.multiple" id="isMultiple" name="isMultiple" ng-options="o.value as o.label for o in [{ label: 'True', value: true }, { label: 'False', value: false }]">
										  	</select>
										</div>
									</div>
									<!-- Maximum File Upload Size -->
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'">
										<label class="slds-form-element__label" for="maximumFileSize">Maximum File Size :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.maximumsize" id="maximumFileSize" name="maximumFileSize" ng-options="value as key for (key, value) in uploadFileSizeList">
										  	</select>
										</div>
									</div>
									<!-- Supported Upload File Format -->
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'">
										<label class="slds-form-element__label">Supported File Format :</label>
									</div>
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'" style="overflow:hidden;">
										<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12" ng-repeat="uploadSupportedFile in uploadSupportedFilesList">
											<label class="slds-checkbox my-custom-label" for="uploadSupportedFile{{$index}}">
												<input name="uploadSupportedFile" type="checkbox" id="uploadSupportedFile{{$index}}" ng-model="uploadSupportedFile.isChecked" ng-change="updateAllowContentType();"/>
												<span class="slds-checkbox--faux my-custom-checkbox"></span>
												<span class="slds-form-element__label my-custom-text">{{uploadSupportedFile.value}}</span>
											</label>
										</div>
									</div>
								</div>
								<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
									<!-- Field Place Holder -->
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="selectedfieldPlaceHolder">Element Placeholder Text :</label>
										<div class="slds-form-element__control">
											<input type="text" ng-model="selectedField.placeholderText" class="slds-input" id="selectedfieldPlaceHolder" name="selectedfieldPlaceHolder"/>
										</div>
									</div>
									<!-- Field Instruction -->
									<div class="slds-form-element">
										<label class="slds-form-element__label" for="selectedfieldInstruction">Instruction :</label>
										<div class="slds-form-element__control">
											<!-- <input type="text" ng-model="selectedField.instructionText" class="slds-input" id="selectedfieldInstruction" name="selectedfieldInstruction" ng-change="updateInstructionPosition();"/> -->
											<wysiwyg textarea-id="selectedfieldInstruction" textarea-class="form-control" textarea-height="180px" textarea-name="selectedfieldInstruction" ng-model="selectedField.instructionText" textarea-menu="[['bold', 'italic', 'underline', 'strikethrough', 'subscript', 'superscript'], ['font'], ['font-size'], ['font-color', 'hilite-color'], ['remove-format'], ['ordered-list', 'unordered-list', 'outdent', 'indent'], ['left-justify', 'center-justify', 'right-justify'], ['code', 'quote', 'paragraph'], ['link', 'image']]" ng-change="updateInstructionPosition();">
										     </wysiwyg>
										</div>
									</div>
									<!--  Instruction Position -->
									<div class="slds-form-element" ng-if="(selectedField.instructionText | htmlToPlaintext) != ''">
										<label class="slds-form-element__label" for="selectedfieldInstruction">Instruction Position :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.instructionTextPosition" id="selectedfieldInstruction" name="selectedfieldInstruction" ng-options="(fieldInstructionPosition | uppercase) as fieldInstructionPosition for fieldInstructionPosition in fieldInstructionPositions">
												<option value="" ng-if="false"></option>
										  	</select> 
										</div>
									</div>
									<!-- Upload Souce Id -->
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'">
										<label class="slds-form-element__label" for="uploadParentSource">Upload Parent Source :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.parentIdSource" id="uploadParentSource" name="uploadParentSource" ng-options="(uploadSource | uppercase) as uploadSource for uploadSource in uploadSourceListString" ng-change="updateParentIdSource();">
										  	</select>
										</div>
									</div>
									<!-- upload Parent Id -->
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'">
										<label class="slds-form-element__label" for="uploadParentId" ng-if="selectedField.parentIdSource.toUpperCase() == 'MODEL'">Model :</label>
										<label class="slds-form-element__label" for="uploadParentId" ng-if="selectedField.parentIdSource.toUpperCase() == 'PARAM'">Parameter Name :</label>
										<label class="slds-form-element__label" for="uploadParentId" ng-if="selectedField.parentIdSource.toUpperCase() == 'STATIC'">Record Id :</label>
										<div class="slds-form-element__control" ng-if="selectedField.parentIdSource.toUpperCase() == 'MODEL'">
											<select class="slds-select" ng-model="selectedField.parentId" id="uploadParentId" name="uploadParentId" ng-options="model.modelName as model.modelName for model in selectedModelList">
										  	</select>
										</div>
										<div class="slds-form-element__control" ng-if="selectedField.parentIdSource.toUpperCase() == 'PARAM' || selectedField.parentIdSource.toUpperCase() == 'STATIC'">
											<input type="text" ng-model="selectedField.parentId" class="slds-input" id="uploadParentId" name="uploadParentId" />
										</div>
									</div>
									<!-- Change Field Display Type (Show When Field is Reference Type) -->
									<div class="slds-form-element" ng-if="(selectedField.fieldDisplayType | uppercase) == 'REFERENCE'">
										<label class="slds-form-element__label" for="fieldDisplayType">Field Display Type :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.type" id="fieldDisplayType" name="fieldDisplayType" ng-options="(referenceFieldTypeString | uppercase) as referenceFieldTypeString for referenceFieldTypeString in referenceFieldTypeStringList" ng-change="updateControllingFieldValue();" ng-disabled="selectedField.isdependentField">
										  	</select>
										</div>
									</div>
									<!-- Record Criteria -->
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE'">
										<label class="slds-form-element__label">Record Criteria :</label>
										<div class="slds-scrollable--x">
											<table class="slds-table slds-table--bordered">
												<thead>
													<tr class="slds-text-heading--label">
														<th scope="col">
															<span class="slds-truncate">Criteria Field</span>
														</th>
														<th scope="col" ng-if="lookupRecordCriteria.fieldAPIName != ''">
															<span class="slds-truncate">Operator</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Value Type</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Model</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Value</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Action</span>
														</th>
													</tr>
												</thead>
												<tbody>
													<tr class="slds-hint-parent" ng-repeat="lookupRecordCriteria in lookupRecordCriteriaList">
														<td>
															<select class="slds-select" ng-model="lookupRecordCriteria.fieldAPIName" id="lookupRecordCriteriaField" name="lookupRecordCriteriaField" ng-options="c.fieldAPIName as c.fieldName for c in (lookupRecordCriteriaFieldList | removePreviousSelectedValues:lookupRecordCriteria.fieldAPIName:lookupRecordCriteriaList)" ng-change="addMoreCondition();">
															</select>
														</td>
														<td>
															<select class="slds-select" ng-model="lookupRecordCriteria.fieldOperator" id="lookupRecordCriteriaOperator" name="lookupRecordCriteriaOperator" ng-options="op for op in operatorListString" ng-if="lookupRecordCriteria.fieldAPIName != ''">
															</select>
														</td>
														<td>
															<select class="slds-select" ng-model="lookupRecordCriteria.valueType" id="lookupRecordCriteriaValueType" name="lookupRecordCriteriaValueType" ng-options="(uploadSource|uppercase) as uploadSource for uploadSource in uploadSourceListString" ng-change="getLookupRecordCriteriaModelValues(); lookupRecordCriteria.value = ''; lookupRecordCriteria.modelName = ''" ng-if="lookupRecordCriteria.fieldAPIName != ''">
															</select>
														</td>
														<td>
															<select class="slds-select" ng-model="lookupRecordCriteria.modelName" id="lookupRecordCriteriaModelName" name="lookupRecordCriteriaModelName" ng-options="selectedModel.modelName as selectedModel.modelName for selectedModel in selectedModelList" ng-if="lookupRecordCriteria.fieldAPIName != '' && (lookupRecordCriteria.valueType | uppercase) == 'MODEL'" ng-change="lookupRecordCriteria.value = '';">
															</select>
														</td>
														<td ng-if="(lookupRecordCriteria.valueType | uppercase) != 'MODEL'">
															<input class="slds-input" ng-model="lookupRecordCriteria.value" id="lookupRecordCriteriaValue" name="lookupRecordCriteriaValue" ng-if="lookupRecordCriteria.fieldAPIName != ''"/>
														</td>
														<td ng-if="(lookupRecordCriteria.valueType | uppercase) == 'MODEL'">
															<select class="slds-select" ng-model="lookupRecordCriteria.value" id="lookupRecordCriteriaValue" name="lookupRecordCriteriaValue" ng-options="lookupRecordCriteriaModelValue.fieldAPIName as lookupRecordCriteriaModelValue.fieldName for lookupRecordCriteriaModelValue in (lookupRecordCriteriaModelValues | getlookupCriteriaFieldByModel: lookupRecordCriteria.modelName)" ng-if="lookupRecordCriteria.fieldAPIName != ''">
															</select>
														</td>
														<td>
															<button class="slds-button" ng-click="removeCondition($index);" ng-if="$index != lookupRecordCriteriaList.length-1"><span class="glyphicon glyphicon-remove"></span></button>
														</td>
													</tr>			
												</tbody>
											</table>
										</div>
									</div>
									<!-- is FirstValue Blank -->
									<div class="slds-form-element" ng-if="(selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE' && selectedField.type.toUpperCase() == 'PICKLIST') || (selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST')">
										<label class="slds-form-element__label" for="isFirstValueBlank">Is FirstValue Blank :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.isFirstValueBlank" id="isFirstValueBlank" name="isFirstValueBlank" ng-options="o.value as o.label for o in [{ label: 'True', value: true }, { label: 'False', value: false }]">
										  	</select>
										</div>
									</div>
									<!-- Is Controlling Field -->
									<div class="slds-form-element" ng-if="(selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE' && selectedField.type.toUpperCase() == 'PICKLIST') || (selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST')">
										<label class="slds-form-element__label" for="isControllingField">Is Controlling Field :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.isControllingField" id="isControllingField" name="isControllingField" ng-options="o.value as o.label for o in [{ label: 'True', value: true }, { label: 'False', value: false }]" ng-change="updateControllingFields();">
										  	</select>
										</div>
									</div>
									<!-- Dependent Field for Picklist -->
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST' && selectedField.isControllingField">
										<label class="slds-form-element__label" for="dependentField">Dependent Field :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.dependentField" id="dependentField" name="dependentField" ng-options="(referenceDependentField.modelName + '----' + referenceDependentField.fieldAPIName) as referenceDependentField.fieldName for referenceDependentField in referenceFieldList" ng-change="showAlertToUser();">
										  	</select>
										</div>
									</div>
									<!-- Dependent Field Configure Button for Picklist -->
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST' && selectedField.isControllingField">
										<label class="slds-form-element__label" for="dependentField"></label>
										<div class="slds-form-element__control">
											<button class="slds-button slds-button--brand create-model-button" ng-click="showConfigureDependentDropdown();">Configure Dropdown</button>
										</div>
									</div>
									<!-- Dependent Field for Reference -->
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE' && selectedField.isControllingField">
										<label class="slds-form-element__label" for="dependentField">Dependent Field :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.dependentField" id="dependentField" name="dependentField" ng-options="(referenceDependentField.modelName + '----' + referenceDependentField.fieldAPIName) as referenceDependentField.fieldName for referenceDependentField in referenceFieldList" ng-change="getLookupCriteriaFieldName(); selectedField.criteriaField='';">
										  	</select>
										</div>
									</div>
									<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE' && selectedField.isControllingField && selectedField.dependentField != '' && criteriaFieldList.length > 0">
										<label class="slds-form-element__label" for="criteriaField">Mapping Field :</label>
										<div class="slds-form-element__control">
											<select class="slds-select" ng-model="selectedField.criteriaField" id="criteriaField" name="criteriaField" ng-options="c.fieldAPIName as c.fieldName for c in criteriaFieldList">
										  	</select>
										</div>
									</div>
								</div>
							</div>
							<!-- Update and Cancel Button Div -->
							<div class="slds-modal__footer">
								<div class="slds-x-small-buttons--horizontal">
									<button class="slds-button slds-button--neutral" ng-click="hideUpdateFieldInfo();">Cancel</button>
									<button class="slds-button slds-button--neutral slds-button--brand" ng-click="addUpdateSelectedField(false);" ng-if="isInsert == true">Add</button>
									<button class="slds-button slds-button--neutral slds-button--brand" ng-click="addUpdateSelectedField(true);" ng-if="isInsert == false">Update</button>
								</div>
							</div>
						</div>
					</div>
					<div class="slds-backdrop slds-backdrop--open"></div>
				</div>
			</apex:outputPanel>
		</div>
	</body>
	
	<script>
		var createPortalPageApp = angular.module("createPortalPageApp", ['colorpicker.module', 'wysiwyg.module']);
		
		// CreatePortalPageController Page Controller
		createPortalPageApp.controller('CreatePortalPageController', function($scope, $http, $sce, $q, $timeout, createPortalPageService, $filter){
		
			// Page Header Variables.
			$scope.pageHeader = {};
			$scope.isShowCreatePageHeader = false;
			$scope.pageHeaderObject = {!pageHeader};
			
			// Model Variables.
			$scope.isShowCreateNewModel = false;
			$scope.objectList = {!objectFieldListString};
			$scope.fieldVal = [];
			$scope.fields = $scope.objectList[0];
			$scope.selectedModelList = {!selectedModelListString};
			$scope.modelName = '';
			
			// Add Model Name to Selected Model's field List. 
			angular.forEach($scope.selectedModelList, function(model) {
				var objectModel;
				angular.forEach($scope.objectList, function(objectValue) {
					if(objectValue.objectAPIName == model.objectAPIName) {
						objectModel = angular.copy(objectValue);
					}
				});
				angular.forEach(model.field, function(field) {
					field.modelName = model.modelName;
					angular.forEach(objectModel.fieldList, function(fieldValue) {
						if(fieldValue.fieldAPIName == field.fieldAPIName) {
							field.fieldDisplayType = fieldValue.fieldDisplayType;
						}
					});
				});
			});
			
			// Section Variables.
			$scope.isShowCreateNewSection = false;
			$scope.section = {};
			$scope.sectionMap = {!sectionWrapperMapString};
			$scope.sectionOrderList = [];
			angular.forEach($scope.sectionMap, function(value, key) {
				$scope.sectionOrderList.push(key);
			});
			
			// Fields Variables
			$scope.fieldInstructionPositions = {!fieldInstructionPositionListString};
			$scope.referenceFieldTypeStringList = {!referenceFieldTypeStringList};
			
			// Upload Source List Values 
			$scope.uploadSourceListString = {!uploadSourceListString};
			$scope.uploadDataList = [{value:"Upload"}];
			$scope.uploadFileSizeList = {!uploadFileSizeList};
			
			// Update Field Varibles
			$scope.isShowUpdateField = false;
			$scope.selectedField = {};
			
			// Operator List
			$scope.operatorListString = {!operatorListString};
			
			var mapKeyToUpdateFieldInfo;
			var fieldIndexToUpdateInfo;
			var previousDependentField;
			
			// Page Header Function Starts
			
			// Function to Show Create New Page Header Popup
			$scope.showCreateNewPageHeader = function() {
				if(undefined != $scope.pageHeaderObject.title && $scope.pageHeaderObject.title != null) {
					$scope.pageHeader = angular.copy($scope.pageHeaderObject);
				}
				$scope.isShowCreatePageHeader = true;
			}
			
			// Function to Hide Create New Page Header Popup
			$scope.hideCreateNewPageHeader = function() {
				$scope.pageHeader = {};
				$scope.isShowCreatePageHeader = false;
			}
			
			// Function to Create New Page Header.
			$scope.createPageHeader = function(){
				if($scope.pageHeader.title == null || $scope.pageHeader.title.trim() == '') {
					alert('Please enter page title');
				} else {
					$scope.pageHeaderObject = angular.copy($scope.pageHeader);
					$scope.hideCreateNewPageHeader();
				}
			}
			
			// Function to Remove Page Header.
			$scope.removePageHeader = function() {
				$scope.pageHeaderObject = {};
			}
			
			// Page Header Function Ends
			
			// Create Model Function Starts
			// Reset Selected fields value on Object Value Change.
			$scope.$watch('fields',function() {$scope.resetFieldSelection();});
			
			// Function to Show Create new Model Popup
			$scope.showCreateNewModel = function() {
				$scope.isShowCreateNewModel = true;
			}
			
			// Function to hide Create Model Popup
			$scope.hideCreateNewModel = function() {
				$scope.fields = $scope.objectList[0];
				$scope.modelName = '';
				$scope.isShowCreateNewModel = false;
			}
			
			// to Create Model.
			$scope.addModel = function() { // Required Field Validation Check to Create Model.
				if($scope.fields != null && $scope.fields.objectAPIName != null && $scope.fields.objectAPIName != '--Select--') {
					if($scope.checkedItems() != null && $scope.checkedItems().length > 0) {
						if($scope.modelName != null && $scope.modelName.trim() != '') {
							var isCreatedNew = true;
							for(i=0; i<$scope.selectedModelList.length; i++) {
								if($scope.modelName.trim().toUpperCase() == $scope.selectedModelList[i].modelName.trim().toUpperCase()) {
									isCreatedNew = false; // Duplicate Model Name.
									break;
								}
							} // If Model Name is not used on page
							if(isCreatedNew) {
								var tempObject = new Object();
								tempObject.modelName = $scope.modelName;
								tempObject.objectName = $scope.fields.objectName;
								tempObject.objectAPIName = $scope.fields.objectAPIName;
								tempObject.field = $scope.checkedItems();
								for(x=0; x<tempObject.field.length; x++) {
									tempObject.field[x].modelName = tempObject.modelName;
								}
								$scope.selectedModelList.push(tempObject);
								/*for(var i=0; i<$scope.objectList.length; i++) {
									if($scope.fields.objectAPIName == $scope.objectList[i].objectAPIName) {
										$scope.objectList.splice(i,1);
									}
								}*/
								$timeout(function() {
									createPortalPageService.connectSectionFieldWithModel({scope: $scope});								
								});
								$scope.hideCreateNewModel();
							} else {
								alert('Model name already in use. Please enter different model name.');
							}
						} else {
							alert('Model name can not be left blank.');
						}
					} else {
						alert('Please select atleast one field.');
					}
				} else {
					alert('Please select object.');
				}
			}
			
			// Get Selected fields value of Object.
			$scope.checkedItems = function() {
		        var checkedItems = [];
		        angular.forEach($scope.fields.fieldList, function(appObj, arrayIndex){
		            angular.forEach(appObj, function(cb, key) {
		            	if(key == "isChecked" && cb) {
		                	checkedItems.push(appObj);
	                	}
		            });
		        });
		        return checkedItems;
		    }
		    
		    // Method to Reset Field Selection on Object Value Change
		    $scope.resetFieldSelection = function() {
		        angular.forEach($scope.fields.fieldList, function(appObj, arrayIndex){
		            angular.forEach(appObj, function(cb, key) {
		            	if(key == "isChecked" && cb) {
		                	appObj.isChecked = false;;
	                	}
		            });
		        });
		    }
		    
		    // Model Function Ends
		    
		    // Section Function Starts
		    
		    // Method to Show Create New Section Popup.
		    $scope.showCreateNewSection = function() {
				$scope.isShowCreateNewSection = true;
			}
			
			// Method to Hide Create New Section Popup
			$scope.hideCreateNewSection = function() {
				$scope.section = {};
				$scope.isShowCreateNewSection = false;
			}
			
			// Method to Update Section
			$scope.updateSectionDetail = function(sectionId) {
				$scope.section = angular.copy($scope.sectionMap[sectionId]);
				$scope.showCreateNewSection();
			}
			
			// Method to Remove Section from JSON.
			$scope.removeSection = function(sectionId) {
				angular.forEach($scope.sectionMap[sectionId].field, function(sectionValue){
					angular.forEach($scope.selectedModelList, function(modelValue) {
						if(sectionValue.modelName == modelValue.modelName) {
							var tempObj = sectionValue;
							delete tempObj.label;
							if(tempObj.fieldDisplayType.toUpperCase() == 'REFERENCE') {
								delete tempObj.isFirstValueBlank;
								delete tempObj.isControllingField;
								delete tempObj.isdependentField;
								delete tempObj.lookupRecordCriteria;
								delete tempObj.dependentField;
								delete tempObj.criteriaField;
							} else if(tempObj.fieldDisplayType.toUpperCase() == 'PICKLIST') {
								delete tempObj.isFirstValueBlank;
								delete tempObj.isControllingField;
								delete tempObj.isdependentField;
								delete tempObj.dependentField;
							}
							delete tempObj.type;
							delete tempObj.placeholderText;
							delete tempObj.hoverText;
							delete tempObj.instructionText;
							delete tempObj.instructionTextPosition;
							delete tempObj.required;
							delete tempObj.rendered;
							delete tempObj.isBlank;
							modelValue.field.push(tempObj);
						}
					});
				});
				var index = $scope.sectionOrderList.indexOf(sectionId);
				if(index > -1) {
					$scope.sectionOrderList.splice(index, 1);
				}
				delete $scope.sectionMap[sectionId];
				$scope.onLoadFunction();
			}
			
			// Method to Create Section.
			$scope.createSection = function() {
				if(undefined != $scope.section.title && $scope.section.title != '' && undefined != $scope.section.sectionLayout && $scope.section.sectionLayout != '' 
				&& undefined != $scope.section.sectionCollapsible && $scope.section.sectionCollapsible != '' && undefined != $scope.section.isAddAnother) {
					if($scope.section.isAddAnother && (undefined == $scope.section.removeButtonlabel || $scope.section.removeButtonlabel == '')) {
						alert('Please fill remove button label.');
						return false;
					} else if($scope.section.isAddAnother && (undefined == $scope.section.addAnotherButtonLabel || $scope.section.addAnotherButtonLabel == '')) {
						alert('Please add another button label.');
						return false;
					}
					if(undefined == $scope.section.sectionOrder || $scope.section.sectionOrder == null) {
						$scope.section.sectionOrder = $scope.sectionOrderList.length > 0 ? (Math.max.apply(Math,$scope.sectionOrderList) + 1) : 1;
						$scope.section.field = [];
						$scope.section.className = 'glyphicon glyphicon-minus';
						$scope.section.innerDivClass = 'inner-wrapper show';
						$scope.sectionOrderList.push($scope.section.sectionOrder);
					}
					$scope.sectionMap[$scope.section.sectionOrder] = $scope.section;
					$scope.hideCreateNewSection();
					createPortalPageService.connectSectionsDynamically({scope: $scope});
					$timeout(function() {
						createPortalPageService.connectSectionFieldWithModel({scope: $scope});
					});
				} else if(undefined == $scope.section.title || $scope.section.title == '') {
					alert('Please enter section name.');
				} else if(undefined == $scope.section.sectionLayout || $scope.section.sectionLayout == '') {
					alert('Please select layout.');
				} else if(undefined == $scope.section.sectionCollapsible || $scope.section.sectionCollapsible == '') {
					alert('Please select collapsible.');
				} else if (undefined == $scope.section.isAddAnother) {
					alert('Please select is add another.');
				}
			}
			
			// To toggle Section. 
			$scope.hideShowSection = function(sectionIdVal){
				if($scope.sectionMap[sectionIdVal].className == 'glyphicon glyphicon-plus') {
					$scope.sectionMap[sectionIdVal].className = 'glyphicon glyphicon-minus';
					$scope.sectionMap[sectionIdVal].innerDivClass = 'inner-wrapper show';
				} else {
					$scope.sectionMap[sectionIdVal].className = 'glyphicon glyphicon-plus';
					$scope.sectionMap[sectionIdVal].innerDivClass = 'inner-wrapper hide';
				}
	    		/* if($('#'+sectionIdVal+' p').hasClass("glyphicon-minus")){
		       		$('#'+sectionIdVal+' p').removeClass("glyphicon-minus");
		       		$('#'+sectionIdVal+' p').addClass("glyphicon-plus");
		       		$('#'+sectionIdVal+' div.inner-wrapper').hide();
		       		$('#'+sectionIdVal+' p').attr('title','Expand');
		   		}else{
		         	$('#'+sectionIdVal+' p').addClass("glyphicon-minus");
		         	$('#'+sectionIdVal+' p').removeClass("glyphicon-plus");
		         	$('#'+sectionIdVal+' div.inner-wrapper').show();
		         	$('#'+sectionIdVal+' p').attr('title','Collapse');
	     		} */
  			}
  			
  			// Save all Data to the DataBase.
  			$scope.saveAllData = function() {
  				$('#loadingImageDiv').addClass('show');
  				var sectionList = []
  				angular.forEach($scope.sectionOrderList, function(value, index) {
  					var oneSectionData = angular.copy($scope.sectionMap[value]);
  					if(oneSectionData != null && undefined != oneSectionData.field && oneSectionData.field.length > 0) {
  						var section = new Object();
  						section.jsonData = oneSectionData;
  						section.jsonData.sectionOrder = index + 1;
  						section.modelDataList = $scope.getSectionModelData(oneSectionData);
  						if(section.modelDataList.length == 1) {
	  						section.jsonData.modelName = section.modelDataList[0].modelName;
	  						section.jsonData.modelType = "SECTIONMODEL";
	  					} else {
	  						section.jsonData.modelName = '';
	  						section.jsonData.modelType = "FIELDMODEL";
	  					}
	  					sectionList.push(section);
  					}
  				});
  				var pageHeaderJsonString = $scope.pageHeaderObject;
  				Visualforce.remoting.Manager.invokeAction(
	            	'{!$RemoteAction.NewEditPortalPageController.saveData}', 
	            	JSON.stringify(sectionList), 
	            	JSON.stringify(pageHeaderJsonString),
	            	'{!pageId}',
	            	function(result, event){
	            		alert(result);
	            		$('#loadingImageDiv').removeClass('show');
            			$('#loadingImageDiv').addClass('hide');
	            	}, 
                   	{escape: true}
				);
  			}
  			
  			// Method to Create Section Model Data.
  			$scope.getSectionModelData = function(sectionObject) {
  				var modelDataList = [];
  				var sectionModelMap = new Object();
  				for(x=0; x<sectionObject.field.length; x++) {
  					if(undefined != sectionModelMap[sectionObject.field[x].modelName] && sectionModelMap[sectionObject.field[x].modelName] != null) {
  						sectionModelMap[sectionObject.field[x].modelName].field.push(sectionObject.field[x]); // Adding fields from Sections 					
  					} else if(sectionObject.field[x].fieldDisplayType.toUpperCase() != 'UPLOAD'){
  						sectionModelMap[sectionObject.field[x].modelName] = new Object();
  						sectionModelMap[sectionObject.field[x].modelName].modelName = sectionObject.field[x].modelName;
  						for(i=0; i<$scope.selectedModelList.length; i++) {
  							if($scope.selectedModelList[i].modelName == sectionObject.field[x].modelName) {
  								sectionModelMap[sectionObject.field[x].modelName].objectName = angular.copy($scope.selectedModelList[i].objectName);
  								sectionModelMap[sectionObject.field[x].modelName].objectAPIName = angular.copy($scope.selectedModelList[i].objectAPIName);
  								sectionModelMap[sectionObject.field[x].modelName].field = angular.copy($scope.selectedModelList[i].field);
  								// Adding Fields from Ohter Section in Model.
  								angular.forEach($scope.sectionMap, function(value, key){
  									if(value.sectionOrder != sectionObject.sectionOrder) {
  										angular.forEach(value.field, function(value) {
  											if(sectionObject.field[x].modelName == value.modelName) {
  												sectionModelMap[sectionObject.field[x].modelName].field.push(angular.copy(value));
  											}
  										});
  									}
  								});
  								// Adding Fields from Model Fields.
  								sectionModelMap[sectionObject.field[x].modelName].field.push(sectionObject.field[x]);
  								break;
  							}
  						}
  					} else if(sectionObject.field[x].fieldDisplayType.toUpperCase() == 'UPLOAD' && sectionObject.field[x].parentIdSource.toUpperCase() == 'MODEL' && (undefined == sectionModelMap[sectionObject.field[x].parentId] || sectionModelMap[sectionObject.field[x].parentId] == null)) {
  						sectionModelMap[sectionObject.field[x].parentId] = new Object();
  						sectionModelMap[sectionObject.field[x].parentId].modelName = sectionObject.field[x].parentId;
  						for(i=0; i<$scope.selectedModelList.length; i++) {
  							if($scope.selectedModelList[i].modelName == sectionObject.field[x].parentId) {
  								sectionModelMap[sectionObject.field[x].parentId].objectName = angular.copy($scope.selectedModelList[i].objectName);
  								sectionModelMap[sectionObject.field[x].parentId].objectAPIName = angular.copy($scope.selectedModelList[i].objectAPIName);
  								sectionModelMap[sectionObject.field[x].parentId].field = angular.copy($scope.selectedModelList[i].field);
  								// Adding Fields from Other Section in Model.
  								angular.forEach($scope.sectionMap, function(value, key){
  									if(value.sectionOrder != sectionObject.sectionOrder) {
  										angular.forEach(value.field, function(value) {
  											if(sectionObject.field[x].parentId == value.modelName) {
  												sectionModelMap[sectionObject.field[x].parentId].field.push(angular.copy(value));
  											}
  										});
  									}
  								});
  								// Adding Fields from Model Fields.
  								//sectionModelMap[sectionObject.field[x].parentId].field.push(sectionObject.field[x]);
  								break;
  							}
  						}
  					}
  				}
  				// Adding the Model that are used in Lookup Record Criteria Condition.
  				for(x=0; x<sectionObject.field.length; x++) {
  					if(undefined != sectionObject.field[x].lookupRecordCriteria && sectionObject.field[x].lookupRecordCriteria != null){
  						for(y=0; y<sectionObject.field[x].lookupRecordCriteria.length; y++) {
  							if(sectionObject.field[x].lookupRecordCriteria[y].valueType.toUpperCase() == 'MODEL') {
  								if(undefined == sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName] || sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName] == '') {
  									sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName] = new Object();
									sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName].modelName = sectionObject.field[x].lookupRecordCriteria[y].modelName;
  									angular.forEach($scope.selectedModelList, function(sectionObj) {
  										if(sectionObj.modelName.toUpperCase() == sectionObject.field[x].lookupRecordCriteria[y].modelName.toUpperCase()) {
  											sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName].objectName = angular.copy(sectionObj.objectName);
  											sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName].objectAPIName = angular.copy(sectionObj.objectAPIName);
  											sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName].field = angular.copy(sectionObj.field);
  										}
  									})
  								}
  							}
  						}
  					}
  				}
  				console.log(sectionModelMap);
  				// Creating Model List from Map.
  				angular.forEach(sectionModelMap, function(value, key){
  					modelDataList.push(value);
  				});
  				
  				return modelDataList; // Return Data Model List.
  			}
  			
  			// Function to Configure Drap & Drop on OnLoad Page.
  			$scope.onLoadFunction = function() {
  				createPortalPageService.connectSectionsDynamically({scope: $scope});
  				createPortalPageService.connectSectionFieldWithModel({scope: $scope});
  			}
  			
  			// Method to hide Field Configure Popup  
  			$scope.hideUpdateFieldInfo = function() {
  				$scope.selectedField = {};
  				$scope.isShowUpdateField = false;
  			}
  			
  			// Method to show Field Configure Popup  
  			$scope.showUpdateFieldInfo = function(sectionKey, fieldIndex, selField, isInsert) {
  				mapKeyToUpdateFieldInfo = sectionKey;
  				fieldIndexToUpdateInfo = fieldIndex;
  				$scope.selectedField = angular.copy(selField);
  				$scope.lookupRecordCriteriaList = null;
  				$scope.renderCriteriaList = null;
  				$scope.renderCriterialFields = [];
  				if(!$scope.selectedField.rendered) {
  					$scope.getRenderCriterialFields();
  					$scope.renderCriteriaList = $scope.selectedField.renderedCriteriaList;
  					$scope.addMoreRenderedCondition();
  				}
  				if($scope.selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE') {
  					$scope.getCriteriaFieldsForSelected();
  					$scope.getLookupRecordCriteriaModelValues();
  					$scope.lookupRecordCriteriaList = $scope.selectedField.lookupRecordCriteria;
	  				$scope.addMoreCondition();
  				}
  				if($scope.selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE' && $scope.selectedField.type.toUpperCase() == 'PICKLIST' && $scope.selectedField.isControllingField) {
  					$scope.referenceFieldList = $scope.getReferenceDependentFieldList('REFERENCE');
  					$scope.getLookupCriteriaFieldName();
  					previousDependentField = $scope.selectedField.dependentField;
  				} else if($scope.selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST' && $scope.selectedField.isControllingField) {
  					$scope.referenceFieldList = $scope.getReferenceDependentFieldList('PICKLIST');
  					previousDependentField = $scope.selectedField.dependentField;
  					previousPicklistDependentField = $scope.selectedField.dependentField;
  					$scope.configurePicklistDependencyMap();
  				}
  				$scope.isInsert = isInsert;
  				if($scope.selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD') {
  					$scope.createUploadSupportedFilesList($scope.selectedField.allowedContentType);
				}
  				$scope.isShowUpdateField = true;
  			}
  			
  			// Method to Update Field Info
  			$scope.addUpdateSelectedField = function(isUpdate) {
  				// Required Field Validation Check
  				var errorString = '';
  				if($scope.selectedField.label.trim() == '') {
  					errorString += 'Field label can not be left blank.\n';
  				}
  				
  				if($scope.selectedField.fieldDisplayType == 'REFERENCE') {
  					if(undefined != $scope.lookupRecordCriteriaList && $scope.lookupRecordCriteriaList != null && $scope.lookupRecordCriteriaList.length != 0) {
 						var isError = false;
 						angular.forEach($scope.lookupRecordCriteriaList, function(condition) {
 							if((condition.fieldAPIName != undefined && condition.fieldAPIName != '') && 
 								(condition.fieldOperator == undefined || condition.fieldOperator == '' || condition.valueType == undefined || condition.valueType == '' || condition.value == undefined || condition.value == '')) {
								isError = true;
							}
 						});
 						if(isError) {
 							errorString += 'Lookup record criteria condition is not correct. Please review and correct.\n';
 						}
 					}
  				}
  				// Depenedent Reference Field Validation
  				if($scope.selectedField.fieldDisplayType == 'REFERENCE' && $scope.selectedField.type.toUpperCase() == 'PICKLIST' && $scope.selectedField.isControllingField) {
  					if(undefined == $scope.selectedField.dependentField || $scope.selectedField.dependentField == '') {
  						errorString += 'Dependent Field can not be left blank.\n';
 					}
 					if($scope.selectedField.dependentField != '' && $scope.criteriaFieldList.length == 0) {
 						errorString += 'There is no mapping between dependent and controlling field. You can not create dependent.\n';
 					} else if($scope.selectedField.dependentField != '' && $scope.criteriaFieldList.length != 0 && (undefined == $scope.selectedField.criteriaField || $scope.selectedField.criteriaField == '')) {
 						errorString += 'Criteria field can not be left blank.\n';
 					}
  				}
  				if($scope.selectedField.fieldDisplayType == 'PICKLIST' && $scope.selectedField.isControllingField) {
  					if(undefined == $scope.selectedField.dependentField || $scope.selectedField.dependentField == '') {
  						errorString += 'Dependent Field can not be left blank.\n';
 					}
  				}
  				if($scope.selectedField.fieldDisplayType.toUpperCase() == "UPLOAD") {
  					if($scope.selectedField.allowedContentType.trim() == '') {
  						errorString += 'Please select at least one supported file format.\n';
  					}
  					if($scope.selectedField.parentIdSource == 'Param' && $scope.selectedField.parentId.trim() == '') {
  						errorString += 'Please specify the Url Parameter name.\n';
  					}
  					if($scope.selectedField.parentIdSource == 'Static' && $scope.selectedField.parentId.trim() == '') {
  						errorString += 'Please specify document upload record id.\n';
  					}
 				}
 				
 				if(errorString != '') {
					alert(errorString);
					return; // If Error Message not Blank show Alert and Return.
				}
				// Set is dependent true to the dependent dropdown for Reference Type Field
				if($scope.selectedField.fieldDisplayType == 'REFERENCE' && $scope.selectedField.type.toUpperCase() == 'PICKLIST' && $scope.selectedField.isControllingField) {
					angular.forEach($scope.sectionMap, function(sectionObj, key) {
						angular.forEach(sectionObj.field, function(fieldObj){
							if(fieldObj.modelName == $scope.selectedField.dependentField.split('----')[0] && fieldObj.fieldAPIName == $scope.selectedField.dependentField.split('----')[1]) {
								fieldObj.type = 'PICKLIST';
								if(undefined == fieldObj.isFirstValueBlank) {
									fieldObj.isFirstValueBlank = true;
								}
								if(undefined == fieldObj.isControllingField) {
									fieldObj.isControllingField = false;
								}
								fieldObj.isdependentField = true;
							} else if(undefined != previousDependentField && previousDependentField != '' && fieldObj.modelName == previousDependentField.split('----')[0] && fieldObj.fieldAPIName == previousDependentField.split('----')[1]){
								fieldObj.isdependentField = false;
							}
						});
					});
				} else if ($scope.selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE') { // Setting is Depenedent False when is controlling field is false. 
					if(undefined != $scope.selectedField.dependentField && $scope.selectedField.dependentField != '') {
						angular.forEach($scope.sectionMap, function(sectionObj, key) {
							angular.forEach(sectionObj.field, function(fieldObj){
								if(fieldObj.modelName == $scope.selectedField.dependentField.split('----')[0] && fieldObj.fieldAPIName == $scope.selectedField.dependentField.split('----')[1]) {
									fieldObj.isdependentField = false;
								}
							});
						});
						$scope.selectedField.dependentField = '';
						$scope.selectedField.criteriaField = '';
					}
				}
				// Set is dependent true to the dependent dropdown for Picklist type
				if($scope.selectedField.fieldDisplayType == 'PICKLIST' && $scope.selectedField.isControllingField) {
					angular.forEach($scope.sectionMap, function(sectionObj, key) {
						angular.forEach(sectionObj.field, function(fieldObj){
							if(fieldObj.modelName == $scope.selectedField.dependentField.split('----')[0] && fieldObj.fieldAPIName == $scope.selectedField.dependentField.split('----')[1]) {
								fieldObj.isdependentField = true;
							} else if(undefined != previousDependentField && previousDependentField != '' && fieldObj.modelName == previousDependentField.split('----')[0] && fieldObj.fieldAPIName == previousDependentField.split('----')[1]){
								fieldObj.isdependentField = false;
							}
						});
					});
				} else if ($scope.selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST') { // Setting is Depenedent False when is controlling field is Reset for Picklist Type Field. 
					if(undefined != $scope.selectedField.dependentField && $scope.selectedField.dependentField != '') {
						angular.forEach($scope.sectionMap, function(sectionObj, key) {
							angular.forEach(sectionObj.field, function(fieldObj){
								if(fieldObj.modelName == $scope.selectedField.dependentField.split('----')[0] && fieldObj.fieldAPIName == $scope.selectedField.dependentField.split('----')[1]) {
									fieldObj.isdependentField = false;
								}
							});
						});
						$scope.selectedField.dependentField = '';
						$scope.selectedField.picklistDependencyMap = '';
					}
				}
				
				// Applying lookup records Criteria Condition.
				if(undefined != $scope.lookupRecordCriteriaList && $scope.lookupRecordCriteriaList != null) {
					$scope.selectedField.lookupRecordCriteria = [];
					angular.forEach($scope.lookupRecordCriteriaList, function(condition) {
						if(condition.fieldAPIName != undefined && condition.fieldOperator != undefined && condition.valueType != undefined && condition.value != undefined 
							&& condition.fieldAPIName != '' && condition.fieldOperator != '' && condition.valueType != '' && condition.value != '') {
							angular.forEach($scope.lookupRecordCriteriaFieldList, function(fieldValue){
								if(fieldValue.fieldAPIName == condition.fieldAPIName) {
									condition.fieldDisplayType = fieldValue.fieldDisplayType;
								}
							});
							$scope.selectedField.lookupRecordCriteria.push(condition);	
						}
					});
				} else {
					$scope.selectedField.lookupRecordCriteria = [];
				}
				
				// Applying Rendered Criteria Condition.
				if(undefined != $scope.renderCriteriaList && $scope.renderCriteriaList != null) {
					$scope.selectedField.renderedCriteriaList = [];
					angular.forEach($scope.renderCriteriaList, function(condition) {
						if(condition.fieldAPIName != undefined && condition.fieldOperator != undefined && condition.value != undefined 
							&& condition.fieldAPIName != '' && condition.fieldOperator != '' && condition.value != '') {
							angular.forEach($scope.renderCriterialFields, function(fieldValue){
								if(fieldValue.fieldAPIName == condition.fieldAPIName) {
									condition.fieldDisplayType = fieldValue.fieldDisplayType;
								}
							});
							$scope.selectedField.renderedCriteriaList.push(condition);	
						}
					});
				} else {
					$scope.selectedField.renderedCriteriaList = [];
				}
				
				if($scope.selectedField.renderedCriteriaList.length == 0) {
					$scope.selectedField.rendered = true;
				}
				// Updating Field in List.
  				var selectedFieldCopy = angular.copy($scope.selectedField);
  				if($filter('htmlToPlaintext')(selectedFieldCopy.instructionText) == '') {
  					selectedFieldCopy.instructionText = '';
  					selectedFieldCopy.instructionTextPosition = '';
  				}
  				
  				// Updating Section Field Map
  				if(isUpdate) {
  					$scope.sectionMap[mapKeyToUpdateFieldInfo].field[fieldIndexToUpdateInfo] = angular.copy(selectedFieldCopy);
 				} else {
 					// Insering new Field in Section Map. 
					$scope.sectionMap[mapKeyToUpdateFieldInfo].field.splice(fieldIndexToUpdateInfo, 0, angular.copy($scope.selectedField));
 				}
  				$scope.hideUpdateFieldInfo();
  				$timeout(function() {
	  				$scope.onLoadFunction();
				});
  			}
  			
  			// Update Instruction Position Value on Change of Instruction Text.
  			$scope.updateInstructionPosition = function() {
  				var tempInstruction = $filter('htmlToPlaintext')($scope.selectedField.instructionText);
  				if(tempInstruction != '' && (undefined == $scope.selectedField.instructionTextPosition || $scope.selectedField.instructionTextPosition == null || $scope.selectedField.instructionTextPosition == '')) {
  					$scope.selectedField.instructionTextPosition = 'Above Field'.toUpperCase();
  				}
  			}
  			
  			// Method to Update Allowed Content Type 
			$scope.updateAllowContentType = function() {
				var checkedItems = [];
		        angular.forEach($scope.uploadSupportedFilesList, function(appObj, arrayIndex){
		            angular.forEach(appObj, function(cb, key) {
		            	if(key == "isChecked" && cb) {
		                	checkedItems.push(appObj.value.toLowerCase());
	                	}
		            });
		        });
		        $scope.selectedField.allowedContentType = (checkedItems.join(','));
			}
			
			// Function to Create Upload Supported Files List
			$scope.createUploadSupportedFilesList = function(selectedValuesString) {
				$scope.uploadSupportedFilesList = [];
				var selectedValuesList = selectedValuesString.toUpperCase().split(',');
				angular.forEach({!uploadSupportedFilesListString}, function(value) {
					if(selectedValuesList.indexOf(value.toUpperCase()) > -1) {
						$scope.uploadSupportedFilesList.push({'value':value, 'isChecked':true});
					} else {
						$scope.uploadSupportedFilesList.push({'value':value, 'isChecked':false});
					}
				});
			}
			
			// Method to Update Parent ID Value on Change of Source Value
			$scope.updateParentIdSource = function() {
				if($scope.selectedField.parentIdSource.toUpperCase() == 'MODEL') {
					$scope.selectedField.parentId = $scope.selectedModelList[0].modelName;
				} else {
					$scope.selectedField.parentId = '';
				}
			}
			
			// Method to Update Controlling field Values
			$scope.updateControllingFieldValue = function() {
				$scope.selectedField.isFirstValueBlank = null;
				$scope.selectedField.isControllingField = null;
				$scope.selectedField.isdependentField = null;
				if($scope.selectedField.type.toUpperCase() == 'PICKLIST') {
					$scope.selectedField.isFirstValueBlank = true;
					$scope.selectedField.isControllingField = false;
					$scope.selectedField.isdependentField = false;
				}
			}
			
			// Method to Update Controlling Fields Values
			$scope.updateControllingFields = function() {
				if($scope.selectedField.isControllingField && $scope.selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE') {
					$scope.referenceFieldList = $scope.getReferenceDependentFieldList('REFERENCE');
					//$scope.selectedField.dependentField = '';
				} else if($scope.selectedField.isControllingField && $scope.selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST') {
					$scope.referenceFieldList = $scope.getReferenceDependentFieldList('PICKLIST');
					//$scope.selectedField.dependentField = '';
				} else {
				}
			}
			
			// Method Returns Dependent Field List.
			$scope.getReferenceDependentFieldList = function(type) {
				var referenceDependentFieldList = [];
				angular.forEach($scope.sectionMap, function(sectionObject, key) {
					angular.forEach(sectionObject.field, function(fieldObject, index) {
						if(fieldObject.fieldDisplayType.toUpperCase() == type && !(fieldObject.modelName == $scope.selectedField.modelName && fieldObject.fieldAPIName == $scope.selectedField.fieldAPIName) &&!($scope.isDependentRelated(fieldObject.dependentField)) &&
							((undefined != $scope.selectedField.dependentField && $scope.selectedField.dependentField != '' && fieldObject.modelName == $scope.selectedField.dependentField.split('----')[0] && fieldObject.fieldAPIName == $scope.selectedField.dependentField.split('----')[1]) || (!fieldObject.isdependentField))) {
							referenceDependentFieldList.push(fieldObject);
						}
					});
				});
				
				return referenceDependentFieldList;
			}
			
			// Returns Field is dependent or not.
			$scope.isDependentRelated = function(fieldAPIName) {
				if(undefined == fieldAPIName || fieldAPIName == '') {
					return false;
				} else {
					if(fieldAPIName.split('----')[1] == $scope.selectedField.fieldAPIName) {
						return true;
					} else {
						var tmpField;
						angular.forEach($scope.sectionMap, function(sectionObject, key) {
							angular.forEach(sectionObject.field, function(fieldObject) {
								if(fieldObject.modelName == fieldAPIName.split('----')[0] && fieldObject.fieldAPIName == fieldAPIName.split('----')[1]) {
									tmpField = fieldObject;
								}
							});
						});
						return $scope.isDependentRelated(tmpField.dependentField);
					}
				}
			}
			
			// Method to Remove Fields from Section.
			$scope.removeFieldsFromSection = function(sectionId, fieldIndex) {
				if($scope.sectionMap[sectionId].field[fieldIndex].type.toUpperCase() != "UPLOAD") {
					if($scope.sectionMap[sectionId].field[fieldIndex].isdependentField || $scope.sectionMap[sectionId].field[fieldIndex].isControllingField) {
						alert('You can not remove this field from section.');
						return;
					}
					angular.forEach($scope.selectedModelList, function(value) {
						if(value.modelName == $scope.sectionMap[sectionId].field[fieldIndex].modelName) {
							var tempObj = $scope.sectionMap[sectionId].field[fieldIndex];
							delete tempObj.label;
							if(tempObj.fieldDisplayType.toUpperCase() == 'REFERENCE') {
								delete tempObj.isFirstValueBlank;
								delete tempObj.isControllingField;
								delete tempObj.isdependentField;
								delete tempObj.lookupRecordCriteria;
								delete tempObj.dependentField;
								delete tempObj.criteriaField;
							} else if(tempObj.fieldDisplayType.toUpperCase() == 'PICKLIST') {
								delete tempObj.isFirstValueBlank;
								delete tempObj.isControllingField;
								delete tempObj.isdependentField;
								delete tempObj.dependentField;
							}
							delete tempObj.type;
							delete tempObj.placeholderText;
							delete tempObj.hoverText;
							delete tempObj.instructionText;
							delete tempObj.instructionTextPosition;
							delete tempObj.required;
							delete tempObj.rendered;
							delete tempObj.isBlank;
							value.field.push(tempObj);
						}
					});
				}
				$scope.sectionMap[sectionId].field.splice(fieldIndex, 1);
				$timeout(function() {
	  				$scope.onLoadFunction();
				});
			}
			
			// Method to get Lookup Criteria Field API Name
			$scope.getLookupCriteriaFieldName = function() {
				if(undefined != $scope.selectedField.dependentField && $scope.selectedField.dependentField != '') {
					$('#loadingImageDiv').addClass('show');
					var dependentObjectName;
					var controllingObjectName;
					angular.forEach($scope.selectedModelList, function(selectedModel) {
						if(selectedModel.modelName == $scope.selectedField.dependentField.split('----')[0]) {
							dependentObjectName = selectedModel.objectAPIName;
						}
						if(selectedModel.modelName == $scope.selectedField.modelName) {
							controllingObjectName = selectedModel.objectAPIName;
						}
					});
					Visualforce.remoting.Manager.invokeAction(
            			'{!$RemoteAction.NewEditPortalPageController.getLookupCriteriaFieldName}',
            			dependentObjectName,
            			controllingObjectName,
            			$scope.selectedField.dependentField.split('----')[1],
            			$scope.selectedField.fieldAPIName,
            			function(result, event){
	            			if (event.status) {
	            				$scope.$apply(function() {
	            					$scope.criteriaFieldList = result;
	            				});
	            			} else if (event.type === 'exception') {
		            			alert('Some thing went wrong. Please try after some time.')
		            		}
	            			$('#loadingImageDiv').removeClass('show');
	            			$('#loadingImageDiv').addClass('hide');
		            	}, 
	                   	{escape: true}
					);
				}
			}
			
			// Method to get Lookup Criteria Fields
			$scope.getCriteriaFieldsForSelected = function() {
				$('#loadingImageDiv').addClass('show');
				var controllingObjectName;
				angular.forEach($scope.selectedModelList, function(selectedModel) {
					if(selectedModel.modelName == $scope.selectedField.modelName) {
						controllingObjectName = selectedModel.objectAPIName;
					}
				});
				Visualforce.remoting.Manager.invokeAction(
           			'{!$RemoteAction.NewEditPortalPageController.getCriteriaFieldsForSelected}',
           			controllingObjectName,
           			$scope.selectedField.fieldAPIName,
           			function(result, event){
            			if (event.status) {
            				$scope.$apply(function() {
            					$scope.lookupRecordCriteriaFieldList = result;
            				});
            			} else if (event.type === 'exception') {
	            			alert('Some thing went wrong. Please try after some time.')
	            		}
            			$('#loadingImageDiv').removeClass('show');
            			$('#loadingImageDiv').addClass('hide');
	            	}, 
                   	{escape: true}
				);
			}
			
			// Method to Add More Conditions
			$scope.addMoreCondition = function() {
				var foundLocations = [];
				angular.forEach($scope.lookupRecordCriteriaList, function(criteriaObj, index) {
					if(criteriaObj.fieldAPIName == '') {
						foundLocations.push(index-foundLocations.length);
					}
				});
				angular.forEach(foundLocations, function(location) {
					$scope.lookupRecordCriteriaList.splice(location, 1);
				});
				var temp = {};
				temp.fieldAPIName = '';
				$scope.lookupRecordCriteriaList.push(temp);
			}
			
			// Method to Add More Rendered Conditions
			$scope.addMoreRenderedCondition = function() {
				var foundLocations = [];
				angular.forEach($scope.renderCriteriaList, function(criteriaObj, index) {
					if(criteriaObj.modelName == '') {
						foundLocations.push(index-foundLocations.length);
					}
				});
				angular.forEach(foundLocations, function(location) {
					$scope.renderCriteriaList.splice(location, 1);
				});
				var temp = {};
				temp.modelName = '';
				temp.fieldAPIName = '';
				$scope.renderCriteriaList.push(temp);
			}
			
			// Method Set lookup Record Criteria Model Values.
			$scope.getLookupRecordCriteriaModelValues = function() {
				$scope.lookupRecordCriteriaModelValues = $scope.getSectionAndModelFields(false, false, true);
			}
			
			// Method to Remove Conditions
			$scope.removeCondition = function(index) {
				$scope.lookupRecordCriteriaList.splice(index, 1);
			}
			
			// Method to Remove Render Condition
			$scope.removeRenderedCondition = function(index) {
				$scope.renderCriteriaList.splice(index, 1);
			}
			
			// To Show Configure Drop Down Model
			$scope.showConfigureDependentDropdown = function() {
				$scope.isShowUpdateField = false;
	            $scope.configureDependentDropdown = true;
	            $scope.selectedValue = {};
			}
			
			// Configure Dependent Picklist Map.
			$scope.configurePicklistDependencyMap = function() {
				$scope.dropdownDependentMap = {};
				var selectedList = (undefined != $scope.selectedField.picklistDependencyMap && $scope.selectedField.picklistDependencyMap != null && $scope.selectedField.picklistDependencyMap != '') ? $scope.selectedField.picklistDependencyMap.split(';') : [];
				var dependentMap = {};
				for(x=0; x<selectedList.length; x++) {
					dependentMap[selectedList[x].split('-$#-')[0]] = (undefined != selectedList[x].split('-$#-')[1] && selectedList[x].split('-$#-')[1] != null) ? selectedList[x].split('-$#-')[1] : '';
				}
				if(undefined != $scope.selectedField.dependentField && $scope.selectedField.dependentField != '') {
					$('#loadingImageDiv').addClass('show');
					var dependentObjectName;
					var controllingObjectName;
					angular.forEach($scope.selectedModelList, function(selectedModel) {
						if(selectedModel.modelName == $scope.selectedField.dependentField.split('----')[0]) {
							dependentObjectName = selectedModel.objectAPIName;
						}
						if(selectedModel.modelName == $scope.selectedField.modelName) {
							controllingObjectName = selectedModel.objectAPIName;
						}
					});
					Visualforce.remoting.Manager.invokeAction(
	           			'{!$RemoteAction.NewEditPortalPageController.getDependencyMapWrapper}', // Remote Call to Get Dependency Map.
	           			dependentObjectName,
	           			controllingObjectName,
	           			$scope.selectedField.dependentField.split('----')[1],
	           			$scope.selectedField.fieldAPIName,
	           			function(result, event){
	            			if (event.status) {
	            				angular.forEach(result, function(valueList, key) {
	            					angular.forEach(valueList, function(element) {
	            						if(dependentMap[key] != undefined && dependentMap[key] != null) {
	            							if(dependentMap[key].indexOf(element.value) > -1) {
	            								element.isChecked = true;
	            							}
	            						}
	            					})
	            				});
	            				console.log(result);
	            				$scope.$apply(function() {
	            					$scope.dropdownDependentMap = result;
	            					$scope.updatePicklistDependencyMap(false);
	            					//$scope.isShowUpdateField = false;
	            					//$scope.configureDependentDropdown = true;
	            				});
	            			} else if (event.type === 'exception') {
		            			alert('Some thing went wrong. Please try after some time.')
		            		}
	            			$('#loadingImageDiv').removeClass('show');
	            			$('#loadingImageDiv').addClass('hide');
		            	}, 
	                   	{escape: true}
					);
				} else {
					alert('Please select dependent field.')
				}				
			}
			
			// To hide Configure Dendepenent Map Model
			$scope.hideConfigureDependentDropdown = function() {
    			$scope.configureDependentDropdown = false;
    			$scope.isShowUpdateField = true;
			}
			
			// Previous Dependent Picklist Field to show Alert.
			var previousPicklistDependentField = '';
			
			// Method to Create a Map String 
			$scope.updatePicklistDependencyMap = function(isSavePrevious) {
				var tempStr = '';
				angular.forEach($scope.dropdownDependentMap, function(dependentObjList, dependentKey) {
					tempStr += dependentKey + '-$#-' + $scope.getDelimiterSperatedString(dependentObjList, '#$#$') + ';';
				});
				if(tempStr.length > 0) {
					tempStr = tempStr.substring(0, tempStr.length-1);
				}
				$scope.selectedField.picklistDependencyMap = tempStr;
				if(isSavePrevious) {
					previousPicklistDependentField = $scope.selectedField.dependentField;
					$scope.hideConfigureDependentDropdown();
				}
				//$scope.hideConfigureDependentDropdown();
			}
			
			// Return a String with Delimiter Seperated.
			$scope.getDelimiterSperatedString = function(objList, delimiter) {
				var tempList = [];
				angular.forEach(objList, function(obj) {
					if(obj.isChecked) {
						tempList.push(obj.value);
					}
				});
				return tempList.join(delimiter);
			}
			
			// Show a Alert to User While Changing Value.
			$scope.showAlertToUser = function() {
				if($scope.selectedField.dependentField != undefined && $scope.selectedField.dependentField != '') {
					if(previousPicklistDependentField != '' && previousPicklistDependentField != $scope.selectedField.dependentField 
						&& undefined != $scope.selectedField.picklistDependencyMap && $scope.selectedField.picklistDependencyMap != '') {
						console.log(previousPicklistDependentField);
						if(confirm("Mapping already defined. Want to reset ?")) {
							$scope.selectedField.picklistDependencyMap = '';
							previousPicklistDependentField = '';
							$scope.configurePicklistDependencyMap();
						} else {
							$scope.selectedField.dependentField = previousPicklistDependentField;
						}
					} else {
						$scope.configurePicklistDependencyMap();
					}
				}
			}
			
			// Method to Update Render Criteria
			$scope.updateConditionCriteria = function() {
				if(!$scope.selectedField.rendered) {
					$scope.getRenderCriterialFields();
					if(undefined == $scope.renderCriteriaList || $scope.renderCriteriaList == null || $scope.renderCriteriaList.length == 0) {
						$scope.renderCriteriaList = [];
						var temp = {};
						temp.modelName = '';
						temp.fieldAPIName = '';
						$scope.renderCriteriaList.push(temp);
					}
				}
			}
			
			// Method Set lookup Record Criteria Model Values.
			$scope.getRenderCriterialFields = function() {
				$scope.renderCriterialFields = $scope.getSectionAndModelFields(true, true, true);
			}
			
			// Method to Get Section Fields
			$scope.getSectionFields = function(isFirstBlank, isSetFieldType, isIncludeReferenceField) {
				var modelFields = [];
				if(isFirstBlank) {
					var temp = {};
					temp.fieldName = '--None--';
					temp.fieldAPIName = '';
					modelFields.push(temp);
				}
				angular.forEach($scope.sectionMap, function(sectionObj, key){
					angular.forEach(sectionObj.field, function(fieldObj){
						if(!(fieldObj.modelName == $scope.selectedField.modelName && fieldObj.fieldAPIName == $scope.selectedField.fieldAPIName) 
							&& fieldObj.fieldDisplayType.toUpperCase() != 'UPLOAD' && (isIncludeReferenceField || (!isIncludeReferenceField && fieldObj.fieldDisplayType.toUpperCase() != 'REFERENCE'))) {
							var temp = {};
							temp.fieldName = fieldObj.fieldName;
							temp.fieldAPIName = fieldObj.fieldAPIName;
							temp.modelName = fieldObj.modelName;
							if(isSetFieldType) {
								temp.fieldDisplayType = fieldObj.fieldDisplayType
							}
							modelFields.push(temp);
						}
					});
				});
				return modelFields;
			}
			
			$scope.getSectionAndModelFields = function(isFirstBlank, isSetFieldType, isIncludeReferenceField) {
				var modelFields = [];
				if(isFirstBlank) {
					var temp = {};
					temp.fieldName = '--None--';
					temp.fieldAPIName = '';
					modelFields.push(temp);
				}
				angular.forEach($scope.sectionMap, function(sectionObj, key){
					angular.forEach(sectionObj.field, function(fieldObj){
						if(!(fieldObj.modelName == $scope.selectedField.modelName && fieldObj.fieldAPIName == $scope.selectedField.fieldAPIName) 
							&& fieldObj.fieldDisplayType.toUpperCase() != 'UPLOAD' && (isIncludeReferenceField || (!isIncludeReferenceField && fieldObj.fieldDisplayType.toUpperCase() != 'REFERENCE'))) {
							var temp = {};
							temp.fieldName = fieldObj.fieldName;
							temp.fieldAPIName = fieldObj.fieldAPIName;
							temp.modelName = fieldObj.modelName;
							if(isSetFieldType) {
								temp.fieldDisplayType = fieldObj.fieldDisplayType
							}
							modelFields.push(temp);
						}
					});
				});
				angular.forEach($scope.selectedModelList, function(modelObject) {
					angular.forEach(modelObject.field, function(fieldObject) {
						if((isIncludeReferenceField || (!isIncludeReferenceField && fieldObject.fieldDisplayType.toUpperCase() != 'REFERENCE'))) {
							var temp = {};
							temp.fieldName = fieldObject.fieldName;
							temp.fieldAPIName = fieldObject.fieldAPIName;
							temp.modelName = fieldObject.modelName;
							if(isSetFieldType) {
								temp.fieldDisplayType = fieldObject.fieldDisplayType
							}
							modelFields.push(temp);
						}
					});
				});
				return modelFields;
			}
			
  			$timeout(function() {
  				$scope.onLoadFunction();
			});
		});
		
		
		// Angular Service
		createPortalPageApp.factory('createPortalPageService', function($rootScope, $interval, $timeout) {
		var createPortalPageService = {
		
		}
		
		// Method to Connect Sections Dynamically
		createPortalPageService.connectSectionsDynamically = function(options) {
			var scope = (options.scope || $rootScope); 
			$( "#sectionSortable" ).sortable({
				stop:function(event, ui) {
					var secList = [];
					$('#sectionSortable').find('li.section-list').each(function() {
						secList.push($(this).prop('id'));
					});
					scope.$apply(function() {
						scope.sectionOrderList = secList;
					});
					$timeout(function() {
						scope.onLoadFunction();
					});
				}
			});
		}
		
		// Method to Connect Model and Sections Dynamically.
		createPortalPageService.connectSectionFieldWithModel = function(options) {
			var scope = (options.scope || $rootScope);
			var secMap = angular.copy(scope.sectionMap);
			var selectedMoList = angular.copy(scope.selectedModelList);
			var upldDataList = angular.copy(scope.uploadDataList);
			
			var modelListIds = '';
            $('.fieldSortable').each(function(i, item) {
          		modelListIds = modelListIds + '#' + $(this).prop('id') + ',';
            });
            modelListIds = modelListIds.length > 0 ? modelListIds.substring(0,modelListIds.length-1) : modelListIds;
            $('.fieldSortable').sortable({
				connectWith: ".fieldSortable",
				placeholder: "fieldSortable-placeholder",
				start: function(event, ui) {
					//$('.model-list-field-div').addClass('apply-position-static');
				},
				receive: function( event, ui ) {
					// If Move From Model to Section
					if($(ui.sender).prop('id').indexOf('fieldSortable') > -1 && $(this).prop('id').indexOf('fieldSortable') == -1 && $(this).prop('id').indexOf('uploadComponent') == -1) {
						var sectionKey = $(this).parent().parent().parent().parent().prop('id');
						if(secMap[sectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN") {
							var ulIndex = $('#' + sectionKey).find('.inner-wrapper-left').children().index($(this).parent());
							var liIndex = $(this).children().index($(ui.item));
							for(x=0; x<selectedMoList.length; x++) {
								if(selectedMoList[x].modelName == $(ui.item).attr('data-model-type')) {
									for(y=0; y<selectedMoList[x].field.length; y++) {
										if($(ui.item).attr('data-api-name') == selectedMoList[x].field[y].fieldAPIName) {
											selectedMoList[x].field[y].label = selectedMoList[x].field[y].fieldName;
											selectedMoList[x].field[y].type = selectedMoList[x].field[y].fieldDisplayType;
											if(selectedMoList[x].field[y].type.toUpperCase() == 'REFERENCE') {
												selectedMoList[x].field[y].isFirstValueBlank = true;
												selectedMoList[x].field[y].isControllingField = false;
												selectedMoList[x].field[y].isdependentField = false;
												selectedMoList[x].field[y].dependentField = '';
												selectedMoList[x].field[y].criteriaField = '';
												selectedMoList[x].field[y].lookupRecordCriteria = [];
											} else if (selectedMoList[x].field[y].type.toUpperCase() == 'PICKLIST') {
												selectedMoList[x].field[y].isFirstValueBlank = true;
												selectedMoList[x].field[y].isControllingField = false;
												selectedMoList[x].field[y].isdependentField = false;
												selectedMoList[x].field[y].dependentField = '';
											}
											selectedMoList[x].field[y].placeholderText = '';
											selectedMoList[x].field[y].instructionText = '';
											selectedMoList[x].field[y].hoverText = '';
											selectedMoList[x].field[y].instructionTextPosition = '';
											selectedMoList[x].field[y].required = false;
											selectedMoList[x].field[y].rendered = true;
											selectedMoList[x].field[y].isBlank  = false;
											secMap[sectionKey].field.splice((ulIndex+liIndex), 0, selectedMoList[x].field[y]);
											selectedMoList[x].field.splice(y, 1);
											break;
										}
									}
								}
							}
						}
					} // If Move Field from Model to Upload 
					else if($(ui.sender).prop('id').indexOf('fieldSortable') > -1 && $(this).prop('id').indexOf('fieldSortable') == -1 && $(this).prop('id').indexOf('uploadComponent') > -1) {
						alert('You can not placed here.'); // Alert when Upload Move to the Model Part from Section.
						ui.sender.sortable("cancel"); // Cancel Sortable Action.
					}
					 // If Move Field from Section to Section
					else if($(ui.sender).prop('id').indexOf('fieldSortable') == -1 && $(this).prop('id').indexOf('fieldSortable') == -1 && $(ui.sender).prop('id').indexOf('uploadComponent') == -1 && $(this).prop('id').indexOf('uploadComponent') == -1) {
						var currentSectionKey = $(this).parent().parent().parent().parent().prop('id');
						var previousSectionKey = $(ui.sender).parent().parent().parent().parent().prop('id');
						if(secMap[currentSectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN" && secMap[previousSectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN") {
							if(currentSectionKey == previousSectionKey) { // If Moving Field in Same Section
								var previousIndex = $('#' + currentSectionKey).find('.inner-wrapper-left').children().index($(ui.sender).parent());
								var currentIndex = $('#' + currentSectionKey).find('.inner-wrapper-left').children().index($(this).parent());
								var elementIndex = $(this).children().index($(ui.item));
								if(elementIndex == 0 && previousIndex < currentIndex) {
									currentIndex = currentIndex -1;
								} else if(elementIndex == 1 && previousIndex > currentIndex) {
									currentIndex = currentIndex + 1;
								}
								var tempObject = secMap[currentSectionKey].field[previousIndex];
								secMap[currentSectionKey].field.splice(previousIndex, 1);
								secMap[currentSectionKey].field.splice(currentIndex, 0, tempObject);
							} else { // If Moving Field in Different Section
								var previousIndex = $('#' + previousSectionKey).find('.inner-wrapper-left').children().index($(ui.sender).parent());
								var currentIndex = $('#' + currentSectionKey).find('.inner-wrapper-left').children().index($(this).parent());
								var elementIndex = $(this).children().index($(ui.item));
								var tempObject = secMap[previousSectionKey].field[previousIndex];
								secMap[previousSectionKey].field.splice(previousIndex, 1);
								secMap[currentSectionKey].field.splice((currentIndex+elementIndex), 0, tempObject);
							}
						}
					} // If Move Field From Section to Model 
					else if($(ui.sender).prop('id').indexOf('fieldSortable') == -1 && $(this).prop('id').indexOf('fieldSortable') > -1 && $(ui.sender).prop('id').indexOf('uploadComponent') == -1) {
						if($(ui.item).attr('data-model-type') == $(this).attr('data-model-type')) {
							var modelName = $(this).attr('data-model-type');
							var sectionKey = $(ui.sender).parent().parent().parent().parent().prop('id');
							var currentIndex = $(this).children().index($(ui.item));
							var itemToRemoveIndex = -1;
							if(secMap[sectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN") {
								for(x=0; x<secMap[sectionKey].field.length; x++) {
									if(secMap[sectionKey].field[x].fieldAPIName == $(ui.item).attr('data-api-name') && secMap[sectionKey].field[x].modelName == $(ui.item).attr('data-model-type')) {
										itemToRemoveIndex = x;
										break;
									}
								}
							}
							if(itemToRemoveIndex != -1) {
								for(y=0; y<selectedMoList.length; y++) {
									if(selectedMoList[y].modelName == $(ui.item).attr('data-model-type')) {
										if(secMap[sectionKey].field[itemToRemoveIndex].isControllingField || secMap[sectionKey].field[itemToRemoveIndex].isdependentField) {
											alert('You can not remove this field from section.'); // Alert when Dependent or Controlling field removing from section.
											ui.sender.sortable("cancel");
										} else {
											delete secMap[sectionKey].field[itemToRemoveIndex].label;
											if(secMap[sectionKey].field[itemToRemoveIndex].fieldDisplayType.toUpperCase() == 'REFERENCE') {
												delete secMap[sectionKey].field[itemToRemoveIndex].isFirstValueBlank;
												delete secMap[sectionKey].field[itemToRemoveIndex].isControllingField;
												delete secMap[sectionKey].field[itemToRemoveIndex].isdependentField;
												delete secMap[sectionKey].field[itemToRemoveIndex].lookupRecordCriteria;
												delete secMap[sectionKey].field[itemToRemoveIndex].dependentField;
												delete secMap[sectionKey].field[itemToRemoveIndex].criteriaField;
											} else if (secMap[sectionKey].field[itemToRemoveIndex].fieldDisplayType.toUpperCase() == 'PICKLIST') {
												delete secMap[sectionKey].field[itemToRemoveIndex].isFirstValueBlank;
												delete secMap[sectionKey].field[itemToRemoveIndex].isControllingField;
												delete secMap[sectionKey].field[itemToRemoveIndex].isdependentField;
												delete secMap[sectionKey].field[itemToRemoveIndex].dependentField;
											}
											delete secMap[sectionKey].field[itemToRemoveIndex].type;
											delete secMap[sectionKey].field[itemToRemoveIndex].placeholderText;
											delete secMap[sectionKey].field[itemToRemoveIndex].hoverText;
											delete secMap[sectionKey].field[itemToRemoveIndex].instructionText;
											delete secMap[sectionKey].field[itemToRemoveIndex].instructionTextPosition;
											delete secMap[sectionKey].field[itemToRemoveIndex].required;
											delete secMap[sectionKey].field[itemToRemoveIndex].rendered;
											delete secMap[sectionKey].field[itemToRemoveIndex].isBlank;
											selectedMoList[y].field.splice(currentIndex, 0, secMap[sectionKey].field[itemToRemoveIndex]); // Adding Field Data to Model List.
											secMap[sectionKey].field.splice(itemToRemoveIndex, 1); // Removing Field Data from Section Map.
										}
									}
								}
							}
						} else if($(ui.item).attr('is-upload-type')) {
							alert('You can not placed here.'); // Alert when Upload Move to the Model Part from Section.
							ui.sender.sortable("cancel"); // Cancel Sortable Action.
						} else {
							alert('You can not placed here. Data model is different.'); // Alert when Data Model is Different
							ui.sender.sortable("cancel"); // Cancel Sortable Action.
						}
					} // If Field is Move from One Model to Another Model 
					else if($(ui.sender).prop('id').indexOf('fieldSortable') > -1 && $(this).prop('id').indexOf('fieldSortable') > -1 ) {
						alert('You can not placed here. Data model is different.');
					} // If Upload is added to Section 
					else if($(ui.sender).prop('id').indexOf('uploadComponent') > -1 && $(this).prop('id').indexOf('fieldSortable') == -1) {
						var sectionKey = $(this).parent().parent().parent().parent().prop('id');
						if(secMap[sectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN") {
							var ulIndex = $('#' + sectionKey).find('.inner-wrapper-left').children().index($(this).parent());
							var liIndex = $(this).children().index($(ui.item));
							$(ui.item).remove();
							scope.showUpdateFieldInfo(sectionKey, (ulIndex + liIndex), {hoverText: '', isBlank: false, rendered: true, fieldDisplayType: 'UPLOAD', type: 'UPLOAD', label: 'Upload', placeholderText: '', instructionText: '', instructionTextPosition: '', required: false, parentIdSource: 'MODEL', parentId: scope.selectedModelList[0].modelName, allowedContentType:'', multiple: false, maximumsize:(1*1024*1024)}, true);
						}
					} // If Upload Move to Model Section (Cancel Sortable).  
					else if($(ui.sender).prop('id').indexOf('uploadComponent') > -1 && $(this).prop('id').indexOf('fieldSortable') > -1) {
						alert('You can not drop here.'); // Alert when Data Model is Different
						ui.sender.sortable("cancel");
					} // If Upload Move to Section to Upload List (Cancel Sortable).  
					else if($(this).prop('id').indexOf('uploadComponent') > -1 && $(ui.sender).prop('id').indexOf('fieldSortable') == -1) {
						if($(ui.item).attr('is-upload-type')) {
							var sectionKey = $(ui.sender).parent().parent().parent().parent().prop('id');
							if(secMap[sectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN") {
								var ulIndex = $('#' + sectionKey).find('.inner-wrapper-left').children().index($(ui.sender).parent());
								secMap[sectionKey].field.splice(ulIndex, 1);
							}
						} else {
							alert('You can not placed here.'); // Alert when Upload Move to the Model Part from Section.
							ui.sender.sortable("cancel");
						}
					}
										
					// Updating Controller Scope.				
					scope.$apply(function() {
						scope.sectionMap = secMap;
						scope.selectedModelList = selectedMoList;
						scope.uploadDataList = upldDataList;
					});
					// Recursive Call to Connect Them Dynamically.
					createPortalPageService.connectSectionFieldWithModel(options);
				}
			}).disableSelection();
		}		
		return createPortalPageService;
		});
		
		createPortalPageApp.filter('htmlToPlaintext', function() {
		    	return function(text) {
		      		return  text ? String(text).replace(/<[^>]+>/gm, '') : '';
		    	};
		  	}
		);
		
		createPortalPageApp.filter('removePreviousSelectedValues', function() {
			return function(input, obj, valueList) {
			 	var out = [];
				angular.forEach(input, function(fieldObj) {
					if((fieldObj.fieldAPIName == '' || fieldObj.fieldAPIName == obj)) {
						out.push(fieldObj);
					} else {
						var isAdded = true;
						angular.forEach(valueList, function(value) {
							if(fieldObj.fieldAPIName == value.fieldAPIName) {
								isAdded = false;
							}
						});
						if(isAdded) {
							out.push(fieldObj);
						}
					}
				});
				return out;
			}
		});
		
		createPortalPageApp.filter('getlookupCriteriaFieldByModel', function() {
			return function(input, obj) {
				var out = [];
				angular.forEach(input, function(fieldObj) {
					if((undefined == fieldObj.modelName || fieldObj.modelName == obj)) {
						out.push(fieldObj);
					}
				});
				return out;
			}
		});
		
		// Function Call on Document Ready.
		$(document).ready(function() {
			$('#createNewPageHeaderDiv').removeClass('hide');
			$('#createNewSectionDiv').removeClass('hide');
			$('#createNewModelDiv').removeClass('hide');
			$('#updateFieldInfo').removeClass('hide');
			$('#configureDependentPicklistModel').removeClass('hide');
			$('#loadingImageDiv').addClass('hide');
		});
	</script>
</apex:page>