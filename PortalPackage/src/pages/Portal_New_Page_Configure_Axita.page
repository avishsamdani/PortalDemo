<apex:page controller="NewEditPortalPageController" showHeader="false" standardStylesheets="false" sidebar="false" applyHtmlTag="false" applyBodyTag="false" docType="html-5.0">
	<html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
		<head>
			<!--  Meta tags -->
			<meta charset="utf-8" />
	    	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	  		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	  		
	    	<!-- Lightning Design System -->
	      	<apex:stylesheet value="{!URLFOR($Resource.SLDS0121, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />
	    
	    	<!-- Bootstrap SF1 -->
	    	<apex:stylesheet value="{!URLFOR($Resource.bootstrap, 'bootstrap-3.3.6/css/bootstrap.css')}" />
	    	<apex:stylesheet value="{!URLFOR($Resource.RichTextEditor, 'angular-wysiwyg-master/dist/style.css')}" />
	    	<apex:stylesheet value="{!URLFOR($Resource.Portal_Font_Awsome, 'css/font-awesome.css')}" />
	    	
	    	<!-- Including JQuery & Bootstrap JS -->
	    	<apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js" />
	    	<apex:includeScript value="https://code.jquery.com/ui/1.11.4/jquery-ui.js" />
	    	<apex:includeScript value="{!URLFOR($Resource.bootstrap, 'bootstrap-3.3.6/js/bootstrap.min.js')}"/>
	    	
	    	<link href='https://fonts.googleapis.com/css?family=Open+Sans:300,400,700' rel='stylesheet' type='text/css'/>
			
			<!-- Introducing Angular -->
			<apex:includeScript value="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js" />
			<apex:includeScript value="{!URLFOR($Resource.RichTextEditor, 'angular-wysiwyg-master/dist/bootstrap-colorpicker-module.js')}" />
			<apex:includeScript value="{!URLFOR($Resource.RichTextEditor, 'angular-wysiwyg-master/dist/angular-wysiwyg.js')}" />
			
		</head>
		
		<style>
			.remove-padding {
				padding:0px;
			}
			
			.admin-panel-main-container .admin-panel-header-div {
				background: #333;
				position:fixed;
				height:50px;
				padding-top: 7px;
				z-index:1;
			}
			
			.admin-panel-main-container .admin-panel-header-div .admin-panel-header-back-link-div a.slds-button--neutral {
				font-size:12px;
				padding: 0px 8px;
			}
			
			.admin-panel-main-container .main-body-part {
				position: relative;
	    		top: 50px;
	    		margin-top:5px;
			}
			
			.admin-panel-main-container .main-body-part .main-body-left-panel {
				/*position:fixed;
				left:0;
				top:55px;*/
				height:100%;
			}
			
			.admin-panel-main-container .main-body-part .main-body-left-panel .create-section-button-div, .admin-panel-main-container .main-body-part .create-model-button-div .create-model-button {
				margin-top:5px;
			}
			
			.admin-panel-main-container .main-body-part .main-body-left-panel .create-section-button-div .slds-button--brand {
				width:100%;
			}
			
			.admin-panel-main-container .main-body-part .main-body-left-panel .create-page-header-button-div .slds-button--brand {
				width:100%;
			}
			
			.admin-panel-main-container .main-body-part .main-body-left-panel .create-model-button-div .slds-button--brand {
				width:100%;
			}
			
			.admin-panel-main-container .main-body-part .main-body-right-panel {
				border:1px solid #DDD;
				border-top-left-radius:5px;
				border-top-right-radius:5px;
				margin-top:40px;
			}
			
			.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-div {
				background: #004f87;
				color: #FFF;
				border-top-left-radius:5px;
				border-top-right-radius:5px;
				height:25px;
			}
			
			.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-description-div {
				background: #F1F1F1;
			}
			
			.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-description-div .page-header-description-left-div {
			    padding: 2px 15px;
			}
			
			.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-div .page-header-left-div {
				padding: 1px 15px;
			}
			
			.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-div .page-header-left-div h1 {
				font-size: 20px;
			    font-family: verdana;
			    color: #FFF;
			}
			
			.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-div .page-header-right-div {
				margin-right: 8px;
	    		margin-top: -2px;
			}
			
			.admin-panel-main-container .main-body-part .main-body-right-panel .page-header-div .page-header-right-div a {
				font-size: 20px;
			    font-family: verdana;
			    color: #FFF;
			}
			
			.admin-panel-main-container .main-body-part .main-body-left-panel .model-list-field-div {
				margin-top:10px;
				background: #fff;
	    		min-width: 100%;
	    		border: 1px solid #EEEEEE;
	    		padding-top:5px;
	    		height:300px;
	    		overflow:auto;
	    		position: static;
			}
			
			.field-list-div ul.fieldSortable {
				padding: 0px 8px;
			}
			
			.field-list-div ul.apply-min-height {
				min-height:50px;
			}
			
			.field-list-div ul.fieldSortable li {
				background-color: #A7C4E2;
			    border-radius: 0px;
			    text-align: center;
			    margin-bottom:10px;
			    padding-left: 10px;
			    padding-right: 10px;
			    font-size: small;
			    width: inherit;
			    padding: 5px;
			    cursor: move;
			    color:#000;
			}
			
			.fieldSortable-placeholder {
			 	border: 1px dotted black;
			    min-height: 44px;
			    background-color: #FFF !important;
			 }
			
			.remove-margin {
				margin-left: 0px;
	    		margin-right: 0px;
			}
			
			.field-list-div div.alert {
				margin-bottom:5px;
				margin:0px 8px 5px 8px;
			}
			
			.admin-panel-main-container .main-body-part .main-body-right-panel .section-div {
				padding: 10px;
			}
			
			.admin-panel-main-container .main-body-part .main-body-right-panel .section-div div.section-header-div {
				background: rgb(52, 73, 94);
	    		color: #FFF;
			}
			
			.admin-panel-main-container .main-body-part .main-body-right-panel .section-div div.section-header-div div.pull-right {
		    	margin: 4px 7px;
			}
			
			.inner-wrapper-left {
				float:left;
			 }
			 
			 .inner-wrapper-right {
				float:right;
			 }
			 
			 .inner-wrapper-full-width {
			 	width:100%;
			 }
			 
			 .inner-wrapper-half-width {
			 	width:49%;
			 }
			 
			 .inner-wrapper-ul-div {
				text-align:center;
				overflow:hidden;
				margin-top:5px;
			 }
			 
			 .inner-wrapper-ul-div.apply-height {
			 	height:35px;
			 }
			 
			 .section-sortable li.section-list {
			 	margin-bottom:10px;
			 }
			 
			 .admin-panel-main-container .main-body-part .main-body-left-panel .model-list-field-div.apply-position-static {
			 	position: static;
			 }
			 
			 .slds .slds-form-element .slds-checkbox [type="checkbox"] ~ .slds-checkbox--faux.my-custom-checkbox {
			 	margin-right: 4px;
	    		float: left;
	    		margin-top: 2px;
			 }
			 
			 .slds .slds-checkbox .slds-form-element__label.my-custom-text {
			 	display: block;
			    vertical-align: middle;
			    font-size: 12px;
			    float: left;
			    text-align: left;
			    max-width: 68%;
			 }
			 
			 .slds .slds-checkbox.my-custom-label {
			 	display:block;
			 }
			 
			 .selected-field-span {
			 	border: 1px dashed #CCC;
			    margin-left: 5px;
			    width: calc(25% - 5px);
		        margin-bottom: 5px;
			 }
			 
			 .selected-field-span:nth-of-type(4n+1){
			 	clear:both;
		 	 }
		 	 
		 	 div.inner-wrapper-ul-div ul.fieldSortable {
				height:100%;
			 }
			 
			 div.inner-wrapper-ul-div ul.fieldSortable li {
			    border-radius: 0px;
			    text-align: center;
			    margin-bottom:10px;
			    padding-left: 10px;
			    padding-right: 10px;
			    font-size: small;
			    width: inherit;
			    padding: 5px;
			    cursor: move;
			    color:#000;
			 }
			 
			 div.submit-button-div {
			 	position:fixed;
			 	right:15px;
			 	top:55px;
			 }
			 
			 div.error-div {
			 	font-size:20px;
			 }
			 
			 div.error-div span.glyphicon.glyphicon-exclamation-sign {
			 	font-size: 24px;
			    position: relative;
			    top: 6px;
			 }
			 
			 div.loading-image-div {
			 	position:fixed;
			 	top:0;
			 	left:0;
			 	right:0;
			 	bottom:0;
			 	z-index:10000;
			 	background: #FFF;
			 	opacity: 0.7;
			 }
			 
			 div.loading-image-div div.slds-spinner--medium {
			 	margin: 5% auto;
			 }
			 
			 div.component-div {
			 	margin-top: 10px;
			    background: #fff;
			    min-width: 100%;
			    border: 1px solid #EEEEEE;
			    padding-top: 5px;
			 }
			 
			 div.component-div div.component-header {
			 	padding: 0px 10px 3px 10px;
    			font-weight: bold;
			 }
			 
			 div.component-div .upload-div ul.fieldSortable {
			 	padding: 0px 8px;
	    		min-height: 30px;
			 }
			 
			 div.component-div .upload-div ul.fieldSortable li {
			 	background-color: #A7C4E2;
			    border-radius: 0px;
			    text-align: center;
			    margin-bottom: 10px;
			    padding-left: 10px;
			    padding-right: 10px;
			    font-size: small;
			    width: inherit;
			    padding: 5px;
			    cursor: move;
			    color: #000; 
			  
			 }
			 
			 .slds-col {
			 	margin: 0px 5px;
			 }
			 
			 div.condition-div :first-child {
			 	margin-left:0px;
			 }
			 
			 div.condition-div :last-child {
			 	margin-right:0px;
			 }
			 
			 div#selectedfieldInstruction {
			 	height: 100px !important;
			 }
			 
			 .slds .slds-lookup[data-select="multi"] .slds-pill__container.no-border {
			 	border-bottom: 0px;
			 }
			 
			 .slds .slds-lookup[data-select="multi"] .slds-pill__container.no-border a:hover {
			 	text-decoration:none;
			 }
			 
			 button.slds-button.slds-button--neutral.lookup-button:hover {
			 	cursor: auto;
			 }
			 
			 span.pull-right.close-field {
			 	position: relative;
    			top: -40px;
			 }
			 
			 label.slds-form-element__label.placeholder-label {
				font-weight: normal;
			    color: #AAA;
			 }
			 
			 .col-lg-12.col-md-12.col-sm-12.col-xs-12.model-heading {
    			padding: 0;
    			font-weight: bold;
			 }
			 
			 .model-title {
    			padding: 0px 8px;
    			font-weight: bold;
			 }
			 
			 .model-title span.glyphicon.glyphicon-pencil {
	 	    	color: #EC2F2F;
    			margin-left: 5px;
    			cursor: pointer;
			 }
			 
			 /*
			Added by arpit
			*/
			.resizeComponent{
				display:inline-flex;
				position:fixed;
			 	right: 154px;
		    	top: 55px;
			}
			/*
			Added by arpit
			*/
			
			 @media (max-width: 768px) {
				.selected-field-span{
				 	clear:both;
			 	 }
			 	 
			 	 .selected-field-span {
				    width: calc(100% - 5px);
				 }
				 
				 .admin-panel-main-container .main-body-part .main-body-right-panel {
				 	width: calc(66.66666667% - 5px);
				 }
				/*.admin-panel-main-container .main-body-part .main-body-right-panel {
			    	left: 33.33333333%;
				}*/
			 }
			
			 @media (min-width: 769px) and (max-width: 991px) {
				.selected-field-span:nth-of-type(2n+1){
				 	clear:both;
			 	 }
			 	 
			 	 .selected-field-span {
				    width: calc(50% - 5px);
				 }
				 
				 .admin-panel-main-container .main-body-part .main-body-right-panel {
				 	width: calc(66.66666667% - 5px);
				 }
				/*.admin-panel-main-container .main-body-part .main-body-right-panel {
			    	left: 33.33333333%;
				}*/
			 }
			
			 @media (min-width: 992px) and (max-width: 1199px){
			 	.selected-field-span:nth-of-type(3n+1){
				 	clear:both;
			 	 }
			 	 
			 	 .selected-field-span {
				    width: calc(33.33333333% - 5px);
				 }
				 
				 .admin-panel-main-container .main-body-part .main-body-right-panel {
				 	width: calc(75% - 5px);
				 }
				/*.admin-panel-main-container .main-body-part .main-body-right-panel {
			    	left: 25%;
				}*/
			 }
			
			 @media (min-width: 1200px) {
			 	.selected-field-span:nth-of-type(4n+1){
				 	clear:both;
			 	 }
			 	 
			 	 .selected-field-span {
				    width: calc(25% - 5px);
				 }
				 
				 .admin-panel-main-container .main-body-part .main-body-right-panel {
				 	width: calc(83.33333333% - 5px);
				 } 
				/*.admin-panel-main-container .main-body-part .main-body-right-panel {
					left:16.66666667%
				}*/
			 }
		</style>
		
		<script>
		//Added by arpit
		var globalWidth = '';
		// Function to set Page width how look like on executor part.
 		function setWidth(width){
 			// Getting the angular scope to modify that
		 	var scope = angular.element("#sectionName").scope();

		 	globalWidth = width;
		 	
		 	// Setting width value to angular variable.
		 	if(!scope.$$phase) {
			 	scope.$apply(function (){
			 		scope.customWidth = globalWidth;
			 	});
		 	}
		 	
		 	
		 	if(width == 'inherit' || width < 320 || !$.isNumeric(width)){
		 		$(".section-div").css({"max-width": 'inherit',"margin":"auto"});
		 		configureAbove();
		 		
		 	} else{
		 		if(width < 768){
		 		
		 			$( ".customCol" ).each(function( index ) {
	 					$(this).removeClass('col-sm-12');
		 				$(this).addClass('col-md-12');
		 				$('#componentWrapper .col-md-12').css("min-height","22px");
		 				$('#componentWrapper .col-sm-12').css("min-height","22px");
					});
					$('.cusomtLeftRow').each(function( index ) {
						$(this).addClass('col-sm-12');
						$(this).removeClass('col-md-2');
					});
					$('.customRightRow').each(function( index ) {
						$(this).addClass('col-sm-12');
						$(this).removeClass('col-md-5');
					});
					
	 			} else{
	 				
	 				configureAbove();
	 			}
	 			$(".section-div").css({"max-width": width+'px',"margin":"auto"});
	 		}
	 		
	 		if(width != 'inherit' && $.isNumeric(width)){
	 			if(width < 470){
	 				$('.removeButton ').css("float","right");
	 			}else{
	 				$('.removeButton ').css("float","left");
	 			}
	 		}
	 		
	 		
       	}
       	
       	function configureAbove(){
       		
       		$( ".customCol" ).each(function( index ) {
 				$(this).addClass('col-sm-12');
				$(this).removeClass('col-md-12');
			});
			$('.cusomtLeftRow').each(function( index ) {
				$(this).removeClass('col-sm-12');
				$(this).addClass('col-md-2');
			});
			$('.customRightRow').each(function( index ) {
				$(this).removeClass('col-sm-12');
				$(this).addClass('col-md-5');
			});
       	}
		//Added by arpit
		</script>
		
		
		<body>
			<!-- Admin Panel Start -->
			<div class="slds" ng-app="createPortalPageApp" ng-controller="CreatePortalPageController">
				<div class="loading-image-div" id="loadingImageDiv">
					<div class="slds-spinner--medium">
				  		<img src="/resource/1453374072000/slds_spinner_brand" alt="Loading..." />
					</div>
				</div>
				<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 remove-padding admin-panel-main-container">
					<!-- Admin Panel Header Starts -->
					<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 admin-panel-header-div">
						<div class="admin-panel-header-logo-div pull-left">
							<a href="#!" class=""><img src="{!URLFOR($Resource.MainTemplateAsset, 'img/ERx_Logo.jpg')}" alt="Logo"/></a>
						</div>
						<div class="admin-panel-header-back-link-div pull-right">
							<a href="Portal_Page_Configure" class="slds-button slds-button--neutral"><span class="glyphicon glyphicon-share-alt"></span> Form Builder Home</a>
						</div>
					</div>
					<!-- Admin Panel Header Ends -->
					
					<!-- Clear Div -->
					<div class="clearfix"></div>
					
					<apex:outputPanel layout="block" styleClass="col-lg-12 col-md-12 col-sm-12 col-xs-12 remove-padding main-body-part" rendered="{!errorMessage != null && errorMessage != ''}">
						<div class="alert alert-danger error-div" role="alert">
							<span class="glyphicon glyphicon-exclamation-sign"></span> {!errorMessage}
						</div>
					</apex:outputPanel>
					
					<apex:outputPanel layout="block" styleClass="col-lg-12 col-md-12 col-sm-12 col-xs-12 remove-padding main-body-part" rendered="{!errorMessage == null || errorMessage == ''}">
						<div class="col-lg-2 col-md-3 col-sm-4 col-xs-4 main-body-left-panel">
							<!-- Page Header Button Starts -->
							<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 create-page-header-button-div">
								<button class="slds-button slds-button--brand create-model-button" ng-click="showCreateNewPageHeader();" ng-if="pageHeaderObject.title != null">Update Page Header</button>
								<button class="slds-button slds-button--brand create-model-button" ng-click="showCreateNewPageHeader();" ng-if="pageHeaderObject.title == null">Create Page Header</button>
							</div>
							<!-- Page Header Button Ends -->
							
							<!-- Create Model Button Starts -->
							<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 create-model-button-div">
								<button class="slds-button slds-button--brand create-model-button" ng-click="showCreateNewModel(true);">Create Model</button>
							</div>
							<!-- Create Model Button Ends -->
							
							<!-- Create Section Button Starts -->
							<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 create-section-button-div">
								<button class="slds-button slds-button--brand create-model-button" ng-click="showCreateNewSection();" ng-if="selectedModelList.length != 0">Create Section</button>
							</div>
							<!-- Create Section Button Ends -->
							
							<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 model-heading"> Defined Models : </div>
							<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 remove-padding model-list-field-div">
								<div ng-repeat="selectedModel in selectedModelList" class="field-list-div">
									<div class="model-title">
										<span>{{selectedModel.modelName}}</span>
										<span class="glyphicon glyphicon-pencil" ng-click="editModelDetails(selectedModel);"></span>
									</div>
									<ul class="fieldSortable fieldSortableUl ui-sortable apply-min-height" data-model-type="{{selectedModel.modelName}}" id="fieldSortable{{$index}}">
										<li class="ui-state-default ui-sortable-handle" data-model-type="{{selectedModel.modelName}}" data-api-name="{{field.fieldAPIName}}" ng-repeat="field in selectedModel.field | orderBy:field.fieldName">
											<span>
												{{field.fieldName}}
											</span>
										</li>
									</ul>
								</div>
							</div>
							
							<!-- Ohter Components -->
							<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 remove-padding component-div">
								<!-- Upload Component -->
								<div class="component-header">
									Components :
								</div>
								<div class="upload-div">
									<ul class="fieldSortable" id="uploadComponent" ng-repeat="uploadData in uploadDataList">
										<li class="ui-state-default ui-sortable-handle">
											<span>{{uploadData.value}}</span>
										</li>
									</ul>
								</div>
							</div>						
						</div>
						<div class="col-lg-10 col-md-9 col-sm-8 col-xs-8 remove-padding main-body-right-panel">
							<div ng-if="pageHeaderObject.title != null" class="page-header-div">
								<div class="pull-left page-header-left-div">
									<h1 ng-dblclick="showCreateNewPageHeader();" style="cursor:pointer;">{{pageHeaderObject.title}}</h1>
								</div>
								<div class="pull-right page-header-right-div">
									<a href="#!" ng-click="removePageHeader();"><span class="glyphicon glyphicon-remove"></span></a>
								</div>
								<div class="clearfix"></div>
							</div>
							<div ng-if="pageHeaderObject.description != null" class="page-header-description-div">
								<div class="pull-left page-header-description-left-div">
									<h5>{{pageHeaderObject.description}}</h5>
								</div>
								<div class="clearfix"></div>
							</div>
							<div class="section-div">
								<ul class="section-sortable" id="sectionSortable">
									<li class='section-list' id="{{sectionOrder}}" ng-repeat="sectionOrder in sectionOrderList">
										<div class='row remove-margin section-header-div'>
											<div class='pull-left' style='padding-bottom: 5px;'>
												<p ng-class="sectionMap[sectionOrder].className" ng-click="hideShowSection(sectionOrder);" style='display:inline;cursor:pointer;' ng-if="sectionMap[sectionOrder].className"></p>
												<p class="glyphicon glyphicon-minus" ng-click="hideShowSection(sectionOrder);" style='display:inline;cursor:pointer;' ng-if="!sectionMap[sectionOrder].className"></p>
												<a style='cursor:pointer; color:#FFF;' title='Double click to update' ng-dblclick="updateSectionDetail(sectionOrder);">
													<span class='customSpan' title='Double click to update' > {{sectionMap[sectionOrder].title}} </span>
												</a>
											</div>
											<div class='pull-right'>
												<h1 class='remove-section' ng-click="removeSection(sectionOrder);" title='Remove Section' style='cursor:pointer;background:none;color:white;'>&#10005;
												</h1>
											</div>
											<div class='clearfix'></div>
										</div>
										<div ng-if="sectionMap[sectionOrder].description != ''">
											<div class='pull-left' style='padding-bottom: 5px;'>
												{{sectionMap[sectionOrder].description}}
											</div>
											<div class='clearfix'></div>
										</div>
										<div ng-class="sectionMap[sectionOrder].innerDivClass" id="main-wrapper-div-{{sectionOrder}}" ng-if="sectionMap[sectionOrder].sectionLayout.trim().toUpperCase() == 'ONECOLUMN'">
											<div class="inner-wrapper-left inner-wrapper-full-width">
												<div class='inner-wrapper-ul-div' ng-repeat="field in sectionMap[sectionOrder].field">
													<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable' ng-if="field.fieldDisplayType.toUpperCase() != 'UPLOAD'">
														<li class="ui-state-default ui-sortable-handle" data-model-type="{{field.modelName}}" data-api-name="{{field.fieldAPIName}}">
															<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
																<!--  Added by arpit-->
																<c:Portal_Admin_Panel_Field_Visualization />
																<!--  Added by arpit-->
															</span>
															<span class=" pull-right close-field" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
															<span class="clearfix"></span>
														</li>
													</ul>
													<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable upload-ul' ng-if="field.fieldDisplayType.toUpperCase() == 'UPLOAD'">
														<li class="ui-state-default ui-sortable-handle" is-upload-type="true">
															<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
																<c:Portal_Admin_Panel_Field_Visualization />
															</span>
															<span class=" pull-right close-field" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
															<span class="clearfix"></span>
														</li>
													</ul>
												</div>
												<div class='inner-wrapper-ul-div apply-height' ng-if="sectionMap[sectionOrder].field.length == 0">
													<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable'>
													</ul>
												</div>
											</div>
											<div class="clearfix"></div>
										</div>
										<div ng-class="sectionMap[sectionOrder].innerDivClass" id="main-wrapper-div-{{sectionOrder}}" ng-if="sectionMap[sectionOrder].sectionLayout.trim().toUpperCase() == 'TWOCOLUMN'">
											<div class="inner-wrapper-left inner-wrapper-half-width">
												<div class='inner-wrapper-ul-div' ng-repeat="field in sectionMap[sectionOrder].field" ng-if="$even">
													<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable' ng-if="field.fieldDisplayType.toUpperCase() != 'UPLOAD'">
														<li class="ui-state-default ui-sortable-handle" data-model-type="{{field.modelName}}" data-api-name="{{field.fieldAPIName}}">
															<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
																<c:Portal_Admin_Panel_Field_Visualization />
															</span>
															<span class=" pull-right close-field" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
															<span class="clearfix"></span>
														</li>
													</ul>
													<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable upload-ul' ng-if="field.fieldDisplayType.toUpperCase() == 'UPLOAD'">
														<li class="ui-state-default ui-sortable-handle" is-upload-type="true">
															<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
																<c:Portal_Admin_Panel_Field_Visualization />
															</span>
															<span class=" pull-right close-field" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
															<span class="clearfix"></span>
														</li>
													</ul>
												</div>
												<div class='inner-wrapper-ul-div apply-height' ng-if="sectionMap[sectionOrder].field.length == 0">
													<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-1'}}" class='fieldSortable'>
													</ul>
												</div>
											</div>
											<div class="inner-wrapper-right inner-wrapper-half-width">
												<div class='inner-wrapper-ul-div' ng-repeat="field in sectionMap[sectionOrder].field" ng-if="$odd">
													<ul id="{{'main-wrapper-div-' + sectionOrder + '-right-' + ($index+1)}}" class='fieldSortable' ng-if="field.fieldDisplayType.toUpperCase() != 'UPLOAD'">
														<li class="ui-state-default ui-sortable-handle" data-model-type="{{field.modelName}}" data-api-name="{{field.fieldAPIName}}">
															<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
																<c:Portal_Admin_Panel_Field_Visualization />
															</span>
															<span class=" pull-right close-field" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
															<span class="clearfix"></span>
														</li>
													</ul>
													<ul id="{{'main-wrapper-div-' + sectionOrder + '-left-' + ($index+1)}}" class='fieldSortable upload-ul' ng-if="field.fieldDisplayType.toUpperCase() == 'UPLOAD'">
														<li class="ui-state-default ui-sortable-handle" is-upload-type="true">
															<span style="cursor:pointer;color:#1580B1;font-weight:bold;" ng-dblclick="showUpdateFieldInfo(sectionOrder, $index, field, false);">
																<c:Portal_Admin_Panel_Field_Visualization />
															</span>
															<span class=" pull-right close-field" style="cursor:pointer;color:#34495E;" ng-click="removeFieldsFromSection(sectionOrder, $index);"><span class="glyphicon glyphicon-remove"></span></span>
															<span class="clearfix"></span>
														</li>
													</ul>
												</div>
												<div class='inner-wrapper-ul-div apply-height' ng-if="sectionMap[sectionOrder].field.length == 0">
													<ul id="{{'main-wrapper-div-' + sectionOrder + '-right-1'}}" class='fieldSortable'>
													</ul>
												</div>
											</div>
											<div class="clearfix"></div>
										</div>
										<!--  Added by arpit-->
										<button class="slds-button slds-button--brand addAnotherButton" ng-show="sectionMap[sectionOrder].isAddAnother">{{sectionMap[sectionOrder].addAnotherButtonLabel}}</button>
										<button class="slds-button slds-button--brand removeButton" ng-show="sectionMap[sectionOrder].isAddAnother">{{sectionMap[sectionOrder].removeButtonLabel}}</button>
										<!--  Added by arpit-->
									</li>	
								</ul>
							</div>
						</div>
											
						<div class="clearfix"></div>
					</apex:outputPanel>
					<div class="clearfix"></div>
				</div>
				
				
				<!-- Save All Data Button -->
				<apex:outputPanel layout="block" rendered="{!errorMessage == null || errorMessage == ''}">
					<!-- added By Arpit -->
					<ul class="slds-dropdown__list resizeComponent " role="menu">
				 		<li class="slds-dropdown__item custom-li">
                        	<input class="slds-input custom-input" onkeyup="setWidth(this.value);" placeholder="Custom(In px)" />
                     	</li>
						<li class="slds-dropdown__item">
					    	<button aria-haspopup="true" class="slds-button slds-button--icon-container" onclick="setWidth('inherit');" title="screen">
					        	<svg aria-hidden="true" class="slds-icon--small">
					            	<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/resource/1454998329000/SLDS/assets/icons/utility-sprite/svg/symbols.svg#desktop">
					            	</use>
					        	</svg>
					    	</button>
						</li>
						<li class="slds-dropdown__item">
					    	<button aria-haspopup="true" class="slds-button slds-button--icon-container" onclick="setWidth('1280');" title="1280px">
					        	<svg aria-hidden="true" class="slds-icon--small">
					            	<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/resource/1454998329000/SLDS/assets/icons/utility-sprite/svg/symbols.svg#tablet_portrait">
					            	</use>
					        	</svg>
					    	</button>
						</li>
						<li class="slds-dropdown__item">
						    <button aria-haspopup="true" class="slds-button slds-button--icon-container" onclick="setWidth('960');" title="960px">
						         <svg aria-hidden="true" class="slds-icon--small">
						             <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/resource/1454998329000/SLDS/assets/icons/utility-sprite/svg/symbols.svg#phone_portrait">
						             </use>
						         </svg>
						     </button>
						 </li>
					</ul>
					<!-- added By Arpit -->
					<div class="submit-button-div">
						<button class="slds-button slds-button--brand create-model-button" type="button" ng-click="saveAllData();"><span class="glyphicon glyphicon-floppy-disk"></span> Save All Data</button>
					</div>
					
					<!--  Page Header Div -->
					<div id="createNewPageHeaderDiv" ng-show="isShowCreatePageHeader == true" class="hide">
						<div aria-hidden="false" role="dialog" class="slds-modal slds-modal--large slds-fade-in-open">
							<div class="slds-modal__container">
								<div class="slds-modal__header">
									<h2 class="slds-text-heading--medium" ng-if="pageHeaderObject.title != null">Update Page Header</h2>
									<h2 class="slds-text-heading--medium" ng-if="pageHeaderObject.title == null">Create Page Header</h2>
									<button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="hideCreateNewPageHeader();">
										<span class="glyphicon glyphicon-remove"></span>
										<span class="slds-assistive-text">Close</span>
									</button>
								</div>
								<div class="slds-modal__content">
									<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="sectionName">Title :</label>
											<div class="slds-form-element__control">
												<input type="text" ng-model="pageHeader.title" class="slds-input" id="pageTitle" name="pageTitle" />
											</div>
										</div>
									</div>
									<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="sectionName">Description :</label>
											<div class="slds-form-element__control">
												<input type="text" ng-model="pageHeader.description" class="slds-input" id="Description" name="Description" />
											</div>
										</div>
									</div>
								</div>
								<div class="slds-modal__footer">
									<div class="slds-x-small-buttons--horizontal">
										<button class="slds-button slds-button--neutral" ng-click="hideCreateNewPageHeader();">Cancel</button>
										<button class="slds-button slds-button--neutral slds-button--brand" ng-click="createPageHeader();" ng-if="pageHeaderObject.title != null">Update</button>
										<button class="slds-button slds-button--neutral slds-button--brand" ng-click="createPageHeader();" ng-if="pageHeaderObject.title == null">Create</button>
									</div>
								</div>
							</div>
						</div>
						<div class="slds-backdrop slds-backdrop--open"></div>
					</div>
					
					<!-- Create New Section -->
					<div id="createNewSectionDiv" ng-show="isShowCreateNewSection == true" class="hide">
						<div aria-hidden="false" role="dialog" class="slds-modal slds-modal--large slds-fade-in-open">
							<div class="slds-modal__container">
								<div class="slds-modal__header">
									<h2 class="slds-text-heading--medium" ng-if="!section.sectionOrder">Create Section</h2>
									<h2 class="slds-text-heading--medium" ng-if="section.sectionOrder">Update Section</h2>
									<button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="hideCreateNewSection();">
										<span class="glyphicon glyphicon-remove"></span>
										<span class="slds-assistive-text">Close</span>
									</button>
								</div>
								<div class="slds-modal__content">
									<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="sectionName">Section Name :</label>
											<div class="slds-form-element__control">
												<input type="text" ng-model="section.title" class="slds-input" id="sectionName" name="sectionName" />
											</div>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="sectionLayout">Layout :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" id="sectionLayout" name="sectionLayout" ng-model="section.sectionLayout">
													<option value="ONECOLUMN">One Column</option>
													<option value="TWOCOLUMN">Two Column</option>
												</select>
											</div>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="sectionCollapsible">Is Collapsible :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" id="sectionCollapsible" name="sectionCollapsible" ng-model="section.sectionCollapsible">
													<option value="true">True</option>
													<option value="false">False</option>
												</select>
											</div>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label">Render :</label>
											<div class="slds-form-element__control">
												<button class="slds-button slds-button--neutral slds-button--brand"><span class="glyphicon glyphicon-share-plus"></span> Condition </button>
											</div>
										</div>
										
									</div>
									<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="sectionDescription">Description :</label>
											<div class="slds-form-element__control">
												<input type="text" class="slds-input" id="sectionDescription" name="sectionDescription" ng-model="section.description" />
											</div>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="isAddAnother">Is Add Another :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" id="isAddAnother" name="isAddAnother" ng-model="section.isAddAnother" ng-options="o.value as o.label for o in [{ label: 'True', value: true }, { label: 'False', value: false }]" ng-change="section.removeButtonLabel = ''; section.addAnotherButtonLabel=''">
												</select>
											</div>
										</div>
										<div class="slds-form-element" ng-if="section.isAddAnother">
											<label class="slds-form-element__label" for="removeButtonLabel">Remove Button label :</label>
											<div class="slds-form-element__control">
												<input type="text" ng-model="section.removeButtonLabel" class="slds-input" id="removeButtonLabel" name="removeButtonLabel" />
											</div>
										</div>
										<div class="slds-form-element" ng-if="section.isAddAnother">
											<label class="slds-form-element__label" for="anotherButtonLabel">Add Another Button label :</label>
											<div class="slds-form-element__control">
												<input type="text" class="slds-input" id="anotherButtonLabel" name="anotherButtonLabel" ng-model="section.addAnotherButtonLabel" />
											</div>
										</div>
									</div>
								</div>
								<div class="slds-modal__content">
									<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="fontSize">Font-Size :</label>
											<select class="slds-select" id="fontSize" name="fontSize" ng-model="section.fontSize">
												<option value="8px">8px</option>
												<option value="9px">9px</option>
												<option value="10px">10px</option>
												<option value="11px">11px</option>
												<option value="12px">12px</option>
												<option value="14px">14px</option>
												<option value="16px">16px</option>
											</select>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="fontColor">Font-Color :</label>
											<div class="slds-form-element__control">
												<input type="color" class="slds-input" id="fontColor" name="fontColor" ng-model="section.fontColor" />
											</div>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="sectionBorder">Section-Border :</label>
											<select class="slds-select" id="sectionBorder" name="sectionBorder" ng-model="section.sectionBorder">
												<option value="8px">8px</option>
												<option value="9px">9px</option>
												<option value="10px">10px</option>
											</select>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="fontWeight">Font-Weight :</label>
											<select class="slds-select" id="fontWeight" name="fontWeight" ng-model="section.fontWeight">
												<option value="normal">normal</option>
												<option value="bold">bold</option>
												<option value="lighter">lighter</option>
											</select>
										</div>
									</div>
									<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="fontFamily">Font-Family :</label>
											<select class="slds-select" id="fontFamily" name="fontFamily" ng-model="section.fontFamily">
												<option value="Georgia">Georgia</option>
												<option value="Palatino Linotype">Palatino Linotype</option>
												<option value="Book Antiqua">Book Antiqua</option>
												<option value="Times New Roman">Times New Roman</option>
												<option value="Arial">Arial</option>
												<option value="Helvetica">Helvetica</option>
												<option value="Arial Black">Arial Black</option>
												<option value="Impact">Impact</option>
												<option value="Lucida Sans Unicode">Lucida Sans Unicode</option>
												<option value="Tahoma">Tahoma</option>
												<option value="Verdana">Verdana</option>
												<option value="Courier New">Courier New</option>
												<option value="Lucida Console">Lucida Console</option>
												<option value="initial">initial</option>
											</select>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="backgroundColor">Background-Color :</label>
											<div class="slds-form-element__control">
												<input type="color" class="slds-input" id="backgroundColor" name="backgroundColor" ng-model="section.backgroundColor" />
											</div>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="fontStyle">Font-Style :</label>
											<select class="slds-select" id="fontStyle" name="fontStyle" ng-model="section.fontStyle">
												<option value="normal">normal</option>
												<option value="italic">italic</option>
												<option value="oblique">oblique</option>
											</select>
										</div>
									</div>
								</div>
								<div class="slds-modal__footer">
									<div class="slds-x-small-buttons--horizontal">
										<button class="slds-button slds-button--neutral" ng-click="hideCreateNewSection();">Cancel</button>
										<button class="slds-button slds-button--neutral slds-button--brand" ng-click="createSection();" ng-if="section.sectionOrder">Update</button>
										<button class="slds-button slds-button--neutral slds-button--brand" ng-click="createSection();" ng-if="!section.sectionOrder">Create</button>
									</div>
								</div>
							</div>
						</div>
						<div class="slds-backdrop slds-backdrop--open"></div>
					</div>
					
					<!-- Create New Model Model -->
					<div id="createNewModelDiv" ng-show="isShowCreateNewModel == true" class="hide">
						<div aria-hidden="false" role="dialog" class="slds-modal slds-modal--large slds-fade-in-open">
							<div class="slds-modal__container">
								<div class="slds-modal__header">
									<h2 class="slds-text-heading--medium">Create Model</h2>
									<button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="hideCreateNewModel();">
										<span class="glyphicon glyphicon-remove"></span>
										<span class="slds-assistive-text">Close</span>
									</button>
								</div>
								<div class="slds-modal__content">
									<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="modelName">Model Name :</label>
											<div class="slds-form-element__control">
												<input type="text" ng-model="modelName" class="slds-input" id="modelName" name="modelName" />
											</div>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="objectList">Objects :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" id="objectList" name="objectList" ng-model="fields" ng-options="object.objectName for object in objectList" ng-change="fieldVal = []; modelCriteriaList = []; addMoreCriteriaCondition();">
													<option value="" ng-if="false"></option>
												</select>
											</div>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label">Fields :</label>
										</div>
										<div class="slds-form-element" ng-if="fields.fieldList.length > 0" style="overflow: hidden;">
											<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12" ng-repeat="fieldVal in fields.fieldList">
												<label class="slds-checkbox my-custom-label" for="field{{$index}}">
													<input name="checkbox" type="checkbox" id="field{{$index}}" ng-model="fieldVal.isChecked"/>
													<span class="slds-checkbox--faux my-custom-checkbox"></span>
													<span class="slds-form-element__label my-custom-text">{{fieldVal.fieldName}}</span>
												</label>
											</div>
										</div>
										<!-- <div class="slds-form-element">
											<label class="slds-form-element__label"></label>
											<div class="slds-form-element__control">
												<button class="slds-button slds-button--neutral slds-button--brand" ng-click = "showCriteria();updateModelConditionCriteria();"><span class="glyphicon glyphicon-share-plus"></span> Define Criteria</button>
											</div>
										</div> -->
									</div>
									<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
										<div class="panel panel-success">
									  		<div class="panel-heading">Selected Fields</div>
										  	<div class="panel-body">
										    	<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 selected-field-span" ng-repeat="checkedItem in checkedItems()">
										    		<div class="selected-field-span-inner">{{checkedItem.fieldName}}</div>
												</div>
										  	</div>
										</div>
									</div>
									
									<div class="clearfix">
									</div>
									
									
									<div class="slds-form-element"> 
										<label class="slds-form-element__label">Criteria Condition :</label>
										<div class="slds-scrollable--x">
											<table class="slds-table slds-table--bordered">
												<thead>
													<tr class="slds-text-heading--label">
														<th scope="col">
															<span class="slds-truncate">Sr. No</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Criteria Field</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Operator</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Value Type</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Model</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Value</span>
														</th>
														<th scope="col">
															<span class="slds-truncate">Action</span>
														</th>
																												
													</tr>
												</thead>
												<tbody>
													<tr class="slds-hint-parent" ng-repeat="modelCriteria in modelCriteriaList">
														<td>
															{{$index + 1}}
														</td>
														
														<td>
															<select class="slds-select" ng-model="modelCriteria.fieldAPIName" id="modelCriteriaField" name="modelCriteriaField" ng-options="criteria.fieldAPIName as criteria.fieldName for criteria  in fields.fieldList"  ng-change="addMoreCriteriaCondition(); setCriteriaFieldType($index, modelCriteria.fieldAPIName);  ">
															</select>
														</td>
														<td>
															<select class="slds-select" ng-model="modelCriteria.fieldOperator" id="modelCriteriaOperator" name="modelCriteriaOperator" ng-options="op for op in typeOperatorListMap[modelCriteria.fieldDisplayType]" ng-if="modelCriteria.fieldAPIName != ''">
															</select>
														</td>
														
														<td ng-if="globalVarMapValues.indexOf(modelCriteria.referencedObjectName) == -1 || modelCriteria.referencedObjectName == ''">
															<select class="slds-select" ng-model="modelCriteria.valueType" id="modelCriteriaValueType" name="modelCriteriaValueType" ng-options="(uploadSource|uppercase) as uploadSource for uploadSource in uploadSourceListString" ng-change="getLookupRecordCriteriaModelValues(); modelCriteria.value = ''" ng-if="modelCriteria.fieldAPIName != ''">
															</select>
														</td>
														
														<td ng-if="globalVarMapValues.indexOf(modelCriteria.referencedObjectName) > -1 && modelCriteria.referencedObjectName != ''">
															<select class="slds-select" ng-model="modelCriteria.valueType" id="modelCriteriaValueType" name="modelCriteriaValueType" ng-options="(uploadSource|uppercase) as uploadSource for uploadSource in criteriaConditionSourceListString" ng-change="getLookupRecordCriteriaModelValues(); modelCriteria.value = ''" ng-if="modelCriteria.fieldAPIName != ''">
															</select>
														</td>
														
														<td>
															<select class="slds-select" ng-model="modelCriteria.modelName" id="modelCriteriaModelName" name="modelCriteriaModelName" ng-options="selectedModel.modelName as selectedModel.modelName for selectedModel in selectedModelList" ng-if="modelCriteria.fieldAPIName != '' && (modelCriteria.valueType | uppercase) == 'MODEL'" ng-change="modelCriteria.value = '';">
															</select>
														</td>
														<td ng-if="(modelCriteria.valueType | uppercase) == 'PARAM'">
															<input class="slds-input" ng-model="modelCriteria.value" id="modelCriteriaValue" name="modelCriteriaValue" ng-if="modelCriteria.fieldAPIName != ''"/>
														</td>
														<td ng-if="(modelCriteria.valueType | uppercase) == 'STATIC'">
															<input class="slds-input" ng-model="modelCriteria.value" id="modelCriteriaValue" name="modelCriteriaValue" ng-if="modelCriteria.fieldAPIName != '' && modelCriteria.fieldDisplayType != 'REFERENCE' && modelCriteria.fieldDisplayType != 'PICKLIST'"/>
															<div class="slds-button-group demo-space" role="group" ng-if="modelCriteria.fieldDisplayType == 'PICKLIST'">
																<input type="text" class="slds-input" ng-model="modelCriteria.value" id="modelCriteriaValue" name="modelCriteriaValue" ng-if="modelCriteria.fieldAPIName != ''" />
																<button class="slds-button slds-button--neutral lookup-button" style="border: none;">
																	<img src="{!URLFOR($Resource.lookupImage)}" style="width:25px;cursor: pointer;" class="lookup-img" ng-click="openModelCriteriaLookupPopup($index);"/>
																</button>
															</div>
															<div class="slds-lookup" data-select="multi" data-scope="single" data-typeahead="true" ng-if="modelCriteria.fieldDisplayType == 'REFERENCE'">
																<div class="slds-form-element" ng-if="modelCriteria.value == ''">
																	<div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">
																		<svg aria-hidden="true" class="slds-input__icon">
																			<use xlink:href="{!URLFOR($Resource.SLDS0121, '/assets/icons/utility-sprite/svg/symbols.svg#search')}"></use>
																		</svg>
																		<input id="model-criteria-lookup{{$index}}" class="slds-input" type="text" aria-autocomplete="list" role="combobox" aria-expanded="true" aria-activedescendant="" ng-model="modelCriteria.lookupstring" ng-keyup="getModelCriteriaRecords($index, modelCriteria.referencedObjectName, modelCriteria.lookupstring);"/>
																	</div>
																</div>
																<div class="slds-pill__container no-border slds-show" ng-if="modelCriteria.value != ''">
																	<a href="#" class="slds-pill" ng-repeat="c in modelCriteria.value | split">
																		<span class="slds-pill__label">{{(modelCriteria.displayValue | split)[$index]}}</span>
																		<button class="slds-button slds-button--icon-bare slds-pill__remove" ng-click="removeSelectedModelCriteriaLookupValue($index, $parent.$index)">
																			<svg aria-hidden="true" class="slds-button__icon">
																				<use xlink:href="{!URLFOR($Resource.SLDS0121, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
																			</svg>
																			<span class="slds-assistive-text">Remove</span>
																		</button>
																	</a>
																</div>
																<div class="slds-lookup__menu hide" role="listbox" id="modelCriteriaLookupCriteriaList-{{$index}}">
																	<ul class="slds-lookup__list" role="presentation">
																		<li class="slds-lookup__item" ng-repeat="referencedModelCriteriaObjectValue in referencedModelCriteriaObjectValues">
																			<a href="#" role="option" ng-click="selectReferencedModelCriteriaObjectValue($parent.$index, referencedModelCriteriaObjectValue.Id, referencedModelCriteriaObjectValue.Name)">
																				{{referencedModelCriteriaObjectValue.Name}}
																			</a>
																		</li>
																		<li class="slds-lookup__item" ng-if="referencedModelCriteriaObjectValues.length == 0">
																			No Records Found
																		</li>
																	</ul>
																</div>
															</div>
														</td>
														<td ng-if="(modelCriteria.valueType | uppercase) == 'MODEL'">
															<select class="slds-select" ng-model="modelCriteria.value" id="modelCriteriaValue" name="modelCriteriaValue" ng-options="lookupRecordCriteriaModelValue.fieldAPIName as lookupRecordCriteriaModelValue.fieldName for lookupRecordCriteriaModelValue in (lookupRecordCriteriaModelValues | getlookupCriteriaFieldByModel: modelCriteria.modelName)" ng-if="modelCriteria.fieldAPIName != ''">
															</select>
														</td>
														<td ng-if="(modelCriteria.valueType | uppercase) == 'GLOBAL VARIABLE'">
															<select class="slds-select" ng-model="modelCriteria.value" id="modelCriteriaValue" name="modelCriteriaValue" ng-options="key as key for (key,value) in (globalVarMap | getGlobalVarMap: modelCriteria.referencedObjectName)" ng-if="modelCriteria.fieldAPIName != ''">
															</select>
														</td>
														
														<td>
															<button class="slds-button" ng-click = "removeCriteriaCondition($index);" ng-if="($index != modelCriteriaList.length-1)"><span class="glyphicon glyphicon-remove"></span></button>
														</td>
													</tr>
												</tbody>
											</table>
										</div>
									</div>
								</div>
								<div class="slds-modal__footer">
									<div class="slds-x-small-buttons--horizontal">
										<button class="slds-button slds-button--neutral" ng-click="hideCreateNewModel();">Cancel</button>
										<button class="slds-button slds-button--neutral slds-button--brand" ng-click="addModel();">Save</button>
									</div>
								</div>
							</div>
						</div>
						<div class="slds-backdrop slds-backdrop--open"></div>
					</div>
					
					<div id="configureDependentPicklistModel" ng-show="configureDependentDropdown == true" class="hide">
						<div aria-hidden="false" role="dialog" class="slds-modal slds-fade-in-open">
							<div class="slds-modal__container">
								<div class="slds-modal__header">
									<h2 class="slds-text-heading--medium">Configure Dependent Picklist</h2>
									<button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="hideConfigureDependentDropdown();">
										<span class="glyphicon glyphicon-remove"></span>
										<span class="slds-assistive-text">Close</span>
									</button>
								</div>
								<div class="slds-modal__content">
									<div>
										<div class="slds-form-element">
											<label class="slds-form-element__label">Controlling Field Value :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" ng-model="selectedValue" ng-options="value as key for (key,value) in dropdownDependentMap[selectedFieldForConfigure]">
												</select>
											</div>
										</div>
										<div class="slds-form-element" ng-if="selectedValue.length > 0">
											<label class="slds-form-element__label"> Dependent Value :</label>
										</div>
										<div class="slds-form-element" style="overflow:hidden;">
											<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12" ng-repeat="dependent in selectedValue">
												<label class="slds-checkbox my-custom-label" for="dependent{{$index}}">
													<input name="dependent" type="checkbox" id="dependent{{$index}}" ng-model="dependent.isChecked"/>
													<span class="slds-checkbox--faux my-custom-checkbox"></span>
													<span class="slds-form-element__label my-custom-text">{{dependent.value}}</span>
												</label>
											</div>
										</div>
										<div class="slds-form-element">
											<label class="slds-form-element__label" >Configured Values</label>
											<div class="slds-scrollable--x">
												<table class="slds-table slds-table--bordered">
													<thead>
														<tr class="slds-text-heading--label">
															<th scope="col">
																<span class="slds-truncate">Controlling Value</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Dependent Value</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<tr class="slds-hint-parent" ng-repeat="(key, value) in dropdownDependentMap[selectedFieldForConfigure]">
															<td>{{key}}</td>
															<td><span ng-repeat="v in value|filter:{isChecked:true}">{{v.value}} <span ng-show="!$last">, &nbsp;</span></span></td>
														</tr>
													</tbody>
												</table>
											</div>
										</div>
									</div>
								</div>
								<div class="slds-modal__footer">
									<div class="slds-x-small-buttons--horizontal">
										<button class="slds-button slds-button--neutral" ng-click="hideConfigureDependentDropdown();">Cancel</button>
										<button class="slds-button slds-button--neutral slds-button--brand" ng-click="updatePicklistDependencyMap(true, selectedFieldForConfigure);">Save</button>
									</div>
								</div>
							</div>
						</div>
						<div class="slds-backdrop slds-backdrop--open"></div>
					</div>
					
					<!-- Update Field Information on section -->	
					<div id="updateFieldInfo" ng-show="isShowUpdateField == true" class="hide">
						<div aria-hidden="false" role="dialog" class="slds-modal slds-modal--large slds-fade-in-open">
							<div class="slds-modal__container">
								<div class="slds-modal__header">
									<h2 class="slds-text-heading--medium" ng-if="selectedField.fieldDisplayType.toUpperCase() != 'UPLOAD'">Field Configuration </h2>
									<h2 class="slds-text-heading--medium" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'">Upload Configuration </h2>
									<button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="hideUpdateFieldInfo();">
										<span class="glyphicon glyphicon-remove"></span>
										<span class="slds-assistive-text">Close</span>
									</button>
								</div>
								<div class="slds-modal__content">
									<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
										<!-- Field Name (Readonly) -->
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() != 'UPLOAD'">
											<label class="slds-form-element__label" for="selectedFieldName">Field Name :</label>
											<div class="slds-form-element__control">
												<input type="text" ng-model="selectedField.fieldName" class="slds-input" id="selectedFieldName" name="selectedFieldName" ng-readonly="true" />
											</div>
										</div>
										<!-- Field API Name (Readonly) -->
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() != 'UPLOAD'">
											<label class="slds-form-element__label" for="selectedfieldAPIName">Field API Name :</label>
											<div class="slds-form-element__control">
												<input type="text" ng-model="selectedField.fieldAPIName" class="slds-input" id="selectedfieldAPIName" name="selectedfieldAPIName" ng-readonly="true" />
											</div>
										</div>
										<!-- Field Label Text -->
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="selectedfieldLabelName">Field Label :</label>
											<div class="slds-form-element__control">
												<input type="text" ng-model="selectedField.label" class="slds-input" id="selectedfieldLabelName" name="selectedfieldLabelName"/>
											</div>
										</div>
										<!-- Field Required / Not Required Drop Down -->
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="fieldRequired">Is Required :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" ng-model="selectedField.required" id="fieldRequired" name="fieldRequired" ng-options="o.value as o.label for o in [{ label: 'True', value: 'true' }, { label: 'False', value: 'false' }, { label: 'Condition', value: 'condition' }]" ng-change="updateRequiredConditionCriteria();">
											  	</select>
											</div>
										</div>
										<!-- Field Required / Not Required Drop Down -->
										<div class="slds-form-element" ng-if="selectedField.required == 'true' || selectedField.required == 'condition'">
											<label class="slds-form-element__label" for="requiredSymbol">Required Symbol :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" ng-model="selectedField.requiredSymbol" id="requiredSymbol" name="requiredSymbol" ng-options="o as o for o in requiredSymbols">
											  	</select>
											</div>
										</div>
										<!-- Rendered Condition Div -->
										<div class="slds-form-element" ng-if="selectedField.required == 'condition'">
											<label class="slds-form-element__label" for="RequiredCondition">Required Condition :</label>
											<div class="slds-scrollable--x">
												<table class="slds-table slds-table--bordered">
													<thead>
														<tr class="slds-text-heading--label">
															<th scope="col">
																<span class="slds-truncate">Sr. No</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Model</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Criteria Field</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Operator</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Value</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Action</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<tr class="slds-hint-parent" ng-repeat="requiredCriteria in requiredCriteriaList">
															<td>
																{{$index + 1}}
															</td>
															<td>
																<select class="slds-select" ng-model="requiredCriteria.modelName" id="requiredCriteriaModelName" name="requiredCriteriaModelName" ng-options="selectedModel.modelName as selectedModel.modelName for selectedModel in selectedModelList" ng-change="addMoreRequiredCondition(); requiredCriteria.fieldAPIName = '';">
																	<option value="">--None--</option>
																</select>
															</td>
															<td>
																<select class="slds-select" ng-model="requiredCriteria.fieldAPIName" id="requiredCriteriaField" name="requiredCriteriaField" ng-options="c.fieldAPIName as c.fieldName for c in (requiredCriterialFields | getlookupCriteriaFieldByModel: requiredCriteria.modelName)" ng-if="requiredCriteria.modelName != ''" ng-change="setRequiredFieldType($index, requiredCriteria.modelName, requiredCriteria.fieldAPIName); requiredCriteria.value = '';">
																</select>
															</td>
															<td>
																<select class="slds-select" ng-model="requiredCriteria.fieldOperator" id="requiredCriteriaOperator" name="requiredCriteriaOperator" ng-options="op for op in typeOperatorListMap[requiredCriteria.fieldDisplayType]" ng-if="requiredCriteria.fieldAPIName != ''">
																</select>
															</td>
															<td ng-if="(requiredCriteria.fieldDisplayType != 'REFERENCE' && requiredCriteria.fieldDisplayType != 'PICKLIST')">
																<input class="slds-input" ng-model="requiredCriteria.value" id="requiredCriteriaValue" name="requiredCriteriaValue" ng-if="requiredCriteria.fieldAPIName != ''"/>
															</td>
															<td ng-if="requiredCriteria.fieldDisplayType == 'PICKLIST'">
																<div class="slds-button-group demo-space" role="group">
																	<input type="text" class="slds-input" ng-model="requiredCriteria.value" id="requiredCriteriaValue" name="requiredCriteriaValue" ng-if="requiredCriteria.fieldAPIName != ''" />
																	<button class="slds-button slds-button--neutral lookup-button" style="border: none;">
																		<img src="{!URLFOR($Resource.lookupImage)}" style="width:25px;cursor: pointer;" class="lookup-img" ng-click="openRequiredLookupPopup($index);"/>
																	</button>
																</div>
															</td>															
															<td ng-if="requiredCriteria.fieldDisplayType == 'REFERENCE'">
																<div class="slds-lookup" data-select="multi" data-scope="single" data-typeahead="true">
																	<div class="slds-form-element">
																		<div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">
																			<svg aria-hidden="true" class="slds-input__icon">
																				<use xlink:href="{!URLFOR($Resource.SLDS0121, '/assets/icons/utility-sprite/svg/symbols.svg#search')}"></use>
																			</svg>
																			<input id="required-lookup{{$index}}" class="slds-input" type="text" aria-autocomplete="list" role="combobox" aria-expanded="true" aria-activedescendant="" ng-model="requiredCriteria.lookupstring" ng-keyup="getRequiredLookupRecords($index, requiredCriteria.referencedObjectName, requiredCriteria.lookupstring);"/>
																		</div>
																	</div>
																	<div class="slds-pill__container no-border slds-show" ng-if="requiredCriteria.value != ''">
																		<a href="#" class="slds-pill" ng-repeat="c in requiredCriteria.value | split">
																			<span class="slds-pill__label">{{(requiredCriteria.displayValue | split)[$index]}}</span>
																			<button class="slds-button slds-button--icon-bare slds-pill__remove" ng-click="removeSelectedRequiredLookupValue($index, $parent.$index)">
																				<svg aria-hidden="true" class="slds-button__icon">
																					<use xlink:href="{!URLFOR($Resource.SLDS0121, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
																				</svg>
																				<span class="slds-assistive-text">Remove</span>
																			</button>
																		</a>
																	</div>
																	<div class="slds-lookup__menu hide" role="listbox" id="requiredLookupCriteriaList-{{$index}}">
																		<ul class="slds-lookup__list" role="presentation">
																			<li class="slds-lookup__item" ng-repeat="referencedRequiredObjectValue in referencedRequiredObjectValues">
																				<a href="#" role="option" ng-click="selectReferencedRequiredObjectValue($parent.$index, referencedRequiredObjectValue.Id, referencedRequiredObjectValue.Name)">
																					{{referencedRequiredObjectValue.Name}}
																				</a>
																			</li>
																			<li class="slds-lookup__item" ng-if="referencedRequiredObjectValues.length == 0">
																				No Records Found
																			</li>
																		</ul>
																	</div>
																</div>
															</td>
															<td>
																<button class="slds-button" ng-click="removeRequiredCondition($index);" ng-if="($index != requiredCriteriaList.length-1)"><span class="glyphicon glyphicon-remove"></span></button>
															</td>
														</tr>
													</tbody>
												</table>
											</div>
										</div>
										<div class="slds-form-element" ng-if="selectedField.required == 'condition'">
											<label class="slds-form-element__label" for="requiredExpression">Required Expression :</label>
											<div class="slds-form-element__control">
												<input type="text" class="slds-input" ng-model="selectedField.requiredExpression" id="requiredExpression" name="requiredExpression"/>
											</div>
										</div>
										<div class="slds-form-element" ng-if="selectedField.required == 'condition'">
											<label class="slds-form-element__label placeholder-label">CREATE CONDITIONS USING ANDS AND ORS. EXAMPLE: (1 AND 2) OR 3</label>
										</div>
										<!-- Rendered field -->
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="renderDropdown">Rendered :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" ng-model="selectedField.rendered" id="renderDropdown" name="renderDropdown" ng-options="o.value as o.label for o in [{ label: 'True', value: true }, { label: 'Condition', value: false }]" ng-change="updateConditionCriteria();">
											  	</select>
											</div>
										</div>
										<!-- Rendered Condition Div -->
										<div class="slds-form-element" ng-if="!selectedField.rendered">
											<label class="slds-form-element__label" for="RenderedCondition">Rendered Condition :</label>
											<div class="slds-scrollable--x">
												<table class="slds-table slds-table--bordered">
													<thead>
														<tr class="slds-text-heading--label">
															<th scope="col">
																<span class="slds-truncate">Sr. No</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Model</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Criteria Field</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Operator</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Value</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Action</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<tr class="slds-hint-parent" ng-repeat="renderCriteria in renderCriteriaList">
															<td>
																{{$index + 1}}
															</td>
															<td>
																<select class="slds-select" ng-model="renderCriteria.modelName" id="renderCriteriaModelName" name="renderCriteriaModelName" ng-options="selectedModel.modelName as selectedModel.modelName for selectedModel in selectedModelList" ng-change="addMoreRenderedCondition(); renderCriteria.fieldAPIName = '';">
																	<option value="">--None--</option>
																</select>
															</td>
															<td>
																<select class="slds-select" ng-model="renderCriteria.fieldAPIName" id="renderCriteriaField" name="renderCriteriaField" ng-options="c.fieldAPIName as c.fieldName for c in (renderCriterialFields | getlookupCriteriaFieldByModel: renderCriteria.modelName)" ng-if="renderCriteria.modelName != ''" ng-change="setFieldType($index, renderCriteria.modelName, renderCriteria.fieldAPIName); renderCriteria.value = '';">
																</select>
															</td>
															<td>
																<select class="slds-select" ng-model="renderCriteria.fieldOperator" id="renderCriteriaOperator" name="renderCriteriaOperator" ng-options="op for op in typeOperatorListMap[renderCriteria.fieldDisplayType]" ng-if="renderCriteria.fieldAPIName != ''">
																</select>
															</td>
															<td ng-if="(renderCriteria.fieldDisplayType != 'REFERENCE' && renderCriteria.fieldDisplayType != 'PICKLIST')">
																<input class="slds-input" ng-model="renderCriteria.value" id="renderCriteriaValue" name="renderCriteriaValue" ng-if="renderCriteria.fieldAPIName != ''"/>
															</td>
															<td ng-if="renderCriteria.fieldDisplayType == 'PICKLIST'">
															    <div class="slds-button-group demo-space" role="group">
															    	<input type="text" class="slds-input" ng-model="renderCriteria.value" id="renderCriteriaValue" name="renderCriteriaValue" ng-if="renderCriteria.fieldAPIName != ''" />
															    	<button class="slds-button slds-button--neutral lookup-button" style="border: none;">
															    		<img src="{!URLFOR($Resource.lookupImage)}" style="width:25px;cursor: pointer;" class="lookup-img" ng-click="openLookupPopup($index);"/>
															    	</button>
															    </div>
															</td>															
															<td ng-if="renderCriteria.fieldDisplayType == 'REFERENCE'">
																<div class="slds-lookup" data-select="multi" data-scope="single" data-typeahead="true">
																	<div class="slds-form-element">
																		<div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">
																			<svg aria-hidden="true" class="slds-input__icon">
																				<use xlink:href="{!URLFOR($Resource.SLDS0121, '/assets/icons/utility-sprite/svg/symbols.svg#search')}"></use>
																			</svg>
																			<input id="lookup{{$index}}" class="slds-input" type="text" aria-autocomplete="list" role="combobox" aria-expanded="true" aria-activedescendant="" ng-model="renderCriteria.lookupstring" ng-keyup="getLookupRecords($index, renderCriteria.referencedObjectName, renderCriteria.lookupstring);"/>
																		</div>
																	</div>
																	<div class="slds-pill__container no-border slds-show" ng-if="renderCriteria.value != ''">
																		<a href="#" class="slds-pill" ng-repeat="c in renderCriteria.value | split">
																			<span class="slds-pill__label">{{(renderCriteria.displayValue | split)[$index]}}</span>
																			<button class="slds-button slds-button--icon-bare slds-pill__remove" ng-click="removeSelectedLookupValue($index, $parent.$index)">
																				<svg aria-hidden="true" class="slds-button__icon">
																					<use xlink:href="{!URLFOR($Resource.SLDS0121, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
																				</svg>
																				<span class="slds-assistive-text">Remove</span>
																			</button>
																		</a>
																	</div>
																	<div class="slds-lookup__menu hide" role="listbox" id="lookupCriteriaList-{{$index}}">
																		<ul class="slds-lookup__list" role="presentation">
																			<li class="slds-lookup__item" ng-repeat="referencedObjectValue in referencedObjectValues">
																				<a href="#" role="option" ng-click="selectReferencedObjectValue($parent.$index, referencedObjectValue.Id, referencedObjectValue.Name)">
																					{{referencedObjectValue.Name}}
																				</a>
																			</li>
																			<li class="slds-lookup__item" ng-if="referencedObjectValues.length == 0">
																				No Records Found
																			</li>
																		</ul>
																	</div>
																</div>
															</td>
															<td>
																<button class="slds-button" ng-click="removeRenderedCondition($index);" ng-if="($index != renderCriteriaList.length-1)"><span class="glyphicon glyphicon-remove"></span></button>
															</td>
														</tr>
													</tbody>
												</table>
											</div>
										</div>
										<div class="slds-form-element" ng-if="!selectedField.rendered">
											<label class="slds-form-element__label" for="renderedExpression">Rendered Expression :</label>
											<div class="slds-form-element__control">
												<input type="text" class="slds-input" ng-model="selectedField.renderedExpression" id="renderedExpression" name="renderedExpression" />
											</div>
										</div>
										<div class="slds-form-element" ng-if="!selectedField.rendered">
											<label class="slds-form-element__label placeholder-label">CREATE CONDITIONS USING ANDS AND ORS. EXAMPLE: (1 AND 2) OR 3 :</label>
										</div>
										<!-- Hover Text Configure -->
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="hoverText">Hover Text :</label>
											<div class="slds-form-element__control">
												<input type="text" class="slds-input" ng-model="selectedField.hoverText" id="hoverText" name="hoverText" />
											</div>
										</div>
										<!-- Field Upload Type is Multiple -->
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'">
											<label class="slds-form-element__label" for="isMultiple">Multiple :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" ng-model="selectedField.multiple" id="isMultiple" name="isMultiple" ng-options="o.value as o.label for o in [{ label: 'True', value: true }, { label: 'False', value: false }]">
											  	</select>
											</div>
										</div>
										<!-- Maximum File Upload Size -->
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'">
											<label class="slds-form-element__label" for="maximumFileSize">Maximum File Size :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" ng-model="selectedField.maximumsize" id="maximumFileSize" name="maximumFileSize" ng-options="value as key for (key, value) in uploadFileSizeList">
											  	</select>
											</div>
										</div>
										<!-- Supported Upload File Format -->
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'">
											<label class="slds-form-element__label">Supported File Format :</label>
										</div>
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'" style="overflow:hidden;">
											<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12" ng-repeat="uploadSupportedFile in uploadSupportedFilesList">
												<label class="slds-checkbox my-custom-label" for="uploadSupportedFile{{$index}}">
													<input name="uploadSupportedFile" type="checkbox" id="uploadSupportedFile{{$index}}" ng-model="uploadSupportedFile.isChecked" ng-change="updateAllowContentType();"/>
													<span class="slds-checkbox--faux my-custom-checkbox"></span>
													<span class="slds-form-element__label my-custom-text">{{uploadSupportedFile.value}}</span>
												</label>
											</div>
										</div>
									</div>
									<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
										<!-- Field Place Holder -->
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="selectedfieldPlaceHolder">Element Placeholder Text :</label>
											<div class="slds-form-element__control">
												<input type="text" ng-model="selectedField.placeholderText" class="slds-input" id="selectedfieldPlaceHolder" name="selectedfieldPlaceHolder"/>
											</div>
										</div>
										<!-- Field Instruction -->
										<div class="slds-form-element">
											<label class="slds-form-element__label" for="selectedfieldInstruction">Instruction :</label>
											<div class="slds-form-element__control">
												<!-- <input type="text" ng-model="selectedField.instructionText" class="slds-input" id="selectedfieldInstruction" name="selectedfieldInstruction" ng-change="updateInstructionPosition();"/> -->
												<wysiwyg textarea-id="selectedfieldInstruction" textarea-class="form-control" textarea-height="180px" textarea-name="selectedfieldInstruction" ng-model="selectedField.instructionText" textarea-menu="[['bold', 'italic', 'underline', 'strikethrough', 'subscript', 'superscript'], ['font'], ['font-size'], ['font-color', 'hilite-color'], ['remove-format'], ['ordered-list', 'unordered-list', 'outdent', 'indent'], ['left-justify', 'center-justify', 'right-justify'], ['code', 'quote', 'paragraph'], ['link', 'image']]" ng-change="updateInstructionPosition();">
											     </wysiwyg>
											</div>
										</div>
										<!--  Instruction Position -->
										<div class="slds-form-element" ng-if="(selectedField.instructionText | htmlToPlaintext) != ''">
											<label class="slds-form-element__label" for="selectedfieldInstruction">Instruction Position :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" ng-model="selectedField.instructionTextPosition" id="selectedfieldInstruction" name="selectedfieldInstruction" ng-options="(fieldInstructionPosition | uppercase) as fieldInstructionPosition for fieldInstructionPosition in fieldInstructionPositions">
													<option value="" ng-if="false"></option>
											  	</select> 
											</div>
										</div>
										<!-- Upload Souce Id -->
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'">
											<label class="slds-form-element__label" for="uploadParentSource">Upload Parent Source :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" ng-model="selectedField.parentIdSource" id="uploadParentSource" name="uploadParentSource" ng-options="(uploadSource | uppercase) as uploadSource for uploadSource in uploadSourceListString" ng-change="updateParentIdSource();">
											  	</select>
											</div>
										</div>
										<!-- upload Parent Id -->
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD'">
											<label class="slds-form-element__label" for="uploadParentId" ng-if="selectedField.parentIdSource.toUpperCase() == 'MODEL'">Model :</label>
											<label class="slds-form-element__label" for="uploadParentId" ng-if="selectedField.parentIdSource.toUpperCase() == 'PARAM'">Parameter Name :</label>
											<label class="slds-form-element__label" for="uploadParentId" ng-if="selectedField.parentIdSource.toUpperCase() == 'STATIC'">Record Id :</label>
											<div class="slds-form-element__control" ng-if="selectedField.parentIdSource.toUpperCase() == 'MODEL'">
												<select class="slds-select" ng-model="selectedField.parentId" id="uploadParentId" name="uploadParentId" ng-options="model.modelName as model.modelName for model in selectedModelList">
											  	</select>
											</div>
											<div class="slds-form-element__control" ng-if="selectedField.parentIdSource.toUpperCase() == 'PARAM'">
												<input type="text" ng-model="selectedField.parentId" class="slds-input" id="uploadParentId" name="uploadParentId" />
											</div>
											<div class="slds-form-element__control" ng-if="selectedField.parentIdSource.toUpperCase() == 'STATIC'">
												<input type="text" ng-model="selectedField.parentId" class="slds-input" id="uploadParentId" name="uploadParentId" placeholder="Define 18 digit record id." />
											</div>
										</div>
										<!-- Change Field Display Type (Show When Field is Reference Type) -->
										<div class="slds-form-element" ng-if="(selectedField.fieldDisplayType | uppercase) == 'REFERENCE'">
											<label class="slds-form-element__label" for="fieldDisplayType">Field Display Type :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" ng-model="selectedField.type" id="fieldDisplayType" name="fieldDisplayType" ng-options="(referenceFieldTypeString | uppercase) as referenceFieldTypeString for referenceFieldTypeString in referenceFieldTypeStringList" ng-change="updateControllingFieldValue();" ng-disabled="selectedField.isdependentField">
											  	</select>
											</div>
										</div>
										<!-- Record Criteria -->
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE'">
											<label class="slds-form-element__label">Record Criteria :</label>
											<div class="slds-scrollable--x">
												<table class="slds-table slds-table--bordered">
													<thead>
														<tr class="slds-text-heading--label">
															<th scope="col">
																<span class="slds-truncate">Criteria Field</span>
															</th>
															<th scope="col" ng-if="lookupRecordCriteria.fieldAPIName != ''">
																<span class="slds-truncate">Operator</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Value Type</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Model</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Value</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Action</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<tr class="slds-hint-parent" ng-repeat="lookupRecordCriteria in lookupRecordCriteriaList">
															<td>
																<select class="slds-select" ng-model="lookupRecordCriteria.fieldAPIName" id="lookupRecordCriteriaField" name="lookupRecordCriteriaField" ng-options="c.fieldAPIName as c.fieldName for c in (lookupRecordCriteriaFieldList | removePreviousSelectedValues:lookupRecordCriteria.fieldAPIName:lookupRecordCriteriaList)" ng-change="addMoreCondition();">
																</select>
															</td>
															<td>
																<select class="slds-select" ng-model="lookupRecordCriteria.fieldOperator" id="lookupRecordCriteriaOperator" name="lookupRecordCriteriaOperator" ng-options="op for op in operatorListString" ng-if="lookupRecordCriteria.fieldAPIName != ''">
																</select>
															</td>
															<td>
																<select class="slds-select" ng-model="lookupRecordCriteria.valueType" id="lookupRecordCriteriaValueType" name="lookupRecordCriteriaValueType" ng-options="(uploadSource|uppercase) as uploadSource for uploadSource in uploadSourceListString" ng-change="getLookupRecordCriteriaModelValues(); lookupRecordCriteria.value = ''; lookupRecordCriteria.modelName = ''" ng-if="lookupRecordCriteria.fieldAPIName != ''">
																</select>
															</td>
															<td>
																<select class="slds-select" ng-model="lookupRecordCriteria.modelName" id="lookupRecordCriteriaModelName" name="lookupRecordCriteriaModelName" ng-options="selectedModel.modelName as selectedModel.modelName for selectedModel in selectedModelList" ng-if="lookupRecordCriteria.fieldAPIName != '' && (lookupRecordCriteria.valueType | uppercase) == 'MODEL'" ng-change="lookupRecordCriteria.value = '';">
																</select>
															</td>
															<td ng-if="(lookupRecordCriteria.valueType | uppercase) != 'MODEL'">
																<input class="slds-input" ng-model="lookupRecordCriteria.value" id="lookupRecordCriteriaValue" name="lookupRecordCriteriaValue" ng-if="lookupRecordCriteria.fieldAPIName != ''"/>
															</td>
															<td ng-if="(lookupRecordCriteria.valueType | uppercase) == 'MODEL'">
																<select class="slds-select" ng-model="lookupRecordCriteria.value" id="lookupRecordCriteriaValue" name="lookupRecordCriteriaValue" ng-options="lookupRecordCriteriaModelValue.fieldAPIName as lookupRecordCriteriaModelValue.fieldName for lookupRecordCriteriaModelValue in (lookupRecordCriteriaModelValues | getlookupCriteriaFieldByModel: lookupRecordCriteria.modelName)" ng-if="lookupRecordCriteria.fieldAPIName != ''">
																</select>
															</td>
															<td>
																<button class="slds-button" ng-click="removeCondition($index);" ng-if="$index != lookupRecordCriteriaList.length-1"><span class="glyphicon glyphicon-remove"></span></button>
															</td>
														</tr>			
													</tbody>
												</table>
											</div>
										</div>
										<!-- is FirstValue Blank -->
										<div class="slds-form-element" ng-if="(selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE' && selectedField.type.toUpperCase() == 'PICKLIST') || (selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST')">
											<label class="slds-form-element__label" for="isFirstValueBlank">Is FirstValue Blank :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" ng-model="selectedField.isFirstValueBlank" id="isFirstValueBlank" name="isFirstValueBlank" ng-options="o.value as o.label for o in [{ label: 'True', value: true }, { label: 'False', value: false }]">
											  	</select>
											</div>
										</div>
										<!-- Is Controlling Field -->
										<div class="slds-form-element" ng-if="(selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE' && selectedField.type.toUpperCase() == 'PICKLIST') || (selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST')">
											<label class="slds-form-element__label" for="isControllingField">Is Controlling Field :</label>
											<div class="slds-form-element__control">
												<select class="slds-select" ng-model="selectedField.isControllingField" id="isControllingField" name="isControllingField" ng-options="o.value as o.label for o in [{ label: 'True', value: true }, { label: 'False', value: false }]" ng-change="updateControllingFields();">
											  	</select>
											</div>
										</div>
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST' && selectedField.isControllingField">
											<label class="slds-form-element__label">Dependent Fields :</label>
										</div>
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST' && selectedField.isControllingField" style="overflow:hidden;">
											<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12" ng-repeat="referenceField in referenceFieldList">
												<label class="slds-checkbox my-custom-label" for="referenceField{{$index}}">
													<input name="checkbox" type="checkbox" id="referenceField{{$index}}" ng-model="referenceField.isChecked" ng-init="" ng-change="updateCriteriaMap($index, 'PICKLIST');"/>
													<span class="slds-checkbox--faux my-custom-checkbox"></span>
													<span class="slds-form-element__label my-custom-text">{{referenceField.fieldName}}</span>
												</label>
											</div>
										</div>
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST' && selectedField.isControllingField">
											<label class="slds-form-element__label" >Dependency Table</label>
											<div class="slds-scrollable--x">
												<table class="slds-table slds-table--bordered">
													<thead>
														<tr class="slds-text-heading--label">
															<th scope="col">
																<span class="slds-truncate">Dependent Field</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Mapping Field</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<tr class="slds-hint-parent" ng-repeat="(key,value) in fieldCriteriaMap">
															<td data-label="contact">
																<span class="slds-truncate">{{getFieldNameByFieldKey(key)}}</span>
															</td>
															<td class="slds-row-action">
																<button class="slds-button slds-button--brand create-model-button" ng-click="showConfigureDependentDropdown(key);">Configure Dropdown</button>
															</td>
														</tr>
													</tbody>
												</table>
											</div>
										</div>
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE' && selectedField.isControllingField">
											<label class="slds-form-element__label">Dependent Fields :</label>
										</div>
										<!-- Dependent Field for Reference -->
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE' && selectedField.isControllingField" style="overflow:hidden;">
											<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12" ng-repeat="referenceField in referenceFieldList">
												<label class="slds-checkbox my-custom-label" for="referenceField{{$index}}">
													<input name="checkbox" type="checkbox" id="referenceField{{$index}}" ng-model="referenceField.isChecked" ng-init="" ng-change="updateCriteriaMap($index, 'REFERENCE');"/>
													<span class="slds-checkbox--faux my-custom-checkbox"></span>
													<span class="slds-form-element__label my-custom-text">{{referenceField.fieldName}}</span>
												</label>
											</div>
										</div>
										<div class="slds-form-element" ng-if="selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE' && selectedField.isControllingField">
											<label class="slds-form-element__label" >Dependency Table</label>
											<div class="slds-scrollable--x">
												<table class="slds-table slds-table--bordered">
													<thead>
														<tr class="slds-text-heading--label">
															<th scope="col">
																<span class="slds-truncate">Dependent Field</span>
															</th>
															<th scope="col">
																<span class="slds-truncate">Mapping Field</span>
															</th>
														</tr>
													</thead>
													<tbody>
														<tr class="slds-hint-parent" ng-repeat="(key,value) in fieldCriteriaMap">
															<td data-label="contact">
																<span class="slds-truncate">{{getFieldNameByFieldKey(key)}}</span>
															</td>
															<td class="slds-row-action">
																<select class="slds-select" ng-model="fieldCriteriaMap[key]" ng-options="field.fieldAPIName as field.fieldName for field in fieldCriteriaListMap[key]">
											  					</select>
															</td>
														</tr>
													</tbody>
												</table>
											</div>
										</div>
									</div>
								</div>
								<!-- Update and Cancel Button Div -->
								<div class="slds-modal__footer">
									<div class="slds-x-small-buttons--horizontal">
										<button class="slds-button slds-button--neutral" ng-click="hideUpdateFieldInfo();">Cancel</button>
										<button class="slds-button slds-button--neutral slds-button--brand" ng-click="addUpdateSelectedField(false);" ng-if="isInsert == true">Add</button>
										<button class="slds-button slds-button--neutral slds-button--brand" ng-click="addUpdateSelectedField(true);" ng-if="isInsert == false">Update</button>
									</div>
								</div>
							</div>
						</div>
						<div class="slds-backdrop slds-backdrop--open"></div>
					</div>
				</apex:outputPanel>
			</div>
		</body>
		
		<script>
			// Creating Angular App Modele and Injecting the wysiwyg for Rich Text and Color Picker for Text Color.
			var createPortalPageApp = angular.module("createPortalPageApp", ['colorpicker.module', 'wysiwyg.module']);
			
			// CreatePortalPageController Page Controller (Main Controller)
			createPortalPageApp.controller('CreatePortalPageController', function($scope, $http, $sce, $q, $timeout, createPortalPageService, $filter){
			
				$scope.globalVarMap = {!globalVarMapString};
				
				// Create a List of value from Global Var Map ( Creating once a list then assign it to angular variable due to reduce digest cycle count.)
				var tempGlobalVarMapValueList = [];
				angular.forEach($scope.globalVarMap, function(value, key) {
					tempGlobalVarMapValueList.push(value);
				});
				
				$scope.globalVarMapValues = tempGlobalVarMapValueList.join(',');
				
				
				// Page Header Variables.
				$scope.pageHeader = {};
				$scope.isShowCreatePageHeader = false;
				$scope.pageHeaderObject = {!pageHeader};
				
				// Model Variables.
				$scope.isShowCreateNewModel = false;
				$scope.objectList = {!objectFieldListString};
				$scope.fieldVal = [];
				$scope.fields = $scope.objectList[0];
				$scope.selectedModelList = {!selectedModelListString};
				$scope.modelName = '';
				
				// Add Model Name & Field Display Type on Each Field to Selected Model's field List. 
				angular.forEach($scope.selectedModelList, function(model) {
					var objectModel;
					// Iterating on Object List to Get the Current Object.
					angular.forEach($scope.objectList, function(objectValue) {
						if(objectValue.objectAPIName == model.objectAPIName) {
							objectModel = angular.copy(objectValue); // Setting the current Object Value.
						}
					});
					angular.forEach(model.field, function(field) {
						field.modelName = model.modelName;
						angular.forEach(objectModel.fieldList, function(fieldValue) {
							if(fieldValue.fieldAPIName == field.fieldAPIName) {
								field.fieldDisplayType = fieldValue.fieldDisplayType; // Set field display type to model fields Not Storing on Backend in Model.
								field.isBackendDependentField = fieldValue.isBackendDependentField;
								field.backendControllingFieldName = field.isBackendDependentField ? field.modelName + '----' + fieldValue.backendControllingFieldName : fieldValue.backendControllingFieldName;
							}
						});
					});
				});
				
				// Section Variables.
				$scope.isShowCreateNewSection = false;
				$scope.section = {};
				$scope.sectionMap = {!sectionWrapperMapString};
				$scope.sectionOrderList = [];
				
				// Creating a Section Order List from Map to Maintain Section Order.
				angular.forEach($scope.sectionMap, function(value, key) {
					$scope.sectionOrderList.push(key);
				});
				
				// Fields Variables
				$scope.fieldInstructionPositions = {!fieldInstructionPositionListString};
				$scope.referenceFieldTypeStringList = {!referenceFieldTypeStringList};
				$scope.requiredSymbols = {!requiredSymbols};
				$scope.typeOperatorListMap = {!typeOperatorListMap};
				
				// Upload Source List Values 
				$scope.uploadSourceListString = {!uploadSourceListString};
				$scope.criteriaConditionSourceListString = {!criteriaConditionSourceListString};
				$scope.uploadDataList = [{value:"Upload"}];
				$scope.uploadFileSizeList = {!uploadFileSizeList};
				
				// Update Field Varibles
				$scope.isShowUpdateField = false;
				$scope.selectedField = {};
				
				// Operator List
				$scope.operatorListString = {!operatorListString};
				
				var mapKeyToUpdateFieldInfo;
				var fieldIndexToUpdateInfo;
				var previousDependentField;
				
				// Page Header Function Starts
				
				// Function to Show Create New Page Header Popup to Set or Update Page Page Header
				$scope.showCreateNewPageHeader = function() {
					if(undefined != $scope.pageHeaderObject.title && $scope.pageHeaderObject.title != null) {
						$scope.pageHeader = angular.copy($scope.pageHeaderObject); // Copy Header Object to Local Object that will be modify.
					}
					$scope.isShowCreatePageHeader = true;
				}
				
				// Function to Hide Create New Page Header Popup
				$scope.hideCreateNewPageHeader = function() {
					$scope.pageHeader = {};
					$scope.isShowCreatePageHeader = false;
				}
				
				// Function to Create or Update New Page Header.
				$scope.createPageHeader = function(){
					if($scope.pageHeader.title == null || $scope.pageHeader.title.trim() == '') {
						alert('Please enter page title');
					} else {
						$scope.pageHeaderObject = angular.copy($scope.pageHeader);
						$scope.hideCreateNewPageHeader();
					}
				}
				
				// Function to Remove Page Header Call on Remove Page Header Button.
				$scope.removePageHeader = function() {
					$scope.pageHeaderObject = {};
				}
				
				// Page Header Function Ends
				
				// Create Model Function Starts
				// Reset Selected fields value on Object Value Change.
				$scope.$watch('fields',function() {$scope.resetFieldSelection();});
				
				// Function to Show Create New Model Popup
				$scope.showCreateNewModel = function(isNew) {
					if(isNew) {
						$scope.resetFieldSelection();
						$scope.modelCriteriaList = [];
						$scope.fields = $scope.objectList[0];
					}
					$scope.isShowCreateNewModel = true;
					$scope.updateModelConditionCriteria();
				}
				
				// Function to hide Create Model Popup
				$scope.hideCreateNewModel = function() {
					$scope.modelName = '';
					$scope.isShowCreateNewModel = false;
				}
				
				//added by arpit = after merge
				//function to render html
				$scope.renderHtml = function(html_code){
				    return $sce.trustAsHtml(html_code);
				};
				//added by arpit = after merge
				
				// Function to Create New Model. Create New Model and append in the model List.
				$scope.addModel = function() { 
					// Required Field Validation Check to Create Model.
					if($scope.fields != null && $scope.fields.objectAPIName != null && $scope.fields.objectAPIName != '--Select--') { // Checking object Name Blank
						if($scope.checkedItems() != null && $scope.checkedItems().length > 0) { // Checking Model Fields List.
							if($scope.modelName != null && $scope.modelName.trim() != '') { // Checking Model Name Blank Check
								var isCreatedNew = true; // Variable to Indentify Model Name Exists or Not. 
								for(i=0; i<$scope.selectedModelList.length; i++) {
									if($scope.modelName.trim().toUpperCase() == $scope.selectedModelList[i].modelName.trim().toUpperCase()) {
										isCreatedNew = false; // Duplicate Model Name.
										break;
									}
								} // If Model Name is not used on page
								if(isCreatedNew) {
									// Creating a New Model Object and Pushing into List.
									var tempObject = new Object();
									tempObject.modelName = $scope.modelName;
									tempObject.objectName = $scope.fields.objectName;
									tempObject.objectAPIName = $scope.fields.objectAPIName;
									var tempModelCriteriaList = [];
									angular.forEach($scope.modelCriteriaList, function(modelCriteria) {
										if(undefined != modelCriteria.fieldAPIName && undefined != modelCriteria.fieldOperator && undefined != modelCriteria.valueType && undefined != modelCriteria.value
											&& modelCriteria.fieldAPIName != '' && modelCriteria.fieldOperator != '' && modelCriteria.valueType != '' && modelCriteria.value != '') {
											tempModelCriteriaList.push(modelCriteria);
										}
									});
									tempObject.condition = tempModelCriteriaList;
									tempObject.field = $scope.checkedItems();
									/*angular.forEach(tempObject.condition, function(conditionFieldObj) {
										var isFound = false;
										angular.forEach(tempObject.field, function(fieldObj) {
											if(fieldObj.fieldAPIName == conditionFieldObj.fieldAPIName) {
												isFound = true;
												return;
											}
										});
										if(!isFound) {
											var objectModel;
											angular.forEach($scope.objectList, function(objectValue) {
												if(objectValue.objectAPIName == tempObject.objectAPIName) {
													objectModel = angular.copy(objectValue);
													return;
												}											
											});
											angular.forEach(objectModel.fieldList, function(fieldObj) {
												if(fieldObj.fieldAPIName == conditionFieldObj.fieldAPIName) {
													var temp = fieldObj;
													temp.isChecked = true;
													tempObject.field.push(temp);
													return;
												}
											});
										}
									});*/
									for(x=0; x<tempObject.field.length; x++) {
										tempObject.field[x].modelName = tempObject.modelName;
										tempObject.field[x].backendControllingFieldName = tempObject.field[x].isBackendDependentField ? (tempObject.modelName + '----' + tempObject.field[x].backendControllingFieldName) : tempObject.field[x].backendControllingFieldName;
									}
									$scope.selectedModelList.push(tempObject);
									
									$timeout(function() {
										// Connecting Model Fields to The Section using Sortable to field Drag and Drop.
										createPortalPageService.connectSectionFieldWithModel({scope: $scope});								
									});
									
									// Hiding the Create new Model Popup.
									$scope.hideCreateNewModel();
								} else {
									alert('Model name already in use. Please enter different model name.');
								}
							} else {
								alert('Model name can not be left blank.');
							}
						} else {
							alert('Please select atleast one field.');
						}
					} else {
						alert('Please select object.');
					}
				}
				
				$scope.editModelDetails = function(selectedModel) {
					console.log(selectedModel);
				}
				
				// Method Returns the Object's Selected Fields Object.
				$scope.checkedItems = function() {
			        var checkedItems = [];
			        angular.forEach($scope.fields.fieldList, function(appObj, arrayIndex){
			            angular.forEach(appObj, function(cb, key) {
			            	if(key == "isChecked" && cb) {
			                	checkedItems.push(appObj);
		                	}
			            });
			        });
			        return checkedItems;
			    }
			    
			    // Method to Reset Field Selection on Object Value Change
			    $scope.resetFieldSelection = function() {
			        angular.forEach($scope.fields.fieldList, function(appObj, arrayIndex){
			            angular.forEach(appObj, function(cb, key) {
			            	if(key == "isChecked" && cb) {
			                	appObj.isChecked = false; // Setting is Checked False when User Checked a Field and Then Change object Value.
		                	}
			            });
			        });
			    }
			    
			    // Section Function Starts
			    
			    // Method to Show Create New Section Popup.
			    $scope.showCreateNewSection = function() {
					$scope.isShowCreateNewSection = true;
				}
				
				// Method to Hide Create New Section Popup.
				$scope.hideCreateNewSection = function() {
					$scope.section = {};
					$scope.isShowCreateNewSection = false;
				}
				
				// Method to Update Section.
				$scope.updateSectionDetail = function(sectionId) {
					$scope.section = angular.copy($scope.sectionMap[sectionId]);
					$scope.showCreateNewSection();
				}
				
				// Method to Remove Section from JSON.
				$scope.removeSection = function(sectionId) {
					var isSectionContainsDependentField = false;
					angular.forEach($scope.sectionMap[sectionId].field, function(sectionValue){
						if(sectionValue.isControllingField || sectionValue.isdependentField) {
							isSectionContainsDependentField = true;
							return;
						}
					});
					if(!isSectionContainsDependentField) {
						angular.forEach($scope.sectionMap[sectionId].field, function(sectionValue){
							angular.forEach($scope.selectedModelList, function(modelValue) {
								if(sectionValue.modelName == modelValue.modelName) {
									// Deleting the Field Objects. 
									var tempObj = sectionValue;
									delete tempObj.label;
									if(tempObj.fieldDisplayType.toUpperCase() == 'REFERENCE') {
										delete tempObj.isFirstValueBlank;
										delete tempObj.isControllingField;
										delete tempObj.isdependentField;
										delete tempObj.lookupRecordCriteria;
									} else if(tempObj.fieldDisplayType.toUpperCase() == 'PICKLIST') {
										delete tempObj.isFirstValueBlank;
										delete tempObj.isControllingField;
										delete tempObj.isdependentField;
									}
									delete tempObj.type;
									delete tempObj.placeholderText;
									delete tempObj.hoverText;
									delete tempObj.instructionText;
									delete tempObj.instructionTextPosition;
									delete tempObj.required;
									delete tempObj.rendered;
									delete tempObj.isBlank;
									modelValue.field.push(tempObj);
								}
							});
						});
						// Removing Section from Section List that is used to Maintain the Order.
						var index = $scope.sectionOrderList.indexOf(sectionId);
						if(index > -1) {
							$scope.sectionOrderList.splice(index, 1);
						}
						delete $scope.sectionMap[sectionId]; // Removing Section from Section Map.
						$scope.onLoadFunction();
					} else {
						alert('You can not remove section it contains controlling or dependent field.')
					}
				}
				
				// Method to Create Section New Section.
				$scope.createSection = function() {
					// Checking Required Field Validation
					if(undefined != $scope.section.title && $scope.section.title != '' && undefined != $scope.section.sectionLayout && $scope.section.sectionLayout != '' 
					&& undefined != $scope.section.sectionCollapsible && $scope.section.sectionCollapsible != '' && undefined != $scope.section.isAddAnother) {
						//Checking Add and Remove Button Label when is Add Another Section.
						if($scope.section.isAddAnother && (undefined == $scope.section.removeButtonLabel || $scope.section.removeButtonLabel == '')) {
							alert('Please fill remove button label.');
							return false;
						} else if($scope.section.isAddAnother && (undefined == $scope.section.addAnotherButtonLabel || $scope.section.addAnotherButtonLabel == '')) {
							alert('Please add another button label.');
							return false;
						}
						// If Section is New Assigning the Order Then Adding into the Last in the Section List.
						if(undefined == $scope.section.sectionOrder || $scope.section.sectionOrder == null) {
							$scope.section.sectionOrder = $scope.sectionOrderList.length > 0 ? (Math.max.apply(Math,$scope.sectionOrderList) + 1) : 1;
							$scope.section.field = [];
							$scope.section.className = 'glyphicon glyphicon-minus';
							$scope.section.innerDivClass = 'inner-wrapper show';
							$scope.sectionOrderList.push($scope.section.sectionOrder);
						}
						
						$scope.sectionMap[$scope.section.sectionOrder] = $scope.section;
						$scope.hideCreateNewSection();
						
						// Connecting Sections to Change the section Order.
						createPortalPageService.connectSectionsDynamically({scope: $scope});
						
						// Connection Section Fields to Drag and Drop
						$timeout(function() {
							createPortalPageService.connectSectionFieldWithModel({scope: $scope});
						});
						// Validation Error Messages.
					} else if(undefined == $scope.section.title || $scope.section.title == '') {
						alert('Please enter section name.');
					} else if(undefined == $scope.section.sectionLayout || $scope.section.sectionLayout == '') {
						alert('Please select layout.');
					} else if(undefined == $scope.section.sectionCollapsible || $scope.section.sectionCollapsible == '') {
						alert('Please select collapsible.');
					} else if (undefined == $scope.section.isAddAnother) {
						alert('Please select is add another.');
					}
				}
				
				// To toggle Section Collapse. 
				$scope.hideShowSection = function(sectionIdVal){
					if($scope.sectionMap[sectionIdVal].className == 'glyphicon glyphicon-plus') {
						$scope.sectionMap[sectionIdVal].className = 'glyphicon glyphicon-minus';
						$scope.sectionMap[sectionIdVal].innerDivClass = 'inner-wrapper show';
					} else {
						$scope.sectionMap[sectionIdVal].className = 'glyphicon glyphicon-plus';
						$scope.sectionMap[sectionIdVal].innerDivClass = 'inner-wrapper hide';
					}
	  			}
	  			
	  			// Save all Data to the DataBase.
	  			$scope.saveAllData = function() {
	  				jQuery('#loadingImageDiv').addClass('show');
	  				var sectionList = [];
	  				// Iterating over section order List to create model data and json data.
	  				angular.forEach($scope.sectionOrderList, function(value, index) {
	  					var oneSectionData = angular.copy($scope.sectionMap[value]);
	  					if(oneSectionData != null && undefined != oneSectionData.field && oneSectionData.field.length > 0) {
	  						var section = new Object();
	  						section.jsonData = oneSectionData;
	  						section.jsonData.sectionOrder = index + 1;
	  						modelType = '';
	  						section.modelDataList = $scope.getSectionModelData(oneSectionData);
	  						// Setting model Name to the section json data.
	  						if(modelType == "SECTIONMODEL") {
		  						section.jsonData.modelName = section.modelDataList[0].modelName;
		  						section.jsonData.modelType = "SECTIONMODEL";
		  					} else {
		  						section.jsonData.modelName = '';
		  						section.jsonData.modelType = "FIELDMODEL";
		  					}
		  							  					
		  					sectionList.push(section);
	  					}
	  				});
	  				
	  				// Validation Check if Section has Add Another Functionality and have multiple models data.
	  				var errorMessage = '';
	  				angular.forEach(sectionList, function(sectionObj) {
	  					if(sectionObj.jsonData.modelType == "FIELDMODEL" && sectionObj.jsonData.isAddAnother) {
	  						errorMessage += 'You can not create add another functionality in ' + sectionObj.jsonData.title + ', because of multiple model in it. \n';
	  					}
	  				});
	  				
	  				if(errorMessage != '') {
	  					alert(errorMessage);
	  					jQuery('#loadingImageDiv').removeClass('show');
            			jQuery('#loadingImageDiv').addClass('hide');
	  					return false;
	  				}
	  				
	  				// Setting Page Header String to a Varible. 
	  				var pageHeaderJsonString = $scope.pageHeaderObject;
	  				
	  				// Remote Action Calling the Save All the Data.
	  				Visualforce.remoting.Manager.invokeAction(
		            	'{!$RemoteAction.NewEditPortalPageController.saveData}', 
		            	JSON.stringify(sectionList), // Section Object List that contains model List and Section Json.
		            	JSON.stringify(pageHeaderJsonString), // Page Header.
		            	'{!pageId}', // {page Id}
		            	function(result, event){
		            		alert(result);
		            		jQuery('#loadingImageDiv').removeClass('show');
	            			jQuery('#loadingImageDiv').addClass('hide');
		            	}, 
	                   	{escape: true}
					);
	  			}
	  			
	  			var modelType = '';
	  			// Method creates the model list for section.
	  			var sectionModelMap;
	  			var exObectMap;
	  			$scope.getSectionModelData = function(sectionObject) {
	  				var modelDataList = [];
	  				exObectMap = {};
	  				sectionModelMap = new Object();
	  				for(x=0; x<sectionObject.field.length; x++) {
	  					if(undefined != sectionModelMap[sectionObject.field[x].modelName] && sectionModelMap[sectionObject.field[x].modelName] != null) {
	  						sectionModelMap[sectionObject.field[x].modelName].field.push(sectionObject.field[x]); // Adding fields from Sections in section model map.		
	  					} else if(sectionObject.field[x].fieldDisplayType.toUpperCase() != 'UPLOAD'){ // Field Type is not upload
	  						// Adding all fields from Model (Unused) that are not used in section object. (May be used in Criteria Condition, Rendered Condition, Required Condition List)
	  						sectionModelMap[sectionObject.field[x].modelName] = new Object();
	  						sectionModelMap[sectionObject.field[x].modelName].modelName = sectionObject.field[x].modelName;
	  						for(i=0; i<$scope.selectedModelList.length; i++) {
	  							if($scope.selectedModelList[i].modelName == sectionObject.field[x].modelName) {
	  								sectionModelMap[sectionObject.field[x].modelName].objectName = angular.copy($scope.selectedModelList[i].objectName);
	  								sectionModelMap[sectionObject.field[x].modelName].objectAPIName = angular.copy($scope.selectedModelList[i].objectAPIName);
	  								sectionModelMap[sectionObject.field[x].modelName].field = angular.copy($scope.selectedModelList[i].field);
	  								sectionModelMap[sectionObject.field[x].modelName].condition = angular.copy($scope.selectedModelList[i].condition);
	  								// Adding Fields from Other Sections in Model.
	  								angular.forEach($scope.sectionMap, function(value, key){
	  									if(value.sectionOrder != sectionObject.sectionOrder) {
	  										angular.forEach(value.field, function(value) {
	  											if(sectionObject.field[x].modelName == value.modelName) {
	  												sectionModelMap[sectionObject.field[x].modelName].field.push(angular.copy(value));
	  											}
	  										});
	  									}
	  								});
	  								// Adding Fields from Model Fields.
	  								sectionModelMap[sectionObject.field[x].modelName].field.push(sectionObject.field[x]);
	  								break;
	  							}
	  						}
	  					} else if(sectionObject.field[x].fieldDisplayType.toUpperCase() == 'UPLOAD' && sectionObject.field[x].parentIdSource.toUpperCase() == 'MODEL' && (undefined == sectionModelMap[sectionObject.field[x].parentId] || sectionModelMap[sectionObject.field[x].parentId] == null)) {
	  						sectionModelMap[sectionObject.field[x].parentId] = new Object(); // Adding fields from that used in Upload Component that are not present in the current section Model. 
	  						sectionModelMap[sectionObject.field[x].parentId].modelName = sectionObject.field[x].parentId;
	  						for(i=0; i<$scope.selectedModelList.length; i++) {
	  							if($scope.selectedModelList[i].modelName == sectionObject.field[x].parentId) {
	  								sectionModelMap[sectionObject.field[x].parentId].objectName = angular.copy($scope.selectedModelList[i].objectName);
	  								sectionModelMap[sectionObject.field[x].parentId].objectAPIName = angular.copy($scope.selectedModelList[i].objectAPIName);
	  								sectionModelMap[sectionObject.field[x].parentId].field = angular.copy($scope.selectedModelList[i].field);
	  								sectionModelMap[sectionObject.field[x].parentId].condition = angular.copy($scope.selectedModelList[i].condition);
	  								// Adding Fields from Other Section in Model.
	  								angular.forEach($scope.sectionMap, function(value, key){
	  									if(value.sectionOrder != sectionObject.sectionOrder) {
	  										angular.forEach(value.field, function(value) {
	  											if(sectionObject.field[x].parentId == value.modelName) {
	  												sectionModelMap[sectionObject.field[x].parentId].field.push(angular.copy(value));
	  												
	  											}
	  										});
	  									}
	  								});
	  								break;
	  							}
	  						}
	  					}
	  				}
	  				// Checking Section Belongs to single model or multiple model.
	  				var temp = [];
	  				angular.forEach(sectionModelMap, function(value, key){
	  					temp.push(key);
	  				});
	  				
	  				if(temp.length == 1) {
	  					modelType = 'SECTIONMODEL'; // If section contains fields only from one model.
	  				} else {
	  					modelType = 'FIELDMODEL'; // If section contains fields only from multiple model.
	  				}
	  				
	  				// Adding the Model that are used in Lookup Record Criteria Condition but not in section Model.
	  				for(x=0; x<sectionObject.field.length; x++) {
	  					if(undefined != sectionObject.field[x].lookupRecordCriteria && sectionObject.field[x].lookupRecordCriteria != null){
	  						for(y=0; y<sectionObject.field[x].lookupRecordCriteria.length; y++) {
	  							if(sectionObject.field[x].lookupRecordCriteria[y].valueType.toUpperCase() == 'MODEL') {
	  								if(undefined == sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName] || sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName] == '') {
	  									sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName] = new Object();
										sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName].modelName = sectionObject.field[x].lookupRecordCriteria[y].modelName;
	  									angular.forEach($scope.selectedModelList, function(sectionObj) {
	  										if(sectionObj.modelName.toUpperCase() == sectionObject.field[x].lookupRecordCriteria[y].modelName.toUpperCase()) {
	  											sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName].objectName = angular.copy(sectionObj.objectName);
	  											sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName].objectAPIName = angular.copy(sectionObj.objectAPIName);
	  											sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName].field = angular.copy(sectionObj.field);
	  											sectionModelMap[sectionObject.field[x].lookupRecordCriteria[y].modelName].condition = angular.copy(sectionObj.condition);
	  										}
	  									});
	  								}
	  							}
	  						}
	  					}
	  				}
	  				
	  				// Adding the Model that are used in Render Criteria Condition but not in section Model.
	  				for(x=0; x<sectionObject.field.length; x++) {
	  					if(undefined != sectionObject.field[x].renderCriteriaList && sectionObject.field[x].renderCriteriaList != null){
	  						for(y=0; y<sectionObject.field[x].renderCriteriaList.length; y++) {
  								if(undefined == sectionModelMap[sectionObject.field[x].renderCriteriaList[y].modelName] || sectionModelMap[sectionObject.field[x].renderCriteriaList[y].modelName] == '') {
  									sectionModelMap[sectionObject.field[x].renderCriteriaList[y].modelName] = new Object();
									sectionModelMap[sectionObject.field[x].renderCriteriaList[y].modelName].modelName = sectionObject.field[x].renderCriteriaList[y].modelName;
  									angular.forEach($scope.selectedModelList, function(sectionObj) {
  										if(sectionObj.modelName.toUpperCase() == sectionObject.field[x].renderCriteriaList[y].modelName.toUpperCase()) {
  											sectionModelMap[sectionObject.field[x].renderCriteriaList[y].modelName].objectName = angular.copy(sectionObj.objectName);
  											sectionModelMap[sectionObject.field[x].renderCriteriaList[y].modelName].objectAPIName = angular.copy(sectionObj.objectAPIName);
  											sectionModelMap[sectionObject.field[x].renderCriteriaList[y].modelName].field = angular.copy(sectionObj.field);
  											sectionModelMap[sectionObject.field[x].renderCriteriaList[y].modelName].condition = angular.copy(sectionObj.condition);
  										}
  									});
  								}
	  						}
	  					}
	  				}
	  				
	  				// Adding the Model that are used in Required Criteria Condition but not in section Model.
	  				for(x=0; x<sectionObject.field.length; x++) {
	  					if(undefined != sectionObject.field[x].requiredCriteriaList && sectionObject.field[x].requiredCriteriaList != null){
	  						for(y=0; y<sectionObject.field[x].requiredCriteriaList.length; y++) {
  								if(undefined == sectionModelMap[sectionObject.field[x].requiredCriteriaList[y].modelName] || sectionModelMap[sectionObject.field[x].requiredCriteriaList[y].modelName] == '') {
  									sectionModelMap[sectionObject.field[x].requiredCriteriaList[y].modelName] = new Object();
									sectionModelMap[sectionObject.field[x].requiredCriteriaList[y].modelName].modelName = sectionObject.field[x].requiredCriteriaList[y].modelName;
  									angular.forEach($scope.selectedModelList, function(sectionObj) {
  										if(sectionObj.modelName.toUpperCase() == sectionObject.field[x].requiredCriteriaList[y].modelName.toUpperCase()) {
  											sectionModelMap[sectionObject.field[x].requiredCriteriaList[y].modelName].objectName = angular.copy(sectionObj.objectName);
  											sectionModelMap[sectionObject.field[x].requiredCriteriaList[y].modelName].objectAPIName = angular.copy(sectionObj.objectAPIName);
  											sectionModelMap[sectionObject.field[x].requiredCriteriaList[y].modelName].field = angular.copy(sectionObj.field);
  											sectionModelMap[sectionObject.field[x].requiredCriteriaList[y].modelName].condition = angular.copy(sectionObj.condition);
  										}
  									});
  								}
	  						}
	  					}
	  				}
	  				angular.forEach(sectionModelMap, function(value, key) {
	  					/*if(!$scope.isFoundInCriteriaCondition(key)) {
  						}*/
	  					$scope.getSectionModelMap(value.condition);
	  				});
	  				angular.forEach(sectionModelMap, function(value, key) {
	  					exObectMap[key] = [];
	  					$scope.setExObectMap(key, value.condition);
	  				});
	  				var tempMap = {};
  					angular.forEach(exObectMap, function(value, key) {
  						if(undefined == tempMap[value.length] || tempMap[value.length] == null) {
  							tempMap[value.length] = [];
  						}
  						tempMap[value.length].push(key);
  					});
	  				var tempList = [];
	  				angular.forEach(tempMap, function(value, key) {
	  						tempList.push(key);
	  				});
	  				tempList.sort();
	  				// Creating Model List from Map.
	  				angular.forEach(tempList, function(value) {
	  					angular.forEach(tempMap[value], function(model) {
	  						modelDataList.push(sectionModelMap[model]);
	  					});
	  				});
	  				/*angular.forEach(sectionModelMap, function(value, key){
	  					modelDataList.push(value);
	  					
	  				});*/
	  				return modelDataList; // Return Data Model List.
	  			}
	  			
	  			$scope.setExObectMap = function(key, conditionList) {
	  				angular.forEach(conditionList, function(conditionObj) {
	  					if(conditionObj.valueType == 'MODEL') {
	  						exObectMap[key].push(conditionObj.modelName);
							$scope.setExObectMap(key, sectionModelMap[conditionObj.modelName].condition);
						}
  					});
	  			}
	  			
	  			$scope.getSectionModelMap = function(conditionList) {
	  				angular.forEach(conditionList, function(conditionObj) {
	  					if(conditionObj.valueType == 'MODEL') {
	  						if(undefined == sectionModelMap[conditionObj.modelName] || sectionModelMap[conditionObj.modelName] == null) {
	  							sectionModelMap[conditionObj.modelName] = new Object();
  								sectionModelMap[conditionObj.modelName].modelName = conditionObj.modelName;
  								angular.forEach($scope.selectedModelList, function(sectionObj) {
  									if(sectionObj.modelName.toUpperCase() == sectionModelMap[conditionObj.modelName].modelName.toUpperCase()) {
  										sectionModelMap[conditionObj.modelName].objectName = angular.copy(sectionObj.objectName);
										sectionModelMap[conditionObj.modelName].objectAPIName = angular.copy(sectionObj.objectAPIName);
										sectionModelMap[conditionObj.modelName].field = angular.copy(sectionObj.field);
										sectionModelMap[conditionObj.modelName].condition = angular.copy(sectionObj.condition);
  									}
  								});
							}
							$scope.getSectionModelMap(sectionModelMap[conditionObj.modelName].condition);
						}
  					});
	  			}
	  			
	  			// Function to Configure Drap & Drop on OnLoad Page.
	  			$scope.onLoadFunction = function() {
	  				createPortalPageService.connectSectionsDynamically({scope: $scope});
	  				createPortalPageService.connectSectionFieldWithModel({scope: $scope});
	  			}
	  			
	  			// Method to hide Field Configure Popup  
	  			$scope.hideUpdateFieldInfo = function() {
	  				$scope.selectedField = {};
	  				$scope.isShowUpdateField = false;
	  			}
	  			
	  			// Method to show Field Configure Popup  
	  			$scope.showUpdateFieldInfo = function(sectionKey, fieldIndex, selField, isInsert) {
	  				mapKeyToUpdateFieldInfo = sectionKey;
	  				fieldIndexToUpdateInfo = fieldIndex;
	  				$scope.selectedField = angular.copy(selField);
	  				$scope.lookupRecordCriteriaList = null;
	  				$scope.renderCriteriaList = null;
	  				$scope.renderCriterialFields = [];
	  				$scope.requiredCriteriaList = null;
	  				$scope.requiredCriterialFields = [];
	  				// setting the current selected fields rendered condition to the condition list.
	  				if(!$scope.selectedField.rendered) {
	  					$scope.getRenderCriterialFields();
	  					$scope.renderCriteriaList = $scope.selectedField.renderCriteriaList || [];
	  					$scope.addMoreRenderedCondition();
	  				}
	  				// setting the current selected fields required condition to the condition list.
	  				if($scope.selectedField.required == 'condition') {
	  					$scope.getRequiredCriterialFields();
	  					$scope.requiredCriteriaList = $scope.selectedField.requiredCriteriaList || [];
	  					$scope.addMoreRequiredCondition();
	  				}
	  				
	  				// Setting lookup criteria list and initializing values for Reference fields	  				
	  				if($scope.selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE') {
	  					$scope.fieldCriteriaMap = new Object();
						$scope.fieldCriteriaListMap = new Object();
	  					$scope.getCriteriaFieldsForSelected();
	  					$scope.getLookupRecordCriteriaModelValues();
	  					$scope.lookupRecordCriteriaList = $scope.selectedField.lookupRecordCriteria;
		  				$scope.addMoreCondition();
	  				} else if($scope.selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST') { // Setting dependency map and initializing values for Picklist type fields
	  					$scope.fieldCriteriaMap = new Object();
	  					$scope.selectedField.picklistDependencyMap = $scope.selectedField.picklistDependencyMap || new Object();
	  					$scope.dropdownDependentMap = new Object();
	  				}
	  				
	  				// Setting dependent fields list and initializing values for Reference fields when field is controlling field.
	  				if($scope.selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE' && $scope.selectedField.type.toUpperCase() == 'PICKLIST' && $scope.selectedField.isControllingField) {
	  					previousDependentField = $scope.selectedField.dependentCriteriaMap || {};
	  					$scope.fieldCriteriaMap = $scope.selectedField.dependentCriteriaMap || {};
	  					$scope.referenceFieldList = $scope.getReferenceDependentFieldList('REFERENCE');
	  					angular.forEach($scope.fieldCriteriaMap, function(value, key) {
	  						$scope.getLookupCriteriaFieldName(key);
	  					});
	  				} else if($scope.selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST' && $scope.selectedField.isControllingField) { 
	  					// Setting dependent fields list and initializing values for Picklist fields when field is controlling field.
	  					previousDependentField = $scope.selectedField.dependentCriteriaMap || {};
	  					previousPicklistDependentField = $scope.selectedField.dependentCriteriaMap || {};
	  					$scope.fieldCriteriaMap = $scope.selectedField.dependentCriteriaMap || {};
	  					$scope.referenceFieldList = $scope.getReferenceDependentFieldList('PICKLIST');
	  					angular.forEach($scope.fieldCriteriaMap, function(value, key) {
	  						$scope.configurePicklistDependencyMap(key);
	  					});
	  				}
	  				$scope.isInsert = isInsert;
	  				if($scope.selectedField.fieldDisplayType.toUpperCase() == 'UPLOAD') {
	  					$scope.createUploadSupportedFilesList($scope.selectedField.allowedContentType);
					}
	  				$scope.isShowUpdateField = true;
	  			}
	  			
	  			// Method to Update Field Info
	  			$scope.addUpdateSelectedField = function(isUpdate) {
	  				// Required Field Validation Check
	  				var errorString = '';
	  				if($scope.selectedField.label.trim() == '') {
	  					errorString += 'Field label can not be left blank.\n';
	  				}
	  				
	  				// Validation Check for lookup Record Criteria List 
	  				if($scope.selectedField.fieldDisplayType == 'REFERENCE') {
	  					if(undefined != $scope.lookupRecordCriteriaList && $scope.lookupRecordCriteriaList != null && $scope.lookupRecordCriteriaList.length != 0) {
	 						var isError = false;
	 						angular.forEach($scope.lookupRecordCriteriaList, function(condition) {
	 							if((condition.fieldAPIName != undefined && condition.fieldAPIName != '') && 
	 								(condition.fieldOperator == undefined || condition.fieldOperator == '' || condition.valueType == undefined || condition.valueType == '' || condition.value == undefined || condition.value == '')) {
									isError = true;
								}
	 						});
	 						if(isError) {
	 							errorString += 'Lookup record criteria condition is not correct. Please review and correct.\n'; // Setting error message for criteria list.
	 						}
	 					}
	  				}
	  				
	  				// Depenedent Reference Field Validation
	  				if($scope.selectedField.fieldDisplayType == 'REFERENCE' && $scope.selectedField.type.toUpperCase() == 'PICKLIST' && $scope.selectedField.isControllingField) {
	  					var temp = []
	  					angular.forEach($scope.fieldCriteriaMap, function(value, key) {
	  						temp.push(key);
	  					});
	  					if(temp.length == 0) {
	  						errorString += 'Select atleast one dependent field.\n';
	 					}
	 					if(temp.length != 0) {
	 						angular.forEach($scope.fieldCriteriaMap, function(value, key) {
		  						if($scope.fieldCriteriaListMap[key].length == 0) {
		  							angular.forEach($scope.referenceFieldList, function(referenceFieldObj) {
		  								if(referenceFieldObj.modelName == key.split('----')[0] && referenceFieldObj.fieldAPIName == key.split('----')[1]) {
		  									errorString += 'There is no Mapping for '+ referenceFieldObj.fieldName + '.\n'; // Error Message when is no mapping between controlling and dependent field
		  								}
		  							});		  							
	  							} else if(undefined == value || value == ''){
	  								angular.forEach($scope.referenceFieldList, function(referenceFieldObj) {
		  								if(referenceFieldObj.modelName == key.split('----')[0] && referenceFieldObj.fieldAPIName == key.split('----')[1]) {
		  									errorString += 'Select Mapping field for ' + referenceFieldObj.fieldName + '.\n'; // Error Message dependent field is blank.
		  								}
		  							});
	  							}
		  					});
	 					}
	  				}
	  				
	  				// Checking dependent field for controlling picklist type 
	  				if($scope.selectedField.fieldDisplayType == 'PICKLIST' && $scope.selectedField.isControllingField) {
	  					var temp = []
	  					angular.forEach($scope.fieldCriteriaMap, function(value, key) {
	  						temp.push(key);
	  					});
	  					if(temp.length == 0) {
	  						errorString += 'Select atleast one dependent field.\n'; // Set Error Message If No depedent Picklist found.
	 					}
	  				}
	  				// Validation Check for Upload Type Field
	  				if($scope.selectedField.fieldDisplayType.toUpperCase() == "UPLOAD") {
	  					if($scope.selectedField.allowedContentType.trim() == '') {
	  						errorString += 'Please select at least one supported file format.\n'; // Set Error Message If No File format selected.
	  					}
	  					if($scope.selectedField.parentIdSource == 'Param' && $scope.selectedField.parentId.trim() == '') {
	  						errorString += 'Please specify the Url Parameter name.\n'; // Set Error Message If Attachment Parent Id is null.
	  					}
	  					if($scope.selectedField.parentIdSource == 'Static' && $scope.selectedField.parentId.trim() == '') {
	  						errorString += 'Please specify document upload record id.\n'; // Set Error Message If Attachment Parent Id is null.
	  					}
	 				}
	 				
	 				if($scope.selectedField.required == 'true' || $scope.selectedField.required == 'condition') {
	 					if((undefined == $scope.selectedField.requiredSymbol || $scope.selectedField.requiredSymbol == '')) {
	 						errorString += 'Please specify required symbol.\n'; // Set Error Message If Required Symbol is null and required is true or condition.
	 					}
	 				} else {
	 					$scope.selectedField.requiredSymbol = '';
	 				}
	 				
	 				var tempRenderCriteriaList = [];
					var tempRenderedExpression;
	 				if(!$scope.selectedField.rendered) {
	 					tempRenderedExpression = $scope.selectedField.renderedExpression || '';
	 					// Filtering Rendered Criteria Condition. If any one is null (operator, value or field) then not include in condition
	 					if(tempRenderedExpression != '') {
							if(undefined != $scope.renderCriteriaList && $scope.renderCriteriaList != null) {
								angular.forEach($scope.renderCriteriaList, function(condition) {
									if(condition.fieldAPIName != undefined && condition.fieldOperator != undefined && condition.value != undefined 
										&& condition.fieldAPIName != '' && condition.fieldOperator != '' && condition.value != '') { // Allow only those field that have value & field & operator
										angular.forEach($scope.renderCriterialFields, function(fieldValue){
											if(fieldValue.fieldAPIName == condition.fieldAPIName) {
												condition.fieldDisplayType = fieldValue.fieldDisplayType;
											}
										});
										tempRenderCriteriaList.push(condition);	
									}
								});
							}
							var tempRenErrMessasge = $scope.validateCustomConditionFormat(tempRenderedExpression, false, tempRenderCriteriaList);
							if(!(tempRenErrMessasge.toUpperCase() == 'VERIFIED')) {
								errorString += 'Rendered Expression - ' + tempRenErrMessasge + '.\n';
							}
						} else {
							errorString += 'Rendered expression can not be left blank.\n';
						}
	 				} else {
	 					tempRenderedExpression = '';
	 				}
	 				
	 				var tempRequiredCriteriaList = [];
					var tempRequiredExpression;
	 				if($scope.selectedField.required == 'condition') {
	 					tempRequiredExpression = $scope.selectedField.requiredExpression || '';
	 					// Filtering Required Criteria Condition. If any one is null (operator, value or field) then not include in condition
	 					if(tempRequiredExpression != '') {
							if(undefined != $scope.requiredCriteriaList && $scope.requiredCriteriaList != null) {
								angular.forEach($scope.requiredCriteriaList, function(condition) {
									if(condition.fieldAPIName != undefined && condition.fieldOperator != undefined && condition.value != undefined 
										&& condition.fieldAPIName != '' && condition.fieldOperator != '' && condition.value != '') { // Allow only those field that have value & field & operator
										angular.forEach($scope.requiredCriterialFields, function(fieldValue){
											if(fieldValue.fieldAPIName == condition.fieldAPIName) {
												condition.fieldDisplayType = fieldValue.fieldDisplayType;
											}
										});
										tempRequiredCriteriaList.push(condition);	
									}
								});
							}
							var tempReqErrMessasge = $scope.validateCustomConditionFormat(tempRequiredExpression, false, tempRequiredCriteriaList);
							if(!(tempReqErrMessasge.toUpperCase() == 'VERIFIED')) {
								errorString += 'Required Expression - ' + tempReqErrMessasge + '.\n';
							}
						} else {
							errorString += 'Required expression can not be left blank.\n';
						}
	 				} else {
	 					tempRequiredExpression = '';
	 				}
	 				
	 				if(errorString != '') {
						alert(errorString);
						return; // If Error Message not Blank show Alert and Return.
					}
					
					// Rendered Criteria
					$scope.renderCriteriaList = [];
					$scope.selectedField.renderCriteriaList = tempRenderCriteriaList;
					$scope.selectedField.renderedExpression = tempRenderedExpression;
					
					// Required Criteria
					$scope.requiredCriteriaList = [];
					$scope.selectedField.requiredCriteriaList = tempRequiredCriteriaList;
					$scope.selectedField.requiredExpression = tempRequiredExpression;
					
					// Set is dependent true to the dependent dropdown for Reference Type Field
					if($scope.selectedField.fieldDisplayType == 'REFERENCE' && $scope.selectedField.type.toUpperCase() == 'PICKLIST' && $scope.selectedField.isControllingField) {
						angular.forEach($scope.sectionMap, function(sectionObj, key) {
							angular.forEach(sectionObj.field, function(fieldObj){
								if($scope.fieldCriteriaMap[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != undefined && $scope.fieldCriteriaMap[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != null) {
									fieldObj.type = 'PICKLIST';
									if(undefined == fieldObj.isFirstValueBlank) {
										fieldObj.isFirstValueBlank = true;
									}
									if(undefined == fieldObj.isControllingField) {
										fieldObj.isControllingField = false;
									}
									fieldObj.isdependentField = true; // Setting is dependent field true to Current Dependent field.
								} else if(previousDependentField != undefined && previousDependentField[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != undefined && previousDependentField[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != null) {
									fieldObj.isdependentField = false; // Setting is Dependent false when update dependent field.
								}
							});
						});
					} else if ($scope.selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE') { // Setting is Depenedent False when is controlling field is false. 
						angular.forEach($scope.sectionMap, function(sectionObj, key) {
							angular.forEach(sectionObj.field, function(fieldObj){
								if($scope.fieldCriteriaMap[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != undefined && $scope.fieldCriteriaMap[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != null) {
									fieldObj.isdependentField = false; // Setting is Dependent false when update controlling field false.
								}
							});
						});
						$scope.fieldCriteriaMap = {};
					}
					// Set is dependent true to the dependent dropdown for Picklist type
					if($scope.selectedField.fieldDisplayType == 'PICKLIST' && $scope.selectedField.isControllingField) {
						angular.forEach($scope.sectionMap, function(sectionObj, key) {
							angular.forEach(sectionObj.field, function(fieldObj){
								if($scope.fieldCriteriaMap[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != undefined && $scope.fieldCriteriaMap[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != null) {
									fieldObj.isdependentField = true; // Setting is dependent field true to Current Dependent field.
								} else if(previousDependentField != undefined && previousDependentField[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != undefined && previousDependentField[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != null){
									fieldObj.isdependentField = false; // Setting is Dependent false when update dependent field.
								}
							});
						});
					} else if ($scope.selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST') { // Setting is Depenedent False when is controlling field is Reset for Picklist Type Field. 
						angular.forEach($scope.sectionMap, function(sectionObj, key) {
							angular.forEach(sectionObj.field, function(fieldObj){
								if($scope.fieldCriteriaMap[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != undefined && $scope.fieldCriteriaMap[fieldObj.modelName + '----' + fieldObj.fieldAPIName] != null) {
									fieldObj.isdependentField = false; // Setting is Dependent false when update controlling field false.
								}
							});
						});
						$scope.fieldCriteriaMap = {};
						$scope.selectedField.picklistDependencyMap = {};
					}
					
					if($scope.selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST' || $scope.selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE') {
						$scope.selectedField.dependentCriteriaMap = $scope.fieldCriteriaMap;
					} else {
						$scope.selectedField.dependentCriteriaMap = null;
					}
					
					// Applying lookup records Criteria Condition.
					if(undefined != $scope.lookupRecordCriteriaList && $scope.lookupRecordCriteriaList != null) {
						$scope.selectedField.lookupRecordCriteria = [];
						angular.forEach($scope.lookupRecordCriteriaList, function(condition) {
							if(condition.fieldAPIName != undefined && condition.fieldOperator != undefined && condition.valueType != undefined && condition.value != undefined 
								&& condition.fieldAPIName != '' && condition.fieldOperator != '' && condition.valueType != '' && condition.value != '') { // Allow only those field that have value & field & operator
								angular.forEach($scope.lookupRecordCriteriaFieldList, function(fieldValue){
									if(fieldValue.fieldAPIName == condition.fieldAPIName) {
										condition.fieldDisplayType = fieldValue.fieldDisplayType;
									}
								});
								$scope.selectedField.lookupRecordCriteria.push(condition);	
							}
						});
					} else {
						$scope.selectedField.lookupRecordCriteria = [];
					}
					
					// Applying Rendered Criteria Condition.
					/*if(undefined != $scope.renderCriteriaList && $scope.renderCriteriaList != null) {
						$scope.selectedField.renderCriteriaList = [];
						angular.forEach($scope.renderCriteriaList, function(condition) {
							if(condition.fieldAPIName != undefined && condition.fieldOperator != undefined && condition.value != undefined 
								&& condition.fieldAPIName != '' && condition.fieldOperator != '' && condition.value != '') { // Allow only those field that have value & field & operator
								angular.forEach($scope.renderCriterialFields, function(fieldValue){
									if(fieldValue.fieldAPIName == condition.fieldAPIName) {
										condition.fieldDisplayType = fieldValue.fieldDisplayType;
									}
								});
								$scope.selectedField.renderCriteriaList.push(condition);	
							}
						});
						$scope.renderCriteriaList = [];
					} else {
						$scope.renderCriteriaList = [];
						$scope.selectedField.renderCriteriaList = [];
						$scope.selectedField.renderedExpression = '';
					}*/
					
					// Applying Required Criteria Condition.
					/*if(undefined != $scope.requiredCriteriaList && $scope.requiredCriteriaList != null && $scope.selectedField.required == 'condition') {
						$scope.selectedField.requiredCriteriaList = [];
						angular.forEach($scope.requiredCriteriaList, function(condition) {
							if(condition.fieldAPIName != undefined && condition.fieldOperator != undefined && condition.value != undefined 
								&& condition.fieldAPIName != '' && condition.fieldOperator != '' && condition.value != '') { // Allow only those field that have value & field & operator
								angular.forEach($scope.requiredCriterialFields, function(fieldValue){
									if(fieldValue.fieldAPIName == condition.fieldAPIName) {
										condition.fieldDisplayType = fieldValue.fieldDisplayType;
									}
								});
								$scope.selectedField.requiredCriteriaList.push(condition);	
							}
						});
						$scope.requiredCriteriaList = [];
					} else {
						$scope.requiredCriteriaList = [];
						$scope.selectedField.requiredCriteriaList = [];
						$scope.selectedField.requiredExpression = '';
					}*/
					
					// Updating Field in List.
	  				var selectedFieldCopy = angular.copy($scope.selectedField);
	  				if($filter('htmlToPlaintext')(selectedFieldCopy.instructionText) == '') {
	  					selectedFieldCopy.instructionText = '';
	  					selectedFieldCopy.instructionTextPosition = '';
	  				}
	  				
	  				// Updating Section Field Map
	  				if(isUpdate) {
	  					$scope.sectionMap[mapKeyToUpdateFieldInfo].field[fieldIndexToUpdateInfo] = angular.copy(selectedFieldCopy);
	 				} else {
	 					// Insering new Field in Section Map. 
						$scope.sectionMap[mapKeyToUpdateFieldInfo].field.splice(fieldIndexToUpdateInfo, 0, angular.copy($scope.selectedField));
	 				}
	  				$scope.hideUpdateFieldInfo();
	  				$timeout(function() {
		  				$scope.onLoadFunction();
					});
	  			}
	  			
	  			// Update Instruction Position Value on Change of Instruction Text.
	  			$scope.updateInstructionPosition = function() {
	  				var tempInstruction = $filter('htmlToPlaintext')($scope.selectedField.instructionText);
	  				if(tempInstruction != '' && (undefined == $scope.selectedField.instructionTextPosition || $scope.selectedField.instructionTextPosition == null || $scope.selectedField.instructionTextPosition == '')) {
	  					$scope.selectedField.instructionTextPosition = 'Above Field'.toUpperCase();
	  				}
	  			}
	  			
	  			// Method to Update Allowed Content Type for Upload Component.
				$scope.updateAllowContentType = function() {
					var checkedItems = [];
			        angular.forEach($scope.uploadSupportedFilesList, function(appObj, arrayIndex){
			            angular.forEach(appObj, function(cb, key) {
			            	if(key == "isChecked" && cb) {
			                	checkedItems.push(appObj.value.toLowerCase());
		                	}
			            });
			        });
			        $scope.selectedField.allowedContentType = (checkedItems.join(','));
				}
				
				// Function to Create Upload Supported Files List from comma seperated string
				$scope.createUploadSupportedFilesList = function(selectedValuesString) {
					$scope.uploadSupportedFilesList = [];
					var selectedValuesList = selectedValuesString.toUpperCase().split(',');
					angular.forEach({!uploadSupportedFilesListString}, function(value) {
						if(selectedValuesList.indexOf(value.toUpperCase()) > -1) {
							$scope.uploadSupportedFilesList.push({'value':value, 'isChecked':true});
						} else {
							$scope.uploadSupportedFilesList.push({'value':value, 'isChecked':false});
						}
					});
				}
				
				// Method to Update Parent ID Value on Change of Source Value
				$scope.updateParentIdSource = function() {
					if($scope.selectedField.parentIdSource.toUpperCase() == 'MODEL') {
						$scope.selectedField.parentId = $scope.selectedModelList[0].modelName;
					} else {
						$scope.selectedField.parentId = '';
					}
				}
				
				// Method to Update Controlling field Values
				$scope.updateControllingFieldValue = function() {
					$scope.selectedField.isFirstValueBlank = null;
					$scope.selectedField.isControllingField = null;
					$scope.selectedField.isdependentField = null;
					if($scope.selectedField.type.toUpperCase() == 'PICKLIST') {
						$scope.selectedField.isFirstValueBlank = true;
						$scope.selectedField.isControllingField = false;
						$scope.selectedField.isdependentField = false;
					}
				}
				
				// Method to Update Controlling Fields Values
				$scope.updateControllingFields = function() {
					if($scope.selectedField.isControllingField && $scope.selectedField.fieldDisplayType.toUpperCase() == 'REFERENCE') {
						$scope.referenceFieldList = $scope.getReferenceDependentFieldList('REFERENCE');
					} else if($scope.selectedField.isControllingField && $scope.selectedField.fieldDisplayType.toUpperCase() == 'PICKLIST') {
						$scope.referenceFieldList = $scope.getReferenceDependentFieldList('PICKLIST');
					} else {
					}
				}
				
				// Method Returns Dependent Field List.
				$scope.getReferenceDependentFieldList = function(type) {
					var referenceDependentFieldList = [];
					if(!$scope.selectedField.isBackendDependentField) {
						angular.forEach($scope.sectionMap, function(sectionObject, key) {
							angular.forEach(sectionObject.field, function(fieldObject, index) {
								// Check Field is Controlling or dependent field
								if(fieldObject.fieldDisplayType.toUpperCase() == type 
									&& !(fieldObject.modelName == $scope.selectedField.modelName && fieldObject.fieldAPIName == $scope.selectedField.fieldAPIName) 
									&& (!($scope.isDependentRelated(fieldObject.dependentCriteriaMap))) 
									&& (($scope.selectedField.dependentCriteriaMap != null && $scope.selectedField.dependentCriteriaMap[fieldObject.modelName + '----' + fieldObject.fieldAPIName] != null) || (!fieldObject.isdependentField))
									&& !fieldObject.isBackendDependentField) {
									var temp = {};
									temp.modelName = fieldObject.modelName;
									temp.fieldName = fieldObject.fieldName;
									temp.fieldAPIName = fieldObject.fieldAPIName;
									if(undefined != $scope.fieldCriteriaMap[temp.modelName + '----' + temp.fieldAPIName] && $scope.fieldCriteriaMap[temp.modelName + '----' + temp.fieldAPIName] != null) {
										temp.isChecked = true;
									} else {
										temp.isChecked = false;
									}
									referenceDependentFieldList.push(temp);
								}
							});						
							if(type == "PICKLIST") {
								
							}
						});
					} else {
						angular.forEach($scope.sectionMap, function(sectionObject, key) {
							angular.forEach(sectionObject.field, function(fieldObject, index) {
								if(fieldObject.fieldDisplayType.toUpperCase() == type 
									&& !(fieldObject.modelName == $scope.selectedField.modelName && fieldObject.fieldAPIName == $scope.selectedField.fieldAPIName) 
									&& (!($scope.isDependentRelated(fieldObject.dependentCriteriaMap))) 
									&& (($scope.selectedField.dependentCriteriaMap != null && $scope.selectedField.dependentCriteriaMap[fieldObject.modelName + '----' + fieldObject.fieldAPIName] != null) || (!fieldObject.isdependentField))
									&& !fieldObject.isBackendDependentField) {
									if((fieldObject.dependentCriteriaMap == null || fieldObject.dependentCriteriaMap[$scope.selectedField.backendControllingFieldName] || null) && ((fieldObject.modelName + '----' + fieldObject.fieldAPIName) != $scope.selectedField.backendControllingFieldName)) {
										var temp = {};
										temp.modelName = fieldObject.modelName;
										temp.fieldName = fieldObject.fieldName;
										temp.fieldAPIName = fieldObject.fieldAPIName;
										if(undefined != $scope.fieldCriteriaMap[temp.modelName + '----' + temp.fieldAPIName] && $scope.fieldCriteriaMap[temp.modelName + '----' + temp.fieldAPIName] != null) {
											temp.isChecked = true;
										} else {
											temp.isChecked = false;
										}
										referenceDependentFieldList.push(temp);
									}
								}
							});
						});
					}
					
					return referenceDependentFieldList;
				}
				
				// Returns Field is dependent or not.
				$scope.isDependentRelated = function(fieldAPIName) {
					var temp = [];
					angular.forEach(fieldAPIName, function(value,key) {
						temp.push(key);
					});
					if(undefined == fieldAPIName || fieldAPIName == null || temp.length == 0) {
						return false; // Field is Not Dependent
					} else {
						if(fieldAPIName[$scope.selectedField.modelName + '----' + $scope.selectedField.fieldAPIName] != null) {
							return true; // Field is dependent
						} else {
							var tmpField;
							angular.forEach($scope.sectionMap, function(sectionObject, key) {
								angular.forEach(sectionObject.field, function(fieldObject) {
									if(fieldAPIName[fieldObject.modelName + '----' + fieldObject.fieldAPIName] != null) {
										tmpField = fieldObject;
									}
								});
							});
							return $scope.isDependentRelated(tmpField.dependentCriteriaMap); // Resurssion Check field is dependent or not
						}
					}
				}
				
				// Method to Remove Fields from Section.
				$scope.removeFieldsFromSection = function(sectionId, fieldIndex) {
					if($scope.sectionMap[sectionId].field[fieldIndex].type.toUpperCase() != "UPLOAD") {
						// Checking Field have Controlling or Dependent Field.
						if($scope.sectionMap[sectionId].field[fieldIndex].isdependentField || $scope.sectionMap[sectionId].field[fieldIndex].isControllingField) {
							alert('You can not remove this field from section.');
							return;
						}
						angular.forEach($scope.selectedModelList, function(value) {
							if(value.modelName == $scope.sectionMap[sectionId].field[fieldIndex].modelName) {
								var tempObj = $scope.sectionMap[sectionId].field[fieldIndex];
								delete tempObj.label;
								if(tempObj.fieldDisplayType.toUpperCase() == 'REFERENCE') {
									delete tempObj.isFirstValueBlank;
									delete tempObj.isControllingField;
									delete tempObj.isdependentField;
									delete tempObj.lookupRecordCriteria;
								} else if(tempObj.fieldDisplayType.toUpperCase() == 'PICKLIST') {
									delete tempObj.isFirstValueBlank;
									delete tempObj.isControllingField;
									delete tempObj.isdependentField;
								}
								delete tempObj.type;
								delete tempObj.placeholderText;
								delete tempObj.hoverText;
								delete tempObj.instructionText;
								delete tempObj.instructionTextPosition;
								delete tempObj.required;
								delete tempObj.rendered;
								delete tempObj.isBlank;
								value.field.push(tempObj);
							}
						});
					}
					$scope.sectionMap[sectionId].field.splice(fieldIndex, 1);
					$timeout(function() {
		  				$scope.onLoadFunction();
					});
				}
				
				// Method to get Lookup Criteria Field API Name
				$scope.getLookupCriteriaFieldName = function(dependentField) {
					if(undefined != dependentField && dependentField != '') {
						jQuery('#loadingImageDiv').addClass('show');
						var dependentObjectName;
						var controllingObjectName;
						// Finding Dependent and Controlling field Object Name by Model Name.
						angular.forEach($scope.selectedModelList, function(selectedModel) {
							if(selectedModel.modelName == dependentField.split('----')[0]) {
								dependentObjectName = selectedModel.objectAPIName;
							}
							if(selectedModel.modelName == $scope.selectedField.modelName) {
								controllingObjectName = selectedModel.objectAPIName;
							}
						});
						// Remote Action Call get List or mapping Fields.
						Visualforce.remoting.Manager.invokeAction(
	            			'{!$RemoteAction.NewEditPortalPageController.getLookupCriteriaFieldName}',
	            			dependentObjectName,
	            			controllingObjectName,
	            			dependentField.split('----')[1],
	            			$scope.selectedField.fieldAPIName,
	            			function(result, event){
		            			if (event.status) {
		            				// Assigning Mapping field list to the Map.
		            				$scope.$apply(function() {
		            					$scope.fieldCriteriaListMap[dependentField] = result;
		            				});
		            			} else if (event.type === 'exception') {
			            			alert('Some thing went wrong. Please try after some time.')
			            		}
		            			jQuery('#loadingImageDiv').removeClass('show');
		            			jQuery('#loadingImageDiv').addClass('hide');
			            	}, 
		                   	{escape: true}
						);
					}
				}
				
				// Method to get Lookup Criteria Fields for Reference Type Field
				$scope.getCriteriaFieldsForSelected = function() {
					jQuery('#loadingImageDiv').addClass('show');
					var controllingObjectName;
					// Finding the Object Name by Model Name.
					angular.forEach($scope.selectedModelList, function(selectedModel) {
						if(selectedModel.modelName == $scope.selectedField.modelName) {
							controllingObjectName = selectedModel.objectAPIName;
						}
					});
					// Remote Action call to Get the all the fields list of Reference Type Field.
					Visualforce.remoting.Manager.invokeAction(
	           			'{!$RemoteAction.NewEditPortalPageController.getCriteriaFieldsForSelected}',
	           			controllingObjectName,
	           			$scope.selectedField.fieldAPIName,
	           			function(result, event){
	            			if (event.status) {
	            				$scope.$apply(function() {
	            					$scope.lookupRecordCriteriaFieldList = result;
	            				});
	            			} else if (event.type === 'exception') {
		            			alert('Some thing went wrong. Please try after some time.')
		            		}
	            			jQuery('#loadingImageDiv').removeClass('show');
	            			jQuery('#loadingImageDiv').addClass('hide');
		            	}, 
	                   	{escape: true}
					);
				}
				
				// Method to Add More Conditions into Criteria Field List
				$scope.addMoreCondition = function() {
					var foundLocations = [];
					angular.forEach($scope.lookupRecordCriteriaList, function(criteriaObj, index) {
						if(criteriaObj.fieldAPIName == '') {
							foundLocations.push(index-foundLocations.length); // Storing index where field API is Null to be removed from Criteria Field List.
						}
					});
					angular.forEach(foundLocations, function(location) {
						$scope.lookupRecordCriteriaList.splice(location, 1); // Removing values from criteria field list.
					});
					// Adding dummy in Last.
					var temp = {};
					temp.fieldAPIName = '';
					$scope.lookupRecordCriteriaList.push(temp);
				}
				
				// Method to Add More Rendered Conditions
				$scope.addMoreRenderedCondition = function() {
					var foundLocations = [];
					angular.forEach($scope.renderCriteriaList, function(criteriaObj, index) {
						if(criteriaObj.modelName == '') {
							foundLocations.push(index-foundLocations.length); // Storing index where Model is Null to be removed from Rendered Field List.
						}
					});
					angular.forEach(foundLocations, function(location) {
						$scope.renderCriteriaList.splice(location, 1); // Removing Values from rendered field list by index
					});
					
					// Add a Dummy in Last. 
					var temp = {};
					temp.modelName = '';
					temp.fieldAPIName = '';
					temp.fieldDisplayType = '';
					$scope.renderCriteriaList.push(temp);
				}
				
				// Method to Add More Required Conditions
				$scope.addMoreRequiredCondition = function() {
					var foundLocations = [];
					angular.forEach($scope.requiredCriteriaList, function(criteriaObj, index) {
						if(criteriaObj.modelName == '') {
							foundLocations.push(index-foundLocations.length); // Storing index where Model is Null to be removed from Required Field List.
						}
					});
					angular.forEach(foundLocations, function(location) {
						$scope.requiredCriteriaList.splice(location, 1);
					});
					// Add a Dummy in Last. 
					var temp = {};
					temp.modelName = '';
					temp.fieldAPIName = '';
					temp.fieldDisplayType = '';
					$scope.requiredCriteriaList.push(temp);
				}
				
				// Method to Add More Criteria Conditions
				$scope.addMoreCriteriaCondition = function() {
					var modelCriteriaLocations = [];
					angular.forEach($scope.modelCriteriaList, function(criteriaObj, index) {
						if(criteriaObj.fieldAPIName == '') {
							modelCriteriaLocations.push(index-modelCriteriaLocations.length); // Storing index where Model is Null to be removed from Required Field List.
						}
					});
					angular.forEach(modelCriteriaLocations, function(location) {
						$scope.modelCriteriaList.splice(location, 1);
					});
					// Add a Dummy in Last. 
					var temp = {};
					temp.fieldAPIName = '';
					$scope.modelCriteriaList.push(temp);
				}
				
				// Method Set lookup Record Criteria Model Values.
				$scope.getLookupRecordCriteriaModelValues = function() {
					$scope.lookupRecordCriteriaModelValues = $scope.getSectionAndModelFields(false, false, true);
				}
				
				// Method to Remove Conditions
				$scope.removeCondition = function(index) {
					$scope.lookupRecordCriteriaList.splice(index, 1);
				}
				
				// Method to Remove Render Condition
				$scope.removeRenderedCondition = function(index) {
					$scope.renderCriteriaList.splice(index, 1);
				}
				
				// Method to Remove Required Condition
				$scope.removeRequiredCondition = function(index) {
					$scope.requiredCriteriaList.splice(index, 1);
				}
				
				//Added by Axita Soni
				// Method to Remove  Criteria Conditions
				$scope.removeCriteriaCondition = function(index) {
					$scope.modelCriteriaList.splice(index, 1);
				}
				
				// To Show Configure Drop Down Model
				$scope.showConfigureDependentDropdown = function(key) {
					$scope.isShowUpdateField = false;
		            $scope.configureDependentDropdown = true;
		            $scope.selectedFieldForConfigure = key;
		            $scope.selectedValue = {};
				}
				
				// Configure Dependent Picklist Map.
				$scope.configurePicklistDependencyMap = function(key) {
					// Creating a Map using selected field dependency Map Value. 
					$scope.dropdownDependentMap[key] = {};
					var tempString = $scope.selectedField.picklistDependencyMap[key];
					var selectedList =  (undefined != tempString && tempString != '') ? tempString.split(';') : [];
					var dependentMap = {};
					for(x=0; x<selectedList.length; x++) {
						dependentMap[selectedList[x].split('-$#-')[0]] = (undefined != selectedList[x].split('-$#-')[1] && selectedList[x].split('-$#-')[1] != null) ? selectedList[x].split('-$#-')[1] : '';
					}
					if(undefined != key && key != '') {
						jQuery('#loadingImageDiv').addClass('show');
						var dependentObjectName;
						var controllingObjectName;
						angular.forEach($scope.selectedModelList, function(selectedModel) {
							if(selectedModel.modelName == key.split('----')[0]) {
								dependentObjectName = selectedModel.objectAPIName;
							}
							if(selectedModel.modelName == $scope.selectedField.modelName) {
								controllingObjectName = selectedModel.objectAPIName;
							}
						});
						Visualforce.remoting.Manager.invokeAction(
		           			'{!$RemoteAction.NewEditPortalPageController.getDependencyMapWrapper}', // Remote Call to Get Dependency Map.
		           			dependentObjectName,
		           			controllingObjectName,
		           			key.split('----')[1],
		           			$scope.selectedField.fieldAPIName,
		           			function(result, event){
		            			if (event.status) {
		            				angular.forEach(result, function(valueList, key) {
		            					angular.forEach(valueList, function(element) {
		            						if(dependentMap[key] != undefined && dependentMap[key] != null) {
		            							if(dependentMap[key].indexOf(element.value) > -1) { // Check Map Contains the element ? 
		            								element.isChecked = true; // 
		            							}
		            						}
		            					})
		            				});
		            				// Update Dropdown dependency Map.
		            				$scope.$apply(function() {
		            					$scope.dropdownDependentMap[key] = result;
		            					$scope.updatePicklistDependencyMap(false, key);
		            				});
		            			} else if (event.type === 'exception') {
			            			alert('Some thing went wrong. Please try after some time.')
			            		}
		            			jQuery('#loadingImageDiv').removeClass('show');
		            			jQuery('#loadingImageDiv').addClass('hide');
			            	}, 
		                   	{escape: true}
						);
					} else {
						alert('Please select dependent field.')
					}				
				}
				
				// To hide Configure Dendepenent Map Model
				$scope.hideConfigureDependentDropdown = function() {
	    			$scope.configureDependentDropdown = false;
	    			$scope.isShowUpdateField = true;
				}
				
				// Previous Dependent Picklist Field to show Alert.
				var previousPicklistDependentField = '';
				$scope.selectedFieldForConfigure = '';
				// Method to Create a Map String 
				$scope.updatePicklistDependencyMap = function(isHide, key) {
					var tempStr = '';
					var tempMap = $scope.dropdownDependentMap[key];
					angular.forEach(tempMap, function(dependentObjList, dependentKey) {
						tempStr += dependentKey + '-$#-' + $scope.getDelimiterSperatedString(dependentObjList, '#$#$') + ';';
					});
					if(tempStr.length > 0) {
						tempStr = tempStr.substring(0, tempStr.length-1);
					}
					$scope.selectedField.picklistDependencyMap[key] = tempStr;
					if(isHide) {
						$scope.hideConfigureDependentDropdown();
					}
				}
				
				// Return a String with Delimiter Seperated.
				$scope.getDelimiterSperatedString = function(objList, delimiter) {
					var tempList = [];
					var seperator = delimiter || ',';
					angular.forEach(objList, function(obj) {
						if(obj.isChecked) {
							tempList.push(obj.value);
						}
					});
					return tempList.join(seperator);
				}
				
				// Method to Update Render Criteria
				$scope.updateConditionCriteria = function() {
					if(!$scope.selectedField.rendered) {
						$scope.getRenderCriterialFields();
						if(undefined == $scope.renderCriteriaList || $scope.renderCriteriaList == null || $scope.renderCriteriaList.length == 0) {
							$scope.renderCriteriaList = [];
							var temp = {};
							temp.modelName = '';
							temp.fieldAPIName = '';
							temp.fieldDisplayType = '';
							$scope.renderCriteriaList.push(temp);
						}
					}
				}
				
				// Method to Update Required Criteria
				$scope.updateRequiredConditionCriteria = function() {
					if($scope.selectedField.required == 'condition') {
						$scope.getRequiredCriterialFields();
						if(undefined == $scope.requiredCriteriaList || $scope.requiredCriteriaList == null || $scope.requiredCriteriaList.length == 0) {
							$scope.requiredCriteriaList = [];
							var temp = {};
							temp.modelName = '';
							temp.fieldAPIName = '';
							temp.fieldDisplayType = '';
							$scope.requiredCriteriaList.push(temp);
						}
					}
				}
				
				/* Added By Axita */
				// Method to Update Model Criterai Condition
				$scope.updateModelConditionCriteria = function() {
					if(undefined == $scope.modelCriteriaList || $scope.modelCriteriaList == null || $scope.modelCriteriaList.length == 0) { // If Blank then Intilize with a dummy.
						$scope.modelCriteriaList = [];
						var temp = {};
						temp.modelName = '';
						temp.fieldAPIName = '';
						temp.fieldDisplayType = '';
						temp.fieldOperator = '';
						temp.valueType = '';
						temp.value = '';
						$scope.modelCriteriaList.push(temp); // Pushing a dummy record.
					}
				}
				
				/* Added By Axita */
				
				// Method Set lookup Record Criteria Model Values.
				$scope.getRenderCriterialFields = function() {
					$scope.renderCriterialFields = $scope.getSectionAndModelFields(true, true, true);
				}
				
				// Method Set lookup Record Criteria Model Values.
				$scope.getRequiredCriterialFields = function() {
					$scope.requiredCriterialFields = $scope.getSectionAndModelFields(true, true, true);
				}
				
				// Method Return all Fields from Section
				$scope.getSectionFields = function(isFirstBlank, isSetFieldType, isIncludeReferenceField) {
					var modelFields = [];
					if(isFirstBlank) {
						var temp = {};
						temp.fieldName = '--None--';
						temp.fieldAPIName = '';
						modelFields.push(temp);
					}
					// Getting All Fields from Section.
					angular.forEach($scope.sectionMap, function(sectionObj, key){
						angular.forEach(sectionObj.field, function(fieldObj){
							if(!(fieldObj.modelName == $scope.selectedField.modelName && fieldObj.fieldAPIName == $scope.selectedField.fieldAPIName) 
								&& fieldObj.fieldDisplayType.toUpperCase() != 'UPLOAD' && (isIncludeReferenceField || (!isIncludeReferenceField && fieldObj.fieldDisplayType.toUpperCase() != 'REFERENCE'))) {
								var temp = {};
								temp.fieldName = fieldObj.fieldName;
								temp.fieldAPIName = fieldObj.fieldAPIName;
								temp.modelName = fieldObj.modelName;
								if(isSetFieldType) {
									temp.fieldDisplayType = fieldObj.fieldDisplayType
								}
								modelFields.push(temp);
							}
						});
					});
					return modelFields;
				}
				
				// Method Returns Section and Model Fields.
				$scope.getSectionAndModelFields = function(isFirstBlank, isSetFieldType, isIncludeReferenceField) {
					var modelFields = [];
					if(isFirstBlank) {
						var temp = {};
						temp.fieldName = '--None--';
						temp.fieldAPIName = '';
						modelFields.push(temp);
					}
					// Getting all Fields from Section
					angular.forEach($scope.sectionMap, function(sectionObj, key){
						angular.forEach(sectionObj.field, function(fieldObj){
							if(!(fieldObj.modelName == $scope.selectedField.modelName && fieldObj.fieldAPIName == $scope.selectedField.fieldAPIName) 
								&& fieldObj.fieldDisplayType.toUpperCase() != 'UPLOAD' && (isIncludeReferenceField || (!isIncludeReferenceField && fieldObj.fieldDisplayType.toUpperCase() != 'REFERENCE'))) {
								var temp = {};
								temp.fieldName = fieldObj.fieldName;
								temp.fieldAPIName = fieldObj.fieldAPIName;
								temp.modelName = fieldObj.modelName;
								if(isSetFieldType) {
									temp.fieldDisplayType = fieldObj.fieldDisplayType
								}
								modelFields.push(temp);
							}
						});
					});
					// Getting All Fields from Model.
					angular.forEach($scope.selectedModelList, function(modelObject) {
						angular.forEach(modelObject.field, function(fieldObject) {
							if((isIncludeReferenceField || (!isIncludeReferenceField && fieldObject.fieldDisplayType.toUpperCase() != 'REFERENCE'))) {
								var temp = {};
								temp.fieldName = fieldObject.fieldName;
								temp.fieldAPIName = fieldObject.fieldAPIName;
								temp.modelName = fieldObject.modelName;
								if(isSetFieldType) {
									temp.fieldDisplayType = fieldObject.fieldDisplayType
								}
								modelFields.push(temp);
							}
						});
					});
					return modelFields;
				}
				
				// This Method set the field Type for Rendered Type Field on Field Change
				$scope.setFieldType = function(index, modelName, fieldAPIName) {
					$scope.referencedObjectValues = [];
					var fieldDisplayType = '';
					angular.forEach($scope.renderCriterialFields, function(fieldObj) {
						if(fieldObj.modelName == modelName && fieldObj.fieldAPIName == fieldAPIName) {
							fieldDisplayType = fieldObj.fieldDisplayType;
						}
					});
					// If Type Reference Than get Field Object Name
					if(fieldDisplayType == 'REFERENCE') {
						jQuery('#loadingImageDiv').addClass('show');
						var objectName;
						angular.forEach($scope.selectedModelList, function(selectedModel) {
							if(selectedModel.modelName == modelName) {
								objectName = selectedModel.objectAPIName;
							}
						});
						Visualforce.remoting.Manager.invokeAction(
	           				'{!$RemoteAction.NewEditPortalPageController.getSelectedObjectTypeByField}',
	           				objectName,
	           				fieldAPIName,
	           				function(result, event){
		            			if (event.status) {
		            				// Setting Rendered Condition Field Object
		            				var renderedList = angular.copy($scope.renderCriteriaList);
									renderedList[index].fieldDisplayType = fieldDisplayType;
									renderedList[index].value = '';
									renderedList[index].displayValue = '';
									renderedList[index].fieldOperator = 'equals';
									renderedList[index].referencedObjectName = result;
									$scope.$apply(function() {
										$scope.renderCriteriaList = renderedList;
									});
		            			} else if (event.type === 'exception') {
			            			alert('Some thing went wrong. Please try after some time.')
			            		}
			            		jQuery('#loadingImageDiv').removeClass('show');
		            			jQuery('#loadingImageDiv').addClass('hide');
	            			}, 
		                   	{escape: true}
						); 
	           				
					} else {
						var renderedList = angular.copy($scope.renderCriteriaList)
						renderedList[index].fieldDisplayType = fieldDisplayType;
						renderedList[index].value = '';
						renderedList[index].displayValue = '';
						renderedList[index].fieldOperator = 'equals';
						renderedList[index].referencedObjectName = '';
						$scope.renderCriteriaList = renderedList;
					}			
				}
				
				// This Method set the field Type for Required Type Field on Field Change
				$scope.setRequiredFieldType = function(index, modelName, fieldAPIName) {
					$scope.referencedRequiredObjectValues = [];
					var fieldDisplayType = '';
					angular.forEach($scope.requiredCriterialFields, function(fieldObj) {
						if(fieldObj.modelName == modelName && fieldObj.fieldAPIName == fieldAPIName) {
							fieldDisplayType = fieldObj.fieldDisplayType;
						}
					});
					// If Type Reference Than get Field Object Name
					if(fieldDisplayType == 'REFERENCE') {
						jQuery('#loadingImageDiv').addClass('show');
						var objectName;
						angular.forEach($scope.selectedModelList, function(selectedModel) {
							if(selectedModel.modelName == modelName) {
								objectName = selectedModel.objectAPIName;
							}
						});
						Visualforce.remoting.Manager.invokeAction(
	           				'{!$RemoteAction.NewEditPortalPageController.getSelectedObjectTypeByField}',
	           				objectName,
	           				fieldAPIName,
	           				function(result, event){
		            			if (event.status) {
		            				// Setting Required Condition Field Object
		            				var requiredList = angular.copy($scope.requiredCriteriaList);
									requiredList[index].fieldDisplayType = fieldDisplayType;
									requiredList[index].value = '';
									requiredList[index].displayValue = '';
									requiredList[index].fieldOperator = 'equals';
									requiredList[index].referencedObjectName = result;
									$scope.$apply(function() {
										$scope.requiredCriteriaList = requiredList;
									});
		            			} else if (event.type === 'exception') {
			            			alert('Some thing went wrong. Please try after some time.')
			            		}
			            		jQuery('#loadingImageDiv').removeClass('show');
		            			jQuery('#loadingImageDiv').addClass('hide');
	            			}, 
		                   	{escape: true}
						); 
	           				
					} else {
						var requiredList = angular.copy($scope.requiredCriteriaList)
						requiredList[index].fieldDisplayType = fieldDisplayType;
						requiredList[index].value = '';
						requiredList[index].displayValue = '';
						requiredList[index].fieldOperator = 'equals';
						requiredList[index].referencedObjectName = '';
						$scope.requiredCriteriaList = requiredList;
					}			
				}
				
				// This Method set the field Type for Required Type Field on Field Change
				$scope.setCriteriaFieldType = function(index, fieldAPIName) {
					$scope.referencedRequiredObjectValues = [];
					var fieldDisplayType = '';
					angular.forEach($scope.fields.fieldList, function(fieldObj) {
						if( fieldObj.fieldAPIName == fieldAPIName) {
							fieldDisplayType = fieldObj.fieldDisplayType;
						}
					});
					// If Type Reference Than get Field Object Name
					if(fieldDisplayType == 'REFERENCE') {
						jQuery('#loadingImageDiv').addClass('show');
						
						Visualforce.remoting.Manager.invokeAction(
	           				'{!$RemoteAction.NewEditPortalPageController.getSelectedObjectTypeByField}',
	           				$scope.fields.objectAPIName,
	           				fieldAPIName,
	           				function(result, event){
		            			if (event.status) {
		            				// Setting Required Condition Field Object
		            				var criteriaList = angular.copy($scope.modelCriteriaList);
									criteriaList[index].fieldDisplayType = fieldDisplayType;
									criteriaList[index].value = '';
									criteriaList[index].displayValue = '';
									criteriaList[index].fieldOperator = 'equals';
									criteriaList[index].referencedObjectName = result;
									$scope.$apply(function() {
										$scope.modelCriteriaList = criteriaList;
									});
		            			} else if (event.type === 'exception') {
			            			alert('Some thing went wrong. Please try after some time.')
			            		}
			            		jQuery('#loadingImageDiv').removeClass('show');
		            			jQuery('#loadingImageDiv').addClass('hide');
	            			}, 
		                   	{escape: true}
						); 
	           				
					} else if(fieldDisplayType.toUpperCase() == 'ID' && fieldAPIName.toUpperCase() == 'ID') {
						var criteriaList = angular.copy($scope.modelCriteriaList)
						criteriaList[index].fieldDisplayType = fieldDisplayType;
						criteriaList[index].value = '';
						criteriaList[index].displayValue = '';
						criteriaList[index].fieldOperator = 'equals';
						criteriaList[index].referencedObjectName = $scope.fields.objectAPIName;
						$scope.modelCriteriaList = criteriaList;
					}else {
						var criteriaList = angular.copy($scope.modelCriteriaList)
						criteriaList[index].fieldDisplayType = fieldDisplayType;
						criteriaList[index].value = '';
						criteriaList[index].displayValue = '';
						criteriaList[index].fieldOperator = 'equals';
						criteriaList[index].referencedObjectName = '';
						$scope.modelCriteriaList = criteriaList;
					}		
				}
				
				// Method to Get Lookup Records by Object Name and Index value for Rendered Criteria Reference Field 
				$scope.getLookupRecords = function(index, objectName, searchString) {
					$scope.referencedObjectValues = [];
					jQuery("[id^=lookupCriteriaList-]").addClass('hide');
					jQuery("[id^=lookupCriteriaList-]").removeClass('show');
					if(undefined != searchString && searchString.trim() != '') {
						// Calling Remote Action to Get Object.
						Visualforce.remoting.Manager.invokeAction(
							'{!$RemoteAction.NewEditPortalPageController.getLookupRecords}',
							objectName,
							searchString,
							function(result, event){
								jQuery("#lookupCriteriaList-" + index).removeClass('hide');
								jQuery("#lookupCriteriaList-" + index).addClass('show');
								$scope.$apply(function() {
									$scope.referencedObjectValues = result;								
								});
							}, 
							{escape: true}
						);
					}
				}
				
				// Method to Get Lookup Records by Object Name and Index value for Required Criteria Reference Field
				$scope.getRequiredLookupRecords = function(index, objectName, searchString) {
					$scope.referencedRequiredObjectValues = [];
					jQuery("[id^=requiredLookupCriteriaList-]").addClass('hide');
					jQuery("[id^=requiredLookupCriteriaList-]").removeClass('show');
					if(undefined != searchString && searchString.trim() != '') {
						// Calling Remote Action to Get Object.
						Visualforce.remoting.Manager.invokeAction(
							'{!$RemoteAction.NewEditPortalPageController.getLookupRecords}',
							objectName,
							searchString,
							function(result, event){
								jQuery("#requiredLookupCriteriaList-" + index).removeClass('hide');
								jQuery("#requiredLookupCriteriaList-" + index).addClass('show');
								$scope.$apply(function() {
									$scope.referencedRequiredObjectValues = result;								
								});
							}, 
							{escape: true}
						);
					}
				}
				
				$scope.getModelCriteriaRecords = function(index, objectName, searchString) {
					$scope.referencedModelCriteriaObjectValues = [];
					jQuery("[id^=modelCriteriaLookupCriteriaList-]").addClass('hide');
					jQuery("[id^=modelCriteriaLookupCriteriaList-]").removeClass('show');
					if(undefined != searchString && searchString.trim() != '') {
						// Calling Remote Action to Get Object.
						Visualforce.remoting.Manager.invokeAction(
							'{!$RemoteAction.NewEditPortalPageController.getLookupRecords}',
							objectName,
							searchString,
							function(result, event){
								jQuery("#modelCriteriaLookupCriteriaList-" + index).removeClass('hide');
								jQuery("#modelCriteriaLookupCriteriaList-" + index).addClass('show');
								$scope.$apply(function() {
									$scope.referencedModelCriteriaObjectValues = result;								
								});
							}, 
							{escape: true}
						);
					}
				}
				
				// Method Call When user Selects Lookup Value for Rendered Criteria Reference Object
				$scope.selectReferencedObjectValue = function(index, value, name) {
					var renderedList = angular.copy($scope.renderCriteriaList);
					renderedList[index].lookupstring = '';
					var tempValueList = [];
					var tempDisplayList = [];
					if(undefined != renderedList[index].value && renderedList[index].value != '') {
						tempValueList = renderedList[index].value.split(',');
					}
					if(undefined != renderedList[index].displayValue && renderedList[index].displayValue != '') {
						tempDisplayList = renderedList[index].displayValue.split(',');
					}
					// Check Duplicate. If Not Found than Added into List.
					if(tempValueList.indexOf(value) == -1) {
						tempValueList.push(value);
						tempDisplayList.push(name);
					}
					renderedList[index].value = tempValueList.join(','); // Setting value with comma seperated.
					renderedList[index].displayValue = tempDisplayList.join(',');
					$scope.renderCriteriaList = renderedList;
					jQuery("#lookupCriteriaList-" + index).removeClass('show');
					jQuery("#lookupCriteriaList-" + index).addClass('hide');
				}
				
				// Method Call When user Selects Lookup Value for Required Criteria Reference Object
				$scope.selectReferencedRequiredObjectValue = function(index, value, name) {
					var requiredList = angular.copy($scope.requiredCriteriaList);
					requiredList[index].lookupstring = '';
					var tempValueList = [];
					var tempDisplayList = [];
					if(undefined != requiredList[index].value && requiredList[index].value != '') {
						tempValueList = requiredList[index].value.split(',');
					}
					if(undefined != requiredList[index].displayValue && requiredList[index].displayValue != '') {
						tempDisplayList = requiredList[index].displayValue.split(',');
					}
					// Check Duplicate. If Not Found than Added into List.
					if(tempValueList.indexOf(value) == -1) {
						tempValueList.push(value);
						tempDisplayList.push(name);
					}
					requiredList[index].value = tempValueList.join(','); // Setting value with comma seperated.
					requiredList[index].displayValue = tempDisplayList.join(',');
					$scope.requiredCriteriaList = requiredList;
					jQuery("#requiredLookupCriteriaList-" + index).removeClass('show');
					jQuery("#requiredLookupCriteriaList-" + index).addClass('hide');
				}
				
				// Method Call When user Selects Lookup Value for Model Criteria Reference Object
				$scope.selectReferencedModelCriteriaObjectValue = function(index, value, name) {
					var modelCriteriaList = angular.copy($scope.modelCriteriaList);
					modelCriteriaList[index].lookupstring = '';
					var tempValueList = [];
					var tempDisplayList = [];
					if(undefined != modelCriteriaList[index].value && modelCriteriaList[index].value != '') {
						tempValueList = modelCriteriaList[index].value.split(',');
					}
					if(undefined != modelCriteriaList[index].displayValue && modelCriteriaList[index].displayValue != '') {
						tempDisplayList = modelCriteriaList[index].displayValue.split(',');
					}
					// Check Duplicate. If Not Found than Added into List.
					if(tempValueList.indexOf(value) == -1) {
						tempValueList.push(value);
						tempDisplayList.push(name);
					}
					modelCriteriaList[index].value = tempValueList.join(','); // Setting value with comma seperated.
					modelCriteriaList[index].displayValue = tempDisplayList.join(',');
					$scope.modelCriteriaList = modelCriteriaList;
					jQuery("#modelCriteriaLookupCriteriaList-" + index).removeClass('show');
					jQuery("#modelCriteriaLookupCriteriaList-" + index).addClass('hide');
				}
				
				// Remove Selected Value from Lookup Selected Value for Rendered Field Criteria
				$scope.removeSelectedLookupValue = function(index, parentIndex) {
					var renderedList = angular.copy($scope.renderCriteriaList);
					var tempValueList = renderedList[parentIndex].value.split(',');
					var tempDisplayList = renderedList[parentIndex].displayValue.split(',');
					tempValueList.splice(index, 1);
					tempDisplayList.splice(index, 1);
					renderedList[parentIndex].value = tempValueList.join(','); // Setting value with comma seperated.
					renderedList[parentIndex].displayValue = tempDisplayList.join(',');
					$scope.renderCriteriaList = renderedList;
				}
				
				// Remove Selected Value from Lookup Selected Value for Required Field Criteria
				$scope.removeSelectedRequiredLookupValue = function(index, parentIndex) {
					var requiredList = angular.copy($scope.requiredCriteriaList);
					var tempValueList = requiredList[parentIndex].value.split(',');
					var tempDisplayList = requiredList[parentIndex].displayValue.split(',');
					tempValueList.splice(index, 1);
					tempDisplayList.splice(index, 1);
					requiredList[parentIndex].value = tempValueList.join(','); // Setting value with comma seperated.
					requiredList[parentIndex].displayValue = tempDisplayList.join(',');
					$scope.requiredCriteriaList = requiredList;
				}
				
				// Remove Selected Value from Lookup Selected Value for Model Criteria Field Criteria
				$scope.removeSelectedModelCriteriaLookupValue = function(index, parentIndex) {
					var modelCriteriaList = angular.copy($scope.modelCriteriaList);
					var tempValueList = modelCriteriaList[parentIndex].value.split(',');
					var tempDisplayList = modelCriteriaList[parentIndex].displayValue.split(',');
					tempValueList.splice(index, 1);
					tempDisplayList.splice(index, 1);
					modelCriteriaList[parentIndex].value = tempValueList.join(','); // Setting value with comma seperated.
					modelCriteriaList[parentIndex].displayValue = tempDisplayList.join(',');
					$scope.modelCriteriaList = modelCriteriaList;
				}
				
				// This Method Call From Child Window to Set Selected Picklist values
				$scope.updatePicklistlookupValue = function(index, valueObjList, type) {
					if(type == 'RENDERED') {
						var renderedList = angular.copy($scope.renderCriteriaList);
						var tempValueList = [];
						var tempDisplayList = [];
						angular.forEach(valueObjList, function(valueObj) {
							tempValueList.push(valueObj.value);
							tempDisplayList.push(valueObj.label);
						});
						renderedList[index].value = tempValueList.join(',');
						renderedList[index].displayValue = tempDisplayList.join(',');
						$scope.$apply(function() {
							$scope.renderCriteriaList = renderedList;					
						});
					} else if(type == 'REQUIRED') {
						var requiredList = angular.copy($scope.requiredCriteriaList);
						var tempValueList = [];
						var tempDisplayList = [];
						angular.forEach(valueObjList, function(valueObj) {
							tempValueList.push(valueObj.value);
							tempDisplayList.push(valueObj.label);
						});
						requiredList[index].value = tempValueList.join(',');
						requiredList[index].displayValue = tempDisplayList.join(',');
						$scope.$apply(function() {
							$scope.requiredCriteriaList = requiredList;					
						});
					} else if(type == 'MODELCRITERIA') {
						var modelCriteriaList = angular.copy($scope.modelCriteriaList);
						var tempValueList = [];
						var tempDisplayList = [];
						angular.forEach(valueObjList, function(valueObj) {
							tempValueList.push(valueObj.value);
							tempDisplayList.push(valueObj.label);
						});
						modelCriteriaList[index].value = tempValueList.join(',');
						modelCriteriaList[index].displayValue = tempDisplayList.join(',');
						$scope.$apply(function() {
							$scope.modelCriteriaList = modelCriteriaList;					
						});
					}
					
					if (null!=newWin) {              
	              		newWin.close();
		           	}
				}
				
				// New Window Variable
				var newWin = null;
				// Method to Open Popup.
				$scope.openLookupPopup = function(parentIndex) { 
					var prefix = '{!JSENCODE(getPrefix)}';
					if(prefix != ''){  
					  	prefix = prefix + '__';
					}
					var objectName = '';
					angular.forEach($scope.selectedModelList, function(sectionObj) {
						if(sectionObj.modelName == $scope.renderCriteriaList[parentIndex].modelName) {
							objectName = sectionObj.objectAPIName;
						}
					});
					var fieldName = $scope.renderCriteriaList[parentIndex].fieldAPIName;
					var value = $scope.renderCriteriaList[parentIndex].value;
					var url = "/apex/"+prefix+"PortalPackagePicklistValueLookup?objectName=" + objectName + "&fieldName=" + fieldName + "&fieldValue=" + value + "&index=" + parentIndex + "&type=" + "RENDERED" + "&isMultiSelect=true";
					
					newWin=window.open(url, 'Popup','height=500,width=600,left=100,top=50,resizable=no,scrollbars=yes,toolbar=no,status=no');
					
					if (window.focus) {
						newWin.focus();
					}            
					
					return false;
				}
				
				// Method to Open Popup for Required Field Selected Picklist Value.
				$scope.openRequiredLookupPopup = function(parentIndex) { 
					var prefix = '{!JSENCODE(getPrefix)}';
					if(prefix != ''){  
					  	prefix = prefix + '__';
					}
					var objectName = '';
					angular.forEach($scope.selectedModelList, function(sectionObj) {
						if(sectionObj.modelName == $scope.requiredCriteriaList[parentIndex].modelName) {
							objectName = sectionObj.objectAPIName;
						}
					});
					var fieldName = $scope.requiredCriteriaList[parentIndex].fieldAPIName;
					var value = $scope.requiredCriteriaList[parentIndex].value;
					var url = "/apex/"+prefix+"PortalPackagePicklistValueLookup?objectName=" + objectName + "&fieldName=" + fieldName + "&fieldValue=" + value + "&index=" + parentIndex + "&type=" + "REQUIRED" + "&isMultiSelect=true";
					
					newWin=window.open(url, 'Popup','height=500,width=600,left=100,top=50,resizable=no,scrollbars=yes,toolbar=no,status=no');
					
					if (window.focus) {
						newWin.focus();
					}            
					
					return false;
				}
				
				// Method to Open Popup for Model Criteria Field Selected Picklist Value.
				$scope.openModelCriteriaLookupPopup = function(parentIndex) { 
					var prefix = '{!JSENCODE(getPrefix)}';
					if(prefix != ''){  
					  	prefix = prefix + '__';
					}
					var fieldName = $scope.modelCriteriaList[parentIndex].fieldAPIName;
					var value = $scope.modelCriteriaList[parentIndex].value;
					var url = "/apex/"+prefix+"PortalPackagePicklistValueLookup?objectName=" + $scope.fields.objectAPIName + "&fieldName=" + fieldName + "&fieldValue=" + value + "&index=" + parentIndex + "&type=" + "MODELCRITERIA" + "&isMultiSelect=false";
					
					newWin=window.open(url, 'Popup','height=500,width=600,left=100,top=50,resizable=no,scrollbars=yes,toolbar=no,status=no');
					
					if (window.focus) {
						newWin.focus();
					}            
					
					return false;
				}
				
				// Method to Update The Criteria map when Dependent Field Check or UnChecked
				$scope.updateCriteriaMap = function(index, type) {
					var currentField = $scope.referenceFieldList[index];
					if(currentField.isChecked) { // Checking Checkbox is Checked
						$scope.fieldCriteriaMap[currentField.modelName + '----' + currentField.fieldAPIName] = ''; // Add in Field Criteria Map
						if(type == 'REFERENCE') {
							$scope.getLookupCriteriaFieldName(currentField.modelName + '----' + currentField.fieldAPIName);
						} else if(type == 'PICKLIST') {
							$scope.selectedField.picklistDependencyMap[currentField.modelName + '----' + currentField.fieldAPIName] = '';
							$scope.configurePicklistDependencyMap(currentField.modelName + '----' + currentField.fieldAPIName);
						}
					} else { // if Uncheck Removing all the value from map for unchecked field
						angular.forEach($scope.sectionMap, function(sectionObj, key) {
							angular.forEach(sectionObj.field, function(fieldObj){
								if(fieldObj.modelName + '----' + fieldObj.fieldAPIName == currentField.modelName + '----' + currentField.fieldAPIName) {
									fieldObj.isdependentField = false; // Setting is Dependent false when update controlling field false.
								}
							});
						});
						if(type == 'REFERENCE') {
							delete $scope.fieldCriteriaMap[currentField.modelName + '----' + currentField.fieldAPIName];
							delete $scope.fieldCriteriaListMap[currentField.modelName + '----' + currentField.fieldAPIName];
						} else if(type == 'PICKLIST') {
							delete $scope.fieldCriteriaMap[currentField.modelName + '----' + currentField.fieldAPIName];
							delete $scope.dropdownDependentMap[currentField.modelName + '----' + currentField.fieldAPIName];
							delete $scope.selectedField.picklistDependencyMap[currentField.modelName + '----' + currentField.fieldAPIName];
						}
					}
				}
				
				// Method returns field Name by Key (Key Contains ModelName----FieldAPIName)
				$scope.getFieldNameByFieldKey = function(key) {
					var fieldName = '';
					angular.forEach($scope.sectionMap, function(sectionObj) {
						angular.forEach(sectionObj.field, function(fieldObj) {
							if(fieldObj.modelName == key.split('----')[0] && fieldObj.fieldAPIName == key.split('----')[1]) {
								fieldName = fieldObj.fieldName;
								return fieldName;
							}
						});
					});
					return fieldName;
				}
				
				$scope.validateCustomConditionFormat = function(string, isAgg, conditionList) {
			        isAgg = isAgg ? isAgg : false;
			        string = string ? string : '';
			        //pad all digits with space on both sides, split with space and remove empty strings.
			        //result is an array of this type: [ "(", "1", "and", "2", ")", "or", "3" ]
			        var formattedString = string.replace(new RegExp('[()]|[\\\d]+', 'g'), ' $& ').split(" ").clean("");
			        //init vars
			        var parenBalance = 0; //balance of open/close parens
			        var openParenPlace = -2; //index of open paren in array
			        var closeParenPlace = -2; //index of close paren in array
			        var wordPlace = -2; //index of word in array
			        var numPlace = -2; //index of num in array
			        var listOfNumbers = []; //array containing numbers that appear in parser
			        var listOfConds = conditionList;
			        for (var i = 0; i < formattedString.length; i++) { //loop through array
			            if (formattedString[i] == "(") { //if this unit is open paren
			                parenBalance++; //add 1 to balance
			                openParenPlace = i; //set open paren index
			                if (closeParenPlace + 1 == i && closeParenPlace > -1) { //checks if there was a close paren directly before
			                    //this means there is an illegal construct in string of the form ")("
			                    return "Invalid syntax: Empty set of parentheses";
			                } else if (numPlace + 1 == i && numPlace > -1) { //checks if there was number directly before 
			                    //this means there is an illegal construct in string of the form "1 ("
			                    // DEBUG && console.log("INVALID SYNTAX - NUMBER THEN OPEN PAREN");
			                    return "Invalid syntax: Number followed by opening parenthesis";
			                }
			            } else if (formattedString[i] == ")") { //if this unit is close paren
			                parenBalance--; //subtract 1 from balance
			                closeParenPlace = i; //set close paren index
			                if (i == 0) {
			                    // DEBUG && console.log("INVALID SYNTAX - CANNOT START WITH OPEN PAREN");
			                    return "Invalid syntax: Cannot begin string with closing parenthesis";
			                } else if (openParenPlace + 1 == i) { //checks if there was an open paren directly before
			                    //this means there is an illegal construct in string of the form "()"
			                    return "Invalid syntax: Empty set of parentheses";
			                } else if (wordPlace + 1 == i) { //checks if there was a word directly before
			                    //this means there is an illegal construct in the string of the form "( 1 or )"
			                    return "Invalid syntax: Word followed by closing parenthesis";
			                }
			            } else if (!isNaN(+formattedString[i])) { //if this unit is a number
			                listOfNumbers.push(formattedString[i]);
			                if (closeParenPlace + 1 == i && closeParenPlace > -1) {
			                    //checks if there was a close paren directly before
			                    return "Invalid syntax: Closing parenthesis followed by number";
			                }
			                if (numPlace + 1 == i && numPlace > -1) {
			                    //checks if there was a number directly before  
			                    return "Invalid syntax: Number immediately followed by opening number";
			                }
			                numPlace = i;
			            } else { //not number or paren, so some letter string
			                word = formattedString[i].toUpperCase();
			                if (word == "AND" || word == "OR") {
			                    if (wordPlace + 1 == i && wordPlace > -1) {
			                        //checks if there was a word directly before    
			                        return "Invalid syntax: Word immediately followed by word";
			                    }
			                    if (openParenPlace + 1 == i && openParenPlace > -1) {
			                        //checks if there was an open paren directly before
			                        return "Invalid syntax: Opening parenthesis followed by word";
			                    }
			                    wordPlace = i;
			                    if (i == 0) { //checks if word index is 0, so beginning of string
			                        return "Invalid syntax: Cannot begin string with word";
			                    }
			                    if (i == formattedString.length - 1) { //checks if word is at end of string
			                        return "Invalid syntax: Cannot end string with word";
			                    }
			                } else { //word is not in language
			                    return "Invalid syntax: valid words are AND, OR";
			                }
			            }
			        }
			        //checks paren relations
			        if (parenBalance > 0) {
			            return "Invalid syntax: Unclosed parenthesis.";
			        }
			        if (parenBalance < 0) {
			            return "Invalid syntax: Excess parenthesis";
			        }
			        //number larger than amount of conds
			        if (Math.max.apply(null, listOfNumbers) > listOfConds.length) {
			            return "Invalid input: Condition index out of range";
			        }
			        //mathematical trick to check if all conditions are used
			        var sum = listOfNumbers.reduce(function(pv, cv) {
			            return parseInt(pv) + parseInt(cv);
			        }, 0);
			        var l = isAgg ? listOfHavs.length : listOfConds.length;
			        if (sum != ((l + 1) * l / 2)) {
			            return "Invalid input: Unused condition";
			        }
			        return "VERIFIED";
			    } 	
				
	  			$timeout(function() {
	  				$scope.onLoadFunction();
				});
			});
			
			
			// Angular Service
			createPortalPageApp.factory('createPortalPageService', function($rootScope, $interval, $timeout) {
			var createPortalPageService = {
			
			}
			
			// Method to Connect Sections Dynamically
			createPortalPageService.connectSectionsDynamically = function(options) {
				var scope = (options.scope || $rootScope); 
				jQuery( "#sectionSortable" ).sortable({
					stop:function(event, ui) {
						var secList = [];
						jQuery('#sectionSortable').find('li.section-list').each(function() {
							secList.push(jQuery(this).prop('id'));
						});
						scope.$apply(function() {
							scope.sectionOrderList = secList;
						});
						$timeout(function() {
							scope.onLoadFunction();
						});
					}
				});
			}
			
			// Method to Connect Model and Sections Dynamically.
			createPortalPageService.connectSectionFieldWithModel = function(options) {
				var scope = (options.scope || $rootScope);
				var secMap = angular.copy(scope.sectionMap);
				var selectedMoList = angular.copy(scope.selectedModelList);
				var upldDataList = angular.copy(scope.uploadDataList);
				
				var modelListIds = '';
	            jQuery('.fieldSortable').each(function(i, item) {
	          		modelListIds = modelListIds + '#' + jQuery(this).prop('id') + ',';
	            });
	            modelListIds = modelListIds.length > 0 ? modelListIds.substring(0,modelListIds.length-1) : modelListIds;
	            jQuery('.fieldSortable').sortable({
					connectWith: ".fieldSortable",
					placeholder: "fieldSortable-placeholder",
					start: function(event, ui) {
						//$('.model-list-field-div').addClass('apply-position-static');
					},
					receive: function( event, ui ) {
						// If Move From Model to Section
						if(jQuery(ui.sender).prop('id').indexOf('fieldSortable') > -1 && jQuery(this).prop('id').indexOf('fieldSortable') == -1 && jQuery(this).prop('id').indexOf('uploadComponent') == -1) {
							var sectionKey = jQuery(this).parent().parent().parent().parent().prop('id');
							if(secMap[sectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN") {
								var ulIndex = jQuery('#' + sectionKey).find('.inner-wrapper-left').children().index(jQuery(this).parent());
								var liIndex = jQuery(this).children().index(jQuery(ui.item));
								for(x=0; x<selectedMoList.length; x++) {
									if(selectedMoList[x].modelName == jQuery(ui.item).attr('data-model-type')) {
										for(y=0; y<selectedMoList[x].field.length; y++) {
											if(jQuery(ui.item).attr('data-api-name') == selectedMoList[x].field[y].fieldAPIName) {
												selectedMoList[x].field[y].label = selectedMoList[x].field[y].fieldName;
												selectedMoList[x].field[y].type = selectedMoList[x].field[y].fieldDisplayType;
												if(selectedMoList[x].field[y].type.toUpperCase() == 'REFERENCE') {
													selectedMoList[x].field[y].isFirstValueBlank = true;
													selectedMoList[x].field[y].isControllingField = false;
													selectedMoList[x].field[y].isdependentField = false;
													selectedMoList[x].field[y].lookupRecordCriteria = [];
												} else if (selectedMoList[x].field[y].type.toUpperCase() == 'PICKLIST') {
													selectedMoList[x].field[y].isFirstValueBlank = true;
													selectedMoList[x].field[y].isControllingField = false;
													selectedMoList[x].field[y].isdependentField = false;
												}
												selectedMoList[x].field[y].placeholderText = '';
												selectedMoList[x].field[y].instructionText = '';
												selectedMoList[x].field[y].hoverText = '';
												selectedMoList[x].field[y].instructionTextPosition = '';
												selectedMoList[x].field[y].required = 'false';
												selectedMoList[x].field[y].rendered = true;
												selectedMoList[x].field[y].isBlank  = false;
												secMap[sectionKey].field.splice((ulIndex+liIndex), 0, selectedMoList[x].field[y]);
												selectedMoList[x].field.splice(y, 1);
												break;
											}
										}
									}
								}
							}
						} // If Move Field from Model to Upload 
						else if(jQuery(ui.sender).prop('id').indexOf('fieldSortable') > -1 && jQuery(this).prop('id').indexOf('fieldSortable') == -1 && jQuery(this).prop('id').indexOf('uploadComponent') > -1) {
							alert('You can not placed here.'); // Alert when Upload Move to the Model Part from Section.
							ui.sender.sortable("cancel"); // Cancel Sortable Action.
						}
						 // If Move Field from Section to Section
						else if(jQuery(ui.sender).prop('id').indexOf('fieldSortable') == -1 && jQuery(this).prop('id').indexOf('fieldSortable') == -1 && jQuery(ui.sender).prop('id').indexOf('uploadComponent') == -1 && jQuery(this).prop('id').indexOf('uploadComponent') == -1) {
							var currentSectionKey = jQuery(this).parent().parent().parent().parent().prop('id');
							var previousSectionKey = jQuery(ui.sender).parent().parent().parent().parent().prop('id');
							if(secMap[currentSectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN" && secMap[previousSectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN") {
								if(currentSectionKey == previousSectionKey) { // If Moving Field in Same Section
									var previousIndex = jQuery('#' + currentSectionKey).find('.inner-wrapper-left').children().index(jQuery(ui.sender).parent());
									var currentIndex = jQuery('#' + currentSectionKey).find('.inner-wrapper-left').children().index(jQuery(this).parent());
									var elementIndex = jQuery(this).children().index(jQuery(ui.item));
									if(elementIndex == 0 && previousIndex < currentIndex) {
										currentIndex = currentIndex -1;
									} else if(elementIndex == 1 && previousIndex > currentIndex) {
										currentIndex = currentIndex + 1;
									}
									var tempObject = secMap[currentSectionKey].field[previousIndex];
									secMap[currentSectionKey].field.splice(previousIndex, 1);
									secMap[currentSectionKey].field.splice(currentIndex, 0, tempObject);
								} else { // If Moving Field in Different Section
									var previousIndex = jQuery('#' + previousSectionKey).find('.inner-wrapper-left').children().index(jQuery(ui.sender).parent());
									var currentIndex = jQuery('#' + currentSectionKey).find('.inner-wrapper-left').children().index(jQuery(this).parent());
									var elementIndex = jQuery(this).children().index(jQuery(ui.item));
									var tempObject = secMap[previousSectionKey].field[previousIndex];
									secMap[previousSectionKey].field.splice(previousIndex, 1);
									secMap[currentSectionKey].field.splice((currentIndex+elementIndex), 0, tempObject);
								}
							}
						} // If Move Field From Section to Model 
						else if(jQuery(ui.sender).prop('id').indexOf('fieldSortable') == -1 && jQuery(this).prop('id').indexOf('fieldSortable') > -1 && jQuery(ui.sender).prop('id').indexOf('uploadComponent') == -1) {
							if(jQuery(ui.item).attr('data-model-type') == jQuery(this).attr('data-model-type')) {
								var modelName = jQuery(this).attr('data-model-type');
								var sectionKey = jQuery(ui.sender).parent().parent().parent().parent().prop('id');
								var currentIndex = jQuery(this).children().index(jQuery(ui.item));
								var itemToRemoveIndex = -1;
								if(secMap[sectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN") {
									for(x=0; x<secMap[sectionKey].field.length; x++) {
										if(secMap[sectionKey].field[x].fieldAPIName == jQuery(ui.item).attr('data-api-name') && secMap[sectionKey].field[x].modelName == jQuery(ui.item).attr('data-model-type')) {
											itemToRemoveIndex = x;
											break;
										}
									}
								}
								if(itemToRemoveIndex != -1) {
									for(y=0; y<selectedMoList.length; y++) {
										if(selectedMoList[y].modelName == jQuery(ui.item).attr('data-model-type')) {
											if(secMap[sectionKey].field[itemToRemoveIndex].isControllingField || secMap[sectionKey].field[itemToRemoveIndex].isdependentField) {
												alert('You can not remove this field from section.'); // Alert when Dependent or Controlling field removing from section.
												ui.sender.sortable("cancel");
											} else {
												delete secMap[sectionKey].field[itemToRemoveIndex].label;
												if(secMap[sectionKey].field[itemToRemoveIndex].fieldDisplayType.toUpperCase() == 'REFERENCE') {
													delete secMap[sectionKey].field[itemToRemoveIndex].isFirstValueBlank;
													delete secMap[sectionKey].field[itemToRemoveIndex].isControllingField;
													delete secMap[sectionKey].field[itemToRemoveIndex].isdependentField;
													delete secMap[sectionKey].field[itemToRemoveIndex].lookupRecordCriteria;
												} else if (secMap[sectionKey].field[itemToRemoveIndex].fieldDisplayType.toUpperCase() == 'PICKLIST') {
													delete secMap[sectionKey].field[itemToRemoveIndex].isFirstValueBlank;
													delete secMap[sectionKey].field[itemToRemoveIndex].isControllingField;
													delete secMap[sectionKey].field[itemToRemoveIndex].isdependentField;
												}
												delete secMap[sectionKey].field[itemToRemoveIndex].type;
												delete secMap[sectionKey].field[itemToRemoveIndex].placeholderText;
												delete secMap[sectionKey].field[itemToRemoveIndex].hoverText;
												delete secMap[sectionKey].field[itemToRemoveIndex].instructionText;
												delete secMap[sectionKey].field[itemToRemoveIndex].instructionTextPosition;
												delete secMap[sectionKey].field[itemToRemoveIndex].required;
												delete secMap[sectionKey].field[itemToRemoveIndex].rendered;
												delete secMap[sectionKey].field[itemToRemoveIndex].isBlank;
												selectedMoList[y].field.splice(currentIndex, 0, secMap[sectionKey].field[itemToRemoveIndex]); // Adding Field Data to Model List.
												secMap[sectionKey].field.splice(itemToRemoveIndex, 1); // Removing Field Data from Section Map.
											}
										}
									}
								}
							} else if(jQuery(ui.item).attr('is-upload-type')) {
								alert('You can not placed here.'); // Alert when Upload Move to the Model Part from Section.
								ui.sender.sortable("cancel"); // Cancel Sortable Action.
							} else {
								alert('You can not placed here. Data model is different.'); // Alert when Data Model is Different
								ui.sender.sortable("cancel"); // Cancel Sortable Action.
							}
						} // If Field is Move from One Model to Another Model 
						else if(jQuery(ui.sender).prop('id').indexOf('fieldSortable') > -1 && jQuery(this).prop('id').indexOf('fieldSortable') > -1 ) {
							alert('You can not placed here. Data model is different.');
						} // If Upload is added to Section 
						else if(jQuery(ui.sender).prop('id').indexOf('uploadComponent') > -1 && jQuery(this).prop('id').indexOf('fieldSortable') == -1) {
							var sectionKey = jQuery(this).parent().parent().parent().parent().prop('id');
							if(secMap[sectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN") {
								var ulIndex = jQuery('#' + sectionKey).find('.inner-wrapper-left').children().index(jQuery(this).parent());
								var liIndex = jQuery(this).children().index(jQuery(ui.item));
								jQuery(ui.item).remove();
								scope.showUpdateFieldInfo(sectionKey, (ulIndex + liIndex), {hoverText: '', isBlank: false, rendered: true, fieldDisplayType: 'UPLOAD', type: 'UPLOAD', label: 'Upload', placeholderText: '', instructionText: '', instructionTextPosition: '', required: 'false', parentIdSource: 'MODEL', parentId: scope.selectedModelList[0].modelName, allowedContentType:'', multiple: false, maximumsize:(1*1024*1024)}, true);
							}
						} // If Upload Move to Model Section (Cancel Sortable).  
						else if(jQuery(ui.sender).prop('id').indexOf('uploadComponent') > -1 && jQuery(this).prop('id').indexOf('fieldSortable') > -1) {
							alert('You can not drop here.'); // Alert when Data Model is Different
							ui.sender.sortable("cancel");
						} // If Upload Move to Section to Upload List (Cancel Sortable).  
						else if(jQuery(this).prop('id').indexOf('uploadComponent') > -1 && jQuery(ui.sender).prop('id').indexOf('fieldSortable') == -1) {
							if(jQuery(ui.item).attr('is-upload-type')) {
								var sectionKey = jQuery(ui.sender).parent().parent().parent().parent().prop('id');
								if(secMap[sectionKey].sectionLayout.trim().toUpperCase() == "ONECOLUMN") {
									var ulIndex = jQuery('#' + sectionKey).find('.inner-wrapper-left').children().index(jQuery(ui.sender).parent());
									secMap[sectionKey].field.splice(ulIndex, 1);
								}
							} else {
								alert('You can not placed here.'); // Alert when Upload Move to the Model Part from Section.
								ui.sender.sortable("cancel");
							}
						}
											
						// Updating Controller Scope.				
						scope.$apply(function() {
							scope.sectionMap = secMap;
							scope.selectedModelList = selectedMoList;
							scope.uploadDataList = upldDataList;
						});
						// Recursive Call to Connect Them Dynamically.
						createPortalPageService.connectSectionFieldWithModel(options);
					}
				}).disableSelection();
			}		
			return createPortalPageService;
			});
			
			// Returns Plain Text
			createPortalPageApp.filter('htmlToPlaintext', function() {
			    	return function(text) {
			      		return  text ? String(text).replace(/<[^>]+>/gm, '') : '';
			    	};
			  	}
			);
			
			// method Removes the Fields that are selected in Previous Selected Dropdown.
			createPortalPageApp.filter('removePreviousSelectedValues', function() {
				return function(input, obj, valueList) {
				 	var out = [];
					angular.forEach(input, function(fieldObj) {
						if((fieldObj.fieldAPIName == '' || fieldObj.fieldAPIName == obj)) {
							out.push(fieldObj);
						} else {
							var isAdded = true;
							angular.forEach(valueList, function(value) {
								if(fieldObj.fieldAPIName == value.fieldAPIName) {
									isAdded = false;
								}
							});
							if(isAdded) {
								out.push(fieldObj);
							}
						}
					});
					return out;
				}
			});
			
			// Filter fields By Model Name.
			createPortalPageApp.filter('getlookupCriteriaFieldByModel', function() {
				return function(input, obj) {
					var out = [];
					angular.forEach(input, function(fieldObj) {
						if((undefined == fieldObj.modelName || fieldObj.modelName == obj)) {
							out.push(fieldObj);
						}
					});
					return out;
				}
			});
			
			// Split function Implemented in Angular
			createPortalPageApp.filter('split', function() {
		  		return function(input, delimiter) {
			    	delimiter = delimiter || ','
			    	return input.split(delimiter);
			  	}
			});
			
			createPortalPageApp.filter('getGlobalVarMap', function() {
		  		return function(input, obj) {
					var outMap = [];
					angular.forEach(input, function(value, key) {
						if(value == obj) {
							outMap[key] = input[key];
						}
					});
					return outMap;
				}
			});
			
			// Function Call on Document Ready.
			jQuery(document).ready(function() {
				jQuery('#createNewPageHeaderDiv').removeClass('hide');
				jQuery('#createNewSectionDiv').removeClass('hide');
				jQuery('#createNewModelDiv').removeClass('hide');
				jQuery('#updateFieldInfo').removeClass('hide');
				jQuery('#configureDependentPicklistModel').removeClass('hide');
				jQuery('#loadingImageDiv').addClass('hide');
				
				/*$(window).bind('beforeunload',function(){
		      		return 'are you sure you want to leave Without Save?';
			  	});*/
			});
			
			Array.prototype.clean = function( deleteValue ) {
	            for( var i = 0; i < this.length; i++ )
	            {
	                if( this[i] == deleteValue )
	                {         
	                    this.splice( i, 1 );
	                    i--;
	                }
	            }
	            return this;
	        };
		</script>
	</html>
</apex:page>